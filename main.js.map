{"version":3,"file":"main.js","mappings":"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","sources":["webpack://my-webpack-project/./code/index.ts","webpack://my-webpack-project/./code/src/Engine/AssetHandling/MeshStore.ts","webpack://my-webpack-project/./code/src/Engine/AssetHandling/TextureStore.ts","webpack://my-webpack-project/./code/src/Engine/Audio/AudioPlayer.ts","webpack://my-webpack-project/./code/src/Engine/Camera.ts","webpack://my-webpack-project/./code/src/Engine/ECS/Components/BoundingBoxComponent.ts","webpack://my-webpack-project/./code/src/Engine/ECS/Components/CollisionComponent.ts","webpack://my-webpack-project/./code/src/Engine/ECS/Components/Component.ts","webpack://my-webpack-project/./code/src/Engine/ECS/Components/GraphicsComponent.ts","webpack://my-webpack-project/./code/src/Engine/ECS/Components/MeshCollisionComponent.ts","webpack://my-webpack-project/./code/src/Engine/ECS/Components/MovementComponent.ts","webpack://my-webpack-project/./code/src/Engine/ECS/Components/ParticleSpawnerComponent.ts","webpack://my-webpack-project/./code/src/Engine/ECS/Components/PositionComponent.ts","webpack://my-webpack-project/./code/src/Engine/ECS/ECSManager.ts","webpack://my-webpack-project/./code/src/Engine/ECS/Entity.ts","webpack://my-webpack-project/./code/src/Engine/ECS/Systems/CameraFocusSystem.ts","webpack://my-webpack-project/./code/src/Engine/ECS/Systems/CollisionSystem.ts","webpack://my-webpack-project/./code/src/Engine/ECS/Systems/GraphicsSystem.ts","webpack://my-webpack-project/./code/src/Engine/ECS/Systems/MovementSystem.ts","webpack://my-webpack-project/./code/src/Engine/ECS/Systems/ParticleSpawnerSystem.ts","webpack://my-webpack-project/./code/src/Engine/ECS/Systems/PositionMatrixUpdateSystem.ts","webpack://my-webpack-project/./code/src/Engine/ECS/Systems/System.ts","webpack://my-webpack-project/./code/src/Engine/Framebuffer.ts","webpack://my-webpack-project/./code/src/Engine/GUI/Button.ts","webpack://my-webpack-project/./code/src/Engine/GUI/Checkbox.ts","webpack://my-webpack-project/./code/src/Engine/GUI/GuiObject.ts","webpack://my-webpack-project/./code/src/Engine/GUI/Progress.ts","webpack://my-webpack-project/./code/src/Engine/GUI/Slider.ts","webpack://my-webpack-project/./code/src/Engine/GUI/Text/TextObject2D.ts","webpack://my-webpack-project/./code/src/Engine/GUI/Text/TextObject3D.ts","webpack://my-webpack-project/./code/src/Engine/Input/Input.ts","webpack://my-webpack-project/./code/src/Engine/Lighting/DirectionalLight.ts","webpack://my-webpack-project/./code/src/Engine/Lighting/PointLight.ts","webpack://my-webpack-project/./code/src/Engine/Maths/Matrix3.ts","webpack://my-webpack-project/./code/src/Engine/Maths/MousePicking.ts","webpack://my-webpack-project/./code/src/Engine/Maths/SAT.ts","webpack://my-webpack-project/./code/src/Engine/Maths/Vec.ts","webpack://my-webpack-project/./code/src/Engine/Maths/Vec2.ts","webpack://my-webpack-project/./code/src/Engine/Maths/Vec3.ts","webpack://my-webpack-project/./code/src/Engine/Objects/GraphicsBundle.ts","webpack://my-webpack-project/./code/src/Engine/Objects/GraphicsObject.ts","webpack://my-webpack-project/./code/src/Engine/Objects/GrassSpawner.ts","webpack://my-webpack-project/./code/src/Engine/Objects/Heightmap.ts","webpack://my-webpack-project/./code/src/Engine/Objects/Mesh.ts","webpack://my-webpack-project/./code/src/Engine/Objects/Octree.ts","webpack://my-webpack-project/./code/src/Engine/Objects/ParticleSpawner.ts","webpack://my-webpack-project/./code/src/Engine/Objects/PhongQuad.ts","webpack://my-webpack-project/./code/src/Engine/Objects/ScreenQuad.ts","webpack://my-webpack-project/./code/src/Engine/Objects/Skybox.ts","webpack://my-webpack-project/./code/src/Engine/Physics/CollisionSolver.ts","webpack://my-webpack-project/./code/src/Engine/Physics/IntersectionInformation.ts","webpack://my-webpack-project/./code/src/Engine/Physics/IntersectionTester.ts","webpack://my-webpack-project/./code/src/Engine/Physics/Shapes/OBB.ts","webpack://my-webpack-project/./code/src/Engine/Physics/Shapes/Ray.ts","webpack://my-webpack-project/./code/src/Engine/Physics/Shapes/Shape.ts","webpack://my-webpack-project/./code/src/Engine/Physics/Shapes/Triangle.ts","webpack://my-webpack-project/./code/src/Engine/Rendering/OverlayRendering.ts","webpack://my-webpack-project/./code/src/Engine/Rendering/RenderPasses/BloomRenderPass.ts","webpack://my-webpack-project/./code/src/Engine/Rendering/RenderPasses/CRTRenderPass.ts","webpack://my-webpack-project/./code/src/Engine/Rendering/RenderPasses/FinishedOutputRenderPass.ts","webpack://my-webpack-project/./code/src/Engine/Rendering/RenderPasses/GeometryRenderPass.ts","webpack://my-webpack-project/./code/src/Engine/Rendering/RenderPasses/LightingRenderPass.ts","webpack://my-webpack-project/./code/src/Engine/Rendering/RenderPasses/ParticleRenderPass.ts","webpack://my-webpack-project/./code/src/Engine/Rendering/RenderPasses/ShadowRenderPass.ts","webpack://my-webpack-project/./code/src/Engine/Rendering/RenderPasses/SkyboxRenderPass.ts","webpack://my-webpack-project/./code/src/Engine/Rendering/Rendering.ts","webpack://my-webpack-project/./code/src/Engine/Rendering/Scene.ts","webpack://my-webpack-project/./code/src/Engine/ShaderPrograms/DeferredRendering/GeometryPass.ts","webpack://my-webpack-project/./code/src/Engine/ShaderPrograms/DeferredRendering/LightingPass.ts","webpack://my-webpack-project/./code/src/Engine/ShaderPrograms/GrassShaderProgram.ts","webpack://my-webpack-project/./code/src/Engine/ShaderPrograms/ParticleShaderProgram.ts","webpack://my-webpack-project/./code/src/Engine/ShaderPrograms/PhongShaderProgram.ts","webpack://my-webpack-project/./code/src/Engine/ShaderPrograms/PostProcessing/BloomBlending.ts","webpack://my-webpack-project/./code/src/Engine/ShaderPrograms/PostProcessing/BloomExtraction.ts","webpack://my-webpack-project/./code/src/Engine/ShaderPrograms/PostProcessing/CrtShaderProgram.ts","webpack://my-webpack-project/./code/src/Engine/ShaderPrograms/PostProcessing/GaussianBlur.ts","webpack://my-webpack-project/./code/src/Engine/ShaderPrograms/ScreenQuadShaderProgram.ts","webpack://my-webpack-project/./code/src/Engine/ShaderPrograms/ShaderProgram.ts","webpack://my-webpack-project/./code/src/Engine/ShaderPrograms/ShadowMapping/GrassShadowPass.ts","webpack://my-webpack-project/./code/src/Engine/ShaderPrograms/ShadowMapping/ShadowPass.ts","webpack://my-webpack-project/./code/src/Engine/ShaderPrograms/SimpleShaderProgram.ts","webpack://my-webpack-project/./code/src/Engine/ShaderPrograms/Skybox/SkyboxShaderProgram.ts","webpack://my-webpack-project/./code/src/Engine/State.ts","webpack://my-webpack-project/./code/src/Engine/StateMachine.ts","webpack://my-webpack-project/./code/src/Engine/Textures/CubeMap.ts","webpack://my-webpack-project/./code/src/Engine/Textures/Texture.ts","webpack://my-webpack-project/./code/src/Engine/Utils/WebUtils.ts","webpack://my-webpack-project/./code/src/Game/ECS/Components/DeliveryZoneComponent.ts","webpack://my-webpack-project/./code/src/Game/ECS/Systems/DeliveryZoneSystem.ts","webpack://my-webpack-project/./code/src/Game/GameMachine.ts","webpack://my-webpack-project/./code/src/Game/GrassHandler.ts","webpack://my-webpack-project/./code/src/Game/Newspaper.ts","webpack://my-webpack-project/./code/src/Game/ObjectPlacer.ts","webpack://my-webpack-project/./code/src/Game/Player.ts","webpack://my-webpack-project/./code/src/Game/States/ControlsMenu.ts","webpack://my-webpack-project/./code/src/Game/States/DebugMenu.ts","webpack://my-webpack-project/./code/src/Game/States/DebugMode.ts","webpack://my-webpack-project/./code/src/Game/States/EndScreen.ts","webpack://my-webpack-project/./code/src/Game/States/Game.ts","webpack://my-webpack-project/./code/src/Game/States/LoadingScreen.ts","webpack://my-webpack-project/./code/src/Game/States/Menu.ts","webpack://my-webpack-project/./code/src/Game/States/OptionsMenu.ts","webpack://my-webpack-project/./code/src/main.ts","webpack://my-webpack-project/webpack/bootstrap","webpack://my-webpack-project/webpack/startup"],"sourcesContent":["export * from \"./src/main\"\r\n","import Vec2 from \"../Maths/Vec2\";\r\nimport Vec3 from \"../Maths/Vec3\";\r\nimport Triangle from \"../Physics/Shapes/Triangle\";\r\nimport { geometryPass } from \"../ShaderPrograms/DeferredRendering/GeometryPass\";\r\nimport Heightmap from \"../Objects/Heightmap\";\r\nimport Mesh from \"../Objects/Mesh\";\r\nimport Octree from \"../Objects/Octree\";\r\nimport { WebUtils } from \"../Utils/WebUtils\";\r\n\r\nexport default class MeshStore {\r\n\tprivate meshMap: Map<string, Mesh>;\r\n\tprivate heightmapMap: Map<string, Heightmap>;\r\n\tprivate octreeMap: Map<\r\n\t\tstring,\r\n\t\t{ octree: Octree; triangles: Array<Triangle> }\r\n\t>;\r\n\r\n\tconstructor() {\r\n\t\tthis.meshMap = new Map<string, Mesh>();\r\n\t\tthis.heightmapMap = new Map<string, Heightmap>();\r\n\t\tthis.octreeMap = new Map<\r\n\t\t\tstring,\r\n\t\t\t{ octree: Octree; triangles: Array<Triangle> }\r\n\t\t>();\r\n\t}\r\n\r\n\tgetMesh(path: string, printWarnings: boolean = true): Mesh {\r\n\t\tlet mesh = this.meshMap.get(path);\r\n\t\tif (mesh) {\r\n\t\t\treturn mesh;\r\n\t\t}\r\n\r\n\t\tif (printWarnings) {\r\n\t\t\tconsole.warn(\"Trying to get mesh \" + path + \" before loading it\");\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tasync loadMesh(path: string): Promise<Mesh> {\r\n\t\tlet mesh = this.meshMap.get(path);\r\n\t\tif (mesh) {\r\n\t\t\treturn mesh;\r\n\t\t}\r\n\r\n\t\tlet newVertices = await this.parseObjContent(path);\r\n\t\tthis.meshMap.set(path, new Mesh(geometryPass, newVertices));\r\n\r\n\t\treturn this.meshMap.get(path);\r\n\t}\r\n\r\n\tgetHeightmap(path: string, printWarnings: boolean = true): Heightmap {\r\n\t\tlet heightmap = this.heightmapMap.get(path);\r\n\t\tif (heightmap) {\r\n\t\t\treturn heightmap;\r\n\t\t}\r\n\r\n\t\tif (printWarnings) {\r\n\t\t\tconsole.warn(\"Trying to get heightmap \" + path + \" before loading it\");\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tasync loadHeightmap(\r\n\t\tpath: string,\r\n\t\tuseTextureSizeForResolution: boolean = true,\r\n\t\tx: number = 2,\r\n\t\ty: number = 2,\r\n\t\tsizePerX: number = 1.0,\r\n\t\tsizePerY: number = 1.0\r\n\t): Promise<Heightmap> {\r\n\t\tlet heightmap = this.heightmapMap.get(path);\r\n\t\tif (heightmap) {\r\n\t\t\treturn heightmap;\r\n\t\t}\r\n\r\n\t\tlet newHeightmap = new Heightmap(geometryPass);\r\n\t\tif (!useTextureSizeForResolution) {\r\n\t\t\tnewHeightmap.createPlane(x, y, sizePerX, sizePerY);\r\n\t\t}\r\n\t\tawait newHeightmap.readHeightDataFromTexture(\r\n\t\t\tpath,\r\n\t\t\tuseTextureSizeForResolution\r\n\t\t);\r\n\t\tthis.heightmapMap.set(path, newHeightmap);\r\n\r\n\t\treturn newHeightmap;\r\n\t}\r\n\r\n\tgetOctree(path: string, printWarnings: boolean = true): Octree {\r\n\t\tlet octree = this.octreeMap.get(path);\r\n\t\tif (octree && octree.triangles.length == 0) {\r\n\t\t\treturn octree.octree;\r\n\t\t}\r\n\r\n\t\tif (printWarnings) {\r\n\t\t\tconsole.warn(\"Trying to get octree \" + path + \" before loading it\");\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tasync loadOctree(\r\n\t\tpath: string,\r\n\t\tsmallestOctreeNodeSizeMultiplicator: number,\r\n\t\tmaxShapesPerOctreeNode: number,\r\n\t\ttimeLimit: number = Infinity\r\n\t): Promise<{ octree: Octree; doneLoading: boolean }> {\r\n\t\tlet startTime = Date.now();\r\n\r\n\t\tlet octree = this.octreeMap.get(path);\r\n\t\tif (octree && octree.triangles.length == 0) {\r\n\t\t\treturn { octree: octree.octree, doneLoading: true };\r\n\t\t}\r\n\r\n\t\tif (octree == undefined) {\r\n\t\t\t// Immediately make it defined, but with no content, to only do the initialization once\r\n\t\t\tthis.octreeMap.set(path, {\r\n\t\t\t\toctree: null,\r\n\t\t\t\ttriangles: null,\r\n\t\t\t});\r\n\r\n\t\t\toctree = this.octreeMap.get(path);\r\n\r\n\t\t\tlet triangles = new Array<Triangle>();\r\n\t\t\tif (path.endsWith(\".obj\")) {\r\n\t\t\t\tlet mesh = this.getMesh(path, false);\r\n\t\t\t\tif (!mesh) {\r\n\t\t\t\t\tconsole.warn(\r\n\t\t\t\t\t\t\"Trying to get octree for \" + path + \" before loading \" + path\r\n\t\t\t\t\t);\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tmesh.setupTriangles(triangles);\r\n\t\t\t} else {\r\n\t\t\t\tlet heightmap = this.getHeightmap(path, false);\r\n\t\t\t\tif (!heightmap) {\r\n\t\t\t\t\tconsole.warn(\r\n\t\t\t\t\t\t\"Trying to get octree for \" + path + \" before loading \" + path\r\n\t\t\t\t\t);\r\n\t\t\t\t\treturn null;\r\n\t\t\t\t}\r\n\r\n\t\t\t\theightmap.setupTriangles(triangles);\r\n\t\t\t}\r\n\r\n\t\t\toctree.triangles = triangles;\r\n\r\n\t\t\tlet octPath =\r\n\t\t\t\t\"Assets/octrees/\" + path.split(\"/\").pop().split(\".\")[0] + \".oct\";\r\n\t\t\tconst response = await fetch(octPath);\r\n\t\t\tif (response.ok) {\r\n\t\t\t\tconsole.log(\"Loaded octree from \" + octPath);\r\n\t\t\t\tconst octContent = await response.text();\r\n\r\n\t\t\t\toctree.octree = new Octree(\r\n\t\t\t\t\tnew Vec3(),\r\n\t\t\t\t\tnew Vec3(),\r\n\t\t\t\t\tsmallestOctreeNodeSizeMultiplicator,\r\n\t\t\t\t\tmaxShapesPerOctreeNode\r\n\t\t\t\t);\r\n\t\t\t\toctree.octree.parseOct(octContent);\r\n\t\t\t\toctree.triangles.length = 0;\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log(\r\n\t\t\t\t\t\"Did not find an octree to load from \" +\r\n\t\t\t\t\t\toctPath +\r\n\t\t\t\t\t\t\". Generating it from scratch.\"\r\n\t\t\t\t);\r\n\t\t\t\tlet minVec = new Vec3([Infinity, Infinity, Infinity]);\r\n\t\t\t\tlet maxVec = new Vec3([-Infinity, -Infinity, -Infinity]);\r\n\t\t\t\tfor (let tri of triangles) {\r\n\t\t\t\t\tfor (let vertex of tri.getTransformedVertices()) {\r\n\t\t\t\t\t\tmaxVec.max(vertex);\r\n\t\t\t\t\t\tminVec.min(vertex);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\toctree.octree = new Octree(\r\n\t\t\t\t\tminVec,\r\n\t\t\t\t\tmaxVec,\r\n\t\t\t\t\tsmallestOctreeNodeSizeMultiplicator,\r\n\t\t\t\t\tmaxShapesPerOctreeNode\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\twhile (\r\n\t\t\toctree.octree != undefined &&\r\n\t\t\toctree.triangles != undefined &&\r\n\t\t\toctree.triangles.length > 0 &&\r\n\t\t\tDate.now() - startTime < timeLimit\r\n\t\t) {\r\n\t\t\toctree.octree.addShape(octree.triangles.pop());\r\n\t\t}\r\n\r\n\t\tif (octree.triangles != undefined && octree.triangles.length == 0) {\r\n\t\t\toctree.octree.prune();\r\n\r\n\t\t\t// console.groupCollapsed(\"octree for \" + path);\r\n\t\t\t// octree.octree.print();\r\n\t\t\t// console.groupEnd();\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\toctree: octree.octree,\r\n\t\t\tdoneLoading:\r\n\t\t\t\toctree.triangles != undefined && octree.triangles.length == 0,\r\n\t\t};\r\n\t}\r\n\r\n\tdownloadOctrees() {\r\n\t\tfor (let octree of this.octreeMap) {\r\n\t\t\tlet data = octree[1].octree.getDataString();\r\n\t\t\tWebUtils.DownloadFile(\r\n\t\t\t\toctree[0].split(\"/\").pop().split(\".\")[0] + \".oct\",\r\n\t\t\t\tdata\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async parseObjContent(meshPath: string): Promise<Float32Array> {\r\n\t\t/*\r\n\t\thttps://webglfundamentals.org/webgl/lessons/webgl-load-obj.html\r\n\t\t*/\r\n\r\n\t\tconst response = await fetch(meshPath);\r\n\t\tconst objContent = await response.text();\r\n\r\n\t\tconst lines = objContent.split(\"\\n\");\r\n\t\tlet vertexPositions = new Array<Vec3>();\r\n\t\tlet vertexTexCoords = new Array<Vec2>();\r\n\t\tlet vertexNormals = new Array<Vec3>();\r\n\t\tlet vertices = new Array<{\r\n\t\t\tposIndex: number;\r\n\t\t\ttexCoordIndex: number;\r\n\t\t\tnormalIndex: number;\r\n\t\t}>();\r\n\t\tfor (let line of lines) {\r\n\t\t\tline = line.trim();\r\n\r\n\t\t\tif (line.startsWith(\"vt\")) {\r\n\t\t\t\t// Texture coordinates\r\n\t\t\t\tconst coords = line.split(/\\s+/).filter((element) => {\r\n\t\t\t\t\treturn element != \"vt\";\r\n\t\t\t\t});\r\n\t\t\t\tvertexTexCoords.push(\r\n\t\t\t\t\tnew Vec2([parseFloat(coords[0]), parseFloat(coords[1])])\r\n\t\t\t\t);\r\n\t\t\t} else if (line.startsWith(\"vn\")) {\r\n\t\t\t\t// Normal\r\n\t\t\t\tconst coords = line.split(/\\s+/).filter((element) => {\r\n\t\t\t\t\treturn element != \"vn\";\r\n\t\t\t\t});\r\n\t\t\t\tvertexNormals.push(\r\n\t\t\t\t\tnew Vec3([\r\n\t\t\t\t\t\tparseFloat(coords[0]),\r\n\t\t\t\t\t\tparseFloat(coords[1]),\r\n\t\t\t\t\t\tparseFloat(coords[2]),\r\n\t\t\t\t\t])\r\n\t\t\t\t);\r\n\t\t\t} else if (line.startsWith(\"v\")) {\r\n\t\t\t\t// Position\r\n\t\t\t\tconst coords = line.split(/\\s+/).filter((element) => {\r\n\t\t\t\t\treturn element != \"v\";\r\n\t\t\t\t});\r\n\t\t\t\tvertexPositions.push(\r\n\t\t\t\t\tnew Vec3([\r\n\t\t\t\t\t\tparseFloat(coords[0]),\r\n\t\t\t\t\t\tparseFloat(coords[1]),\r\n\t\t\t\t\t\tparseFloat(coords[2]),\r\n\t\t\t\t\t])\r\n\t\t\t\t);\r\n\t\t\t} else if (line.startsWith(\"f\")) {\r\n\t\t\t\t// Faces\r\n\t\t\t\tconst coords = line.split(/\\s+/).filter((element) => {\r\n\t\t\t\t\treturn element != \"f\";\r\n\t\t\t\t});\r\n\t\t\t\tfor (let i = 0; i < coords.length - 2; i++) {\r\n\t\t\t\t\tfor (let j = 0; j < 3; j++) {\r\n\t\t\t\t\t\tlet index = j == 0 ? 0 : i + j; // 0 if j is zero, otherwize i +j\r\n\t\t\t\t\t\tconst indices = coords[index].split(\"/\");\r\n\r\n\t\t\t\t\t\tconst last = vertices.push({\r\n\t\t\t\t\t\t\tposIndex: NaN,\r\n\t\t\t\t\t\t\ttexCoordIndex: NaN,\r\n\t\t\t\t\t\t\tnormalIndex: NaN,\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tif (indices.length > 0) {\r\n\t\t\t\t\t\t\tvertices[last - 1].posIndex = parseInt(indices[0]) - 1;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (indices.length > 1) {\r\n\t\t\t\t\t\t\tvertices[last - 1].texCoordIndex = parseInt(indices[1]) - 1; // Can be empty, texCoordIndex will then be NaN\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (indices.length > 2) {\r\n\t\t\t\t\t\t\tvertices[last - 1].normalIndex = parseInt(indices[2]) - 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else if (line.startsWith(\"#\")) {\r\n\t\t\t\t// A comment, ignore\r\n\t\t\t} else if (line.length > 0) {\r\n\t\t\t\t// Unhandled keywords\r\n\t\t\t\t// console.warn(\"OBJ loader: Unhandled keyword \" + line.split(/\\s+/)[0]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet returnArr = new Float32Array(vertices.length * 8); // 3 * pos + 3 * norm + 2 * tx\r\n\r\n\t\tfor (let i = 0; i < vertices.length; i++) {\r\n\t\t\tif (!isNaN(vertices[i].posIndex)) {\r\n\t\t\t\treturnArr[i * 8] = vertexPositions[vertices[i].posIndex].x;\r\n\t\t\t\treturnArr[i * 8 + 1] = vertexPositions[vertices[i].posIndex].y;\r\n\t\t\t\treturnArr[i * 8 + 2] = vertexPositions[vertices[i].posIndex].z;\r\n\t\t\t} else {\r\n\t\t\t\treturnArr[i * 8] = 0.0;\r\n\t\t\t\treturnArr[i * 8 + 1] = 0.0;\r\n\t\t\t\treturnArr[i * 8 + 2] = 0.0;\r\n\t\t\t}\r\n\r\n\t\t\tif (!isNaN(vertices[i].normalIndex)) {\r\n\t\t\t\treturnArr[i * 8 + 3] = vertexNormals[vertices[i].normalIndex].x;\r\n\t\t\t\treturnArr[i * 8 + 4] = vertexNormals[vertices[i].normalIndex].y;\r\n\t\t\t\treturnArr[i * 8 + 5] = vertexNormals[vertices[i].normalIndex].z;\r\n\t\t\t} else {\r\n\t\t\t\treturnArr[i * 8 + 3] = 1.0;\r\n\t\t\t\treturnArr[i * 8 + 4] = 0.0;\r\n\t\t\t\treturnArr[i * 8 + 5] = 0.0;\r\n\t\t\t}\r\n\r\n\t\t\tif (!isNaN(vertices[i].texCoordIndex)) {\r\n\t\t\t\treturnArr[i * 8 + 6] = vertexTexCoords[vertices[i].texCoordIndex].x;\r\n\t\t\t\treturnArr[i * 8 + 7] = vertexTexCoords[vertices[i].texCoordIndex].y;\r\n\t\t\t} else {\r\n\t\t\t\treturnArr[i * 8 + 6] = 0.0;\r\n\t\t\t\treturnArr[i * 8 + 7] = 0.0;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn returnArr;\r\n\t}\r\n}\r\n","import CubeMap from \"../Textures/CubeMap\";\r\nimport Texture from \"../Textures/Texture\";\r\n\r\nexport default class TextureStore {\r\n\tprivate textures: Map<string, Texture>;\r\n\tprivate cubeMaps: Map<string, CubeMap>;\r\n\r\n\tconstructor() {\r\n\t\tthis.textures = new Map<string, Texture>();\r\n\t\tthis.cubeMaps = new Map<string, CubeMap>();\r\n\t}\r\n\r\n\tgetTexture(path: string): Texture {\r\n\t\tlet tex = this.textures.get(path);\r\n\t\tif (tex) {\r\n\t\t\treturn tex;\r\n\t\t}\r\n\r\n\t\tlet newTexture = new Texture();\r\n\t\tnewTexture.loadFromFile(path);\r\n\t\tthis.textures.set(path, newTexture);\r\n\t\treturn newTexture;\r\n\t}\r\n\r\n\tgetCubeMap(path: string): CubeMap {\r\n\t\tlet cubeMap = this.cubeMaps.get(path);\r\n\t\tif (cubeMap) {\r\n\t\t\treturn cubeMap;\r\n\t\t}\r\n\r\n\t\tlet newCubeMap = new CubeMap();\r\n\t\tnewCubeMap.loadCubemap([\r\n\t\t\tpath + \"/right.png\",\r\n\t\t\tpath + \"/left.png\",\r\n\t\t\tpath + \"/bottom.png\",\r\n\t\t\tpath + \"/top.png\",\r\n\t\t\tpath + \"/front.png\",\r\n\t\t\tpath + \"/back.png\",\r\n\t\t]);\r\n\t\tthis.cubeMaps.set(path, newCubeMap);\r\n\t\treturn newCubeMap;\r\n\t}\r\n}\r\n","export default class AudioPlayer {\r\n\tsounds: object;\r\n\tactive: boolean; //set to true when user has interacted with document\r\n\r\n\tconstructor() {\r\n\t\tthis.sounds = {\r\n\t\t\t// bell: new Audio(\"Assets/Audio/Effects/bell.m4a\"), //https://opengameart.org/content/100-cc0-sfx\r\n\t\t};\r\n\t\tthis.active = false;\r\n\r\n\t\tfor (let sound in this.sounds) {\r\n\t\t\tthis.sounds[sound].preload = \"auto\";\r\n\t\t}\r\n\r\n\t\t// this.setVolume(\"bell\", 0.3);\r\n\t}\r\n\r\n\tplaySound(key, loop) {\r\n\t\tthis.sounds[key].loop = loop;\r\n\t\tthis.active && this.sounds[key].play();\r\n\t}\r\n\r\n\tsetVolume(key, volume) {\r\n\t\tthis.sounds[key].volume = volume;\r\n\t}\r\n\r\n\tsetTime(key, time) {\r\n\t\tthis.sounds[key].currentTime = time;\r\n\t}\r\n\r\n\tpauseSound(key) {\r\n\t\tthis.sounds[key].pause();\r\n\t}\r\n\r\n\tstopAll() {\r\n\t\t// for(const s of Object.values(this.sounds)) {\r\n\t\t//     const playPromise = s.play();\r\n\t\t//     playPromise.then(() => {\r\n\t\t//         s.pause();\r\n\t\t//         s.currentTime = 0.0;\r\n\t\t//     })\r\n\t\t// }\r\n\t}\r\n}\r\n","import { gl } from \"../main\";\r\nimport Matrix3 from \"./Maths/Matrix3\";\r\nimport Vec3 from \"./Maths/Vec3\";\r\n\r\nexport default class Camera {\r\n\tprivate gl: WebGL2RenderingContext;\r\n\tprivate pos: Vec3;\r\n\tprivate dir: Vec3;\r\n\tprivate fov: number;\r\n\tprivate ratio: number;\r\n\tprivate viewMatrixNeedsUpdate: boolean;\r\n\tprivate projMatrixNeedsUpdate: boolean;\r\n\tprivate viewMatrix: Matrix4;\r\n\tprivate projectionMatrix: Matrix4;\r\n\tprivate viewProjMatrix: Matrix4;\r\n\r\n\tconstructor(gl: WebGL2RenderingContext) {\r\n\t\tgl = gl;\r\n\r\n\t\t// ----View----\r\n\t\tthis.pos = new Vec3();\r\n\t\tthis.dir = new Vec3([0.0, 0.0, -1.0]);\r\n\t\tthis.viewMatrix = new Matrix4(null);\r\n\t\tthis.viewMatrixNeedsUpdate = true;\r\n\t\t// ------------\r\n\r\n\t\t// ----Proj----\r\n\t\tthis.projectionMatrix = new Matrix4(null);\r\n\t\tthis.projMatrixNeedsUpdate = true;\r\n\t\tthis.ratio = 16.0 / 9.0;\r\n\t\tthis.fov = 85.0;\r\n\t\t// ------------\r\n\r\n\t\tthis.viewProjMatrix = new Matrix4(null);\r\n\t}\r\n\r\n\tgetViewProjMatrix(): Matrix4 {\r\n\t\tthis.updateViewProjMatrix();\r\n\t\treturn this.viewProjMatrix;\r\n\t}\r\n\r\n\tgetViewMatrix(): Matrix4 {\r\n\t\tthis.updateViewProjMatrix();\r\n\t\treturn this.viewMatrix;\r\n\t}\r\n\r\n\tgetProjectionMatrix(): Matrix4 {\r\n\t\tthis.updateViewProjMatrix();\r\n\t\treturn this.projectionMatrix;\r\n\t}\r\n\r\n\tgetPosition(): Vec3 {\r\n\t\treturn this.pos;\r\n\t}\r\n\r\n\tgetDir(): Vec3 {\r\n\t\treturn this.dir;\r\n\t}\r\n\r\n\tgetRight(): Vec3 {\r\n\t\tlet returnVec: Vec3 = new Vec3(this.dir);\r\n\t\tlet upVec: Vec3 = new Vec3([0.0, 1.0, 0.0]);\r\n\t\treturnVec.cross(upVec);\r\n\t\treturnVec.normalize();\r\n\t\treturn returnVec;\r\n\t}\r\n\r\n\tsetPosition(posX: number, posY: number, posZ?: number) {\r\n\t\tthis.pos.x = posX;\r\n\t\tthis.pos.y = posY;\r\n\t\tif (posZ != undefined) {\r\n\t\t\tthis.pos.z = posZ;\r\n\t\t}\r\n\t\tthis.viewMatrixNeedsUpdate = true;\r\n\t}\r\n\r\n\ttranslate(posX: number, posY: number, posZ: number) {\r\n\t\tthis.pos.x += posX;\r\n\t\tthis.pos.y += posY;\r\n\t\tthis.pos.z += posZ;\r\n\t\tthis.viewMatrixNeedsUpdate = true;\r\n\t}\r\n\r\n\tsetDir(dirX: number, dirY: number, dirZ: number) {\r\n\t\tthis.dir.x = dirX;\r\n\t\tthis.dir.y = dirY;\r\n\t\tthis.dir.z = dirZ;\r\n\t\tthis.dir.normalize();\r\n\t\tthis.viewMatrixNeedsUpdate = true;\r\n\t}\r\n\r\n\tsetFOV(fov: number) {\r\n\t\tthis.fov = fov;\r\n\t\tthis.projMatrixNeedsUpdate = true;\r\n\t}\r\n\r\n\tsetAspectRatio(ratio) {\r\n\t\tthis.ratio = ratio;\r\n\t\tthis.projMatrixNeedsUpdate = true;\r\n\t}\r\n\r\n\tprivate updateViewProjMatrix() {\r\n\t\tlet updateViewProj = false;\r\n\t\tif (this.viewMatrixNeedsUpdate) {\r\n\t\t\tthis.viewMatrix.setLookAt(\r\n\t\t\t\tthis.pos.x,\r\n\t\t\t\tthis.pos.y,\r\n\t\t\t\tthis.pos.z,\r\n\t\t\t\tthis.pos.x + this.dir.x,\r\n\t\t\t\tthis.pos.y + this.dir.y,\r\n\t\t\t\tthis.pos.z + this.dir.z,\r\n\t\t\t\t0.0,\r\n\t\t\t\t1.0,\r\n\t\t\t\t0.0\r\n\t\t\t);\r\n\t\t\tthis.viewMatrixNeedsUpdate = false;\r\n\t\t\tupdateViewProj = true;\r\n\t\t}\r\n\r\n\t\tif (this.projMatrixNeedsUpdate) {\r\n\t\t\tthis.projectionMatrix.setPerspective(this.fov, this.ratio, 0.01, 1000.0);\r\n\t\t\tthis.projMatrixNeedsUpdate = false;\r\n\t\t\tupdateViewProj = true;\r\n\t\t}\r\n\r\n\t\tif (updateViewProj) {\r\n\t\t\tthis.viewProjMatrix.set(this.projectionMatrix);\r\n\t\t\tthis.viewProjMatrix = this.viewProjMatrix.concat(this.viewMatrix);\r\n\t\t}\r\n\t}\r\n\r\n\tbindViewProjMatrix(\r\n\t\tuniformLocation: WebGLUniformLocation,\r\n\t\tskybox: boolean = false\r\n\t) {\r\n\t\tthis.updateViewProjMatrix();\r\n\r\n\t\tif (skybox) {\r\n\t\t\tlet tempViewProj = new Matrix4(this.projectionMatrix);\r\n\t\t\tlet tempViewMatrix = new Matrix3()\r\n\t\t\t\t.fromMatrix4(this.viewMatrix)\r\n\t\t\t\t.toMatrix4();\r\n\t\t\ttempViewProj.concat(tempViewMatrix);\r\n\r\n\t\t\tgl.uniformMatrix4fv(uniformLocation, false, tempViewProj.elements);\r\n\t\t} else {\r\n\t\t\tgl.uniformMatrix4fv(uniformLocation, false, this.viewProjMatrix.elements);\r\n\t\t}\r\n\t}\r\n}\r\n","import Vec3 from \"../../Maths/Vec3\";\r\nimport GraphicsObject from \"../../Objects/GraphicsObject\";\r\nimport OBB from \"../../Physics/Shapes/OBB\";\r\nimport { Component, ComponentTypeEnum } from \"./Component\";\r\n\r\nexport default class BoundingBoxComponent extends Component {\r\n\tboundingBox: OBB;\r\n\r\n\tconstructor() {\r\n\t\tsuper(ComponentTypeEnum.BOUNDINGBOX);\r\n\r\n\t\tthis.boundingBox = new OBB();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up the bounding box based on the vertices in a graphics object\r\n\t * @param graphicsObj The graphics object\r\n\t */\r\n\tsetup(graphicsObj: GraphicsObject) {\r\n\t\tlet minVec = new Vec3([Infinity, Infinity, Infinity]);\r\n\t\tlet maxVec = new Vec3([-Infinity, -Infinity, -Infinity]);\r\n\r\n\t\tlet vertices = graphicsObj.getVertexPositions();\r\n\r\n\t\tfor (let vertex of vertices) {\r\n\t\t\tmaxVec.max(vertex);\r\n\t\t\tminVec.min(vertex);\r\n\t\t}\r\n\r\n\t\tthis.boundingBox.setMinAndMaxVectors(minVec, maxVec);\r\n\t}\r\n\r\n\t/**\r\n\t * Update the transform matrix used for the bounding box\r\n\t * @param matrix Optional: Will set a new matrix to use for the bounding box. If no matrix is sent, it will use the previously set matrix but mark the box to be updated.\r\n\t */\r\n\tupdateTransformMatrix(matrix?: Matrix4) {\r\n\t\tif (matrix) {\r\n\t\t\tthis.boundingBox.setTransformMatrix(matrix);\r\n\t\t} else {\r\n\t\t\tthis.boundingBox.setUpdateNeeded();\r\n\t\t}\r\n\t}\r\n}\r\n","import { Component, ComponentTypeEnum } from \"./Component\";\r\n\r\nexport default class CollisionComponent extends Component {\r\n\tisStatic: boolean; // True if this object never moves\r\n\tisImmovable: boolean; // True if this object is not effected by collisions\r\n\r\n\tconstructor() {\r\n\t\tsuper(ComponentTypeEnum.COLLISION);\r\n\t\tthis.isStatic = false;\r\n\t\tthis.isImmovable = false;\r\n\t}\r\n}\r\n","export enum ComponentTypeEnum {\r\n\tBOUNDINGBOX,\r\n\tCAMERAFOCUS,\r\n\tCOLLISION,\r\n\tGRAPHICS,\r\n\tMESHCOLLISION,\r\n\tMOVEMENT,\r\n\tPARTICLESPAWNER,\r\n\tPOINTLIGHT,\r\n\tPOSITION,\r\n\tPOSITIONPARENT,\r\n\tDELIVERYZONE,\r\n}\r\n\r\nexport class Component {\r\n\tprivate _type: ComponentTypeEnum;\r\n\r\n\tconstructor(type: ComponentTypeEnum) {\r\n\t\tthis._type = type;\r\n\t}\r\n\r\n\tget type(): ComponentTypeEnum {\r\n\t\treturn this._type;\r\n\t}\r\n}\r\n","import GraphicsBundle from \"../../Objects/GraphicsBundle\";\r\nimport { Component, ComponentTypeEnum } from \"./Component\";\r\n\r\nexport default class GraphicsComponent extends Component {\r\n\tobject: GraphicsBundle;\r\n\r\n\tconstructor(object: GraphicsBundle) {\r\n\t\tsuper(ComponentTypeEnum.GRAPHICS);\r\n\t\tthis.object = object;\r\n\t}\r\n}\r\n","import { Component, ComponentTypeEnum } from \"./Component\";\r\nimport Triangle from \"../../Physics/Shapes/Triangle\";\r\nimport GraphicsObject from \"../../Objects/GraphicsObject\";\r\nimport Octree from \"../../Objects/Octree\";\r\nimport Vec3 from \"../../Maths/Vec3\";\r\n\r\nexport default class MeshCollisionComponent extends Component {\r\n\toctree: Octree;\r\n\r\n\tconstructor(octree: Octree, graphicsObject?: GraphicsObject) {\r\n\t\tsuper(ComponentTypeEnum.MESHCOLLISION);\r\n\t\tthis.octree = octree;\r\n\r\n\t\tif (graphicsObject) {\r\n\t\t\tthis.setup(graphicsObject, 0.1, 100);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up the triangles based on the vertices in a graphics object\r\n\t * @param graphicsObj The graphics object\r\n\t */\r\n\tprivate setup(\r\n\t\tgraphicsObj: GraphicsObject,\r\n\t\tsmallestNodeSizeMultiplicator: number,\r\n\t\tmaxShapesPerNode: number\r\n\t) {\r\n\t\tlet triangles = new Array<Triangle>();\r\n\t\tgraphicsObj.setupTriangles(triangles);\r\n\r\n\t\tlet minVec = new Vec3([Infinity, Infinity, Infinity]);\r\n\t\tlet maxVec = new Vec3([-Infinity, -Infinity, -Infinity]);\r\n\t\tfor (let tri of triangles) {\r\n\t\t\tfor (let vertex of tri.getTransformedVertices()) {\r\n\t\t\t\tmaxVec.max(vertex);\r\n\t\t\t\tminVec.min(vertex);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.octree = new Octree(\r\n\t\t\tminVec,\r\n\t\t\tmaxVec,\r\n\t\t\tsmallestNodeSizeMultiplicator,\r\n\t\t\tmaxShapesPerNode\r\n\t\t);\r\n\r\n\t\tthis.octree.addShapes(triangles);\r\n\t\tthis.octree.prune();\r\n\t}\r\n}\r\n","import { Component, ComponentTypeEnum } from \"./Component\";\r\nimport Vec2 from \"../../Maths/Vec2\";\r\nimport Vec3 from \"../../Maths/Vec3\";\r\n\r\nexport default class MovementComponent extends Component {\r\n\tconstantAcceleration: Vec3;\r\n\taccelerationDirection: Vec3;\r\n\tacceleration: number;\r\n\tvelocity: Vec3;\r\n\tdrag: number;\r\n\tonGround: boolean;\r\n\tjumpPower: number;\r\n\tjumpRequested: boolean;\r\n\tjumpAllowed: boolean;\r\n\r\n\tconstructor() {\r\n\t\tsuper(ComponentTypeEnum.MOVEMENT);\r\n\t\tthis.constantAcceleration = new Vec3([0.0, -9.8, 0.0]);\r\n\t\tthis.accelerationDirection = new Vec3();\r\n\t\tthis.acceleration = 6.0;\r\n\t\tthis.velocity = new Vec3();\r\n\t\tthis.drag = 4.0;\r\n\t\tthis.onGround = false;\r\n\t\tthis.jumpPower = 5.0;\r\n\t\tthis.jumpRequested = false;\r\n\t\tthis.jumpAllowed = false;\r\n\t}\r\n}\r\n","import ParticleSpawner from \"../../Objects/ParticleSpawner\";\r\nimport { Component, ComponentTypeEnum } from \"./Component\";\r\n\r\nexport default class ParticleSpawnerComponent extends Component {\r\n\tlifeTime: number;\r\n\tresetTimer: number;\r\n\tparticleSpawner: ParticleSpawner;\r\n\r\n\tconstructor(particleSpawner: ParticleSpawner) {\r\n\t\tsuper(ComponentTypeEnum.PARTICLESPAWNER);\r\n\r\n\t\tthis.lifeTime = 1.0;\r\n\t\tthis.resetTimer = 0.0;\r\n\t\tthis.particleSpawner = particleSpawner;\r\n\t}\r\n}\r\n","import { Component, ComponentTypeEnum } from \"./Component\";\r\nimport Vec3 from \"../../Maths/Vec3\";\r\n\r\nexport default class PositionComponent extends Component {\r\n\tposition: Vec3;\r\n\trotation: Vec3;\r\n\tscale: Vec3;\r\n\torigin: Vec3;\r\n\r\n\tmatrix: Matrix4;\r\n\r\n\tconstructor(componentType?: ComponentTypeEnum) {\r\n\t\tsuper(componentType ? componentType : ComponentTypeEnum.POSITION);\r\n\r\n\t\tthis.position = new Vec3();\r\n\t\tthis.rotation = new Vec3();\r\n\t\tthis.scale = new Vec3([1.0, 1.0, 1.0]);\r\n\t\tthis.origin = new Vec3();\r\n\r\n\t\tthis.matrix = new Matrix4(null);\r\n\t}\r\n\r\n\tcalculateMatrix(matrix: Matrix4) {\r\n\t\tmatrix.translate(this.position.x, this.position.y, this.position.z);\r\n\t\tif (this.rotation.length2() > 0.0000001) {\r\n\t\t\tlet normRotation = new Vec3(this.rotation);\r\n\t\t\tnormRotation.normalize();\r\n\t\t\tmatrix.rotate(\r\n\t\t\t\tthis.rotation.len(),\r\n\t\t\t\tnormRotation.x,\r\n\t\t\t\tnormRotation.y,\r\n\t\t\t\tnormRotation.z\r\n\t\t\t);\r\n\t\t}\r\n\t\tmatrix.scale(this.scale.x, this.scale.y, this.scale.z);\r\n\t\tmatrix.translate(-this.origin.x, -this.origin.y, -this.origin.z);\r\n\t}\r\n}\r\n","import System from \"./Systems/System\";\r\nimport CollisionSystem from \"./Systems/CollisionSystem\";\r\nimport MovementSystem from \"./Systems/MovementSystem\";\r\nimport GraphicsSystem from \"./Systems/GraphicsSystem\";\r\nimport ParticleSpawnerSystem from \"./Systems/ParticleSpawnerSystem\";\r\nimport Rendering from \"../Rendering/Rendering\";\r\nimport Entity from \"./Entity\";\r\nimport { Component, ComponentTypeEnum } from \"./Components/Component\";\r\nimport Camera from \"../Camera\";\r\nimport CameraFocusSystem from \"./Systems/CameraFocusSystem\";\r\nimport PositionMatrixUpdateSystem from \"./Systems/PositionMatrixUpdateSystem\";\r\nimport DeliveryZoneSystem from \"../../Game/ECS/Systems/DeliveryZoneSystem\";\r\n\r\nexport default class ECSManager {\r\n\tprivate systems: Map<String, System>;\r\n\tprivate entityCounter: number;\r\n\tprivate entities: Array<Entity>;\r\n\tprivate entityAdditionQueue: Array<Entity>;\r\n\tprivate entityDeletionQueue: Array<number>;\r\n\tprivate componentAdditionQueue: Array<{\r\n\t\tentity: Entity;\r\n\t\tcomponent: Component;\r\n\t}>;\r\n\tprivate componentRemovalQueue: Array<{\r\n\t\tentity: Entity;\r\n\t\tcomponentType: ComponentTypeEnum;\r\n\t}>;\r\n\tcamera: Camera;\r\n\trendering: Rendering;\r\n\r\n\tconstructor(rendering: Rendering) {\r\n\t\tthis.camera = rendering.camera;\r\n\t\tthis.rendering = rendering;\r\n\r\n\t\tthis.systems = new Map<String, System>();\r\n\t\tthis.entityCounter = 0;\r\n\r\n\t\tthis.entities = new Array<Entity>();\r\n\t\tthis.entityAdditionQueue = new Array<Entity>();\r\n\t\tthis.entityDeletionQueue = new Array<number>();\r\n\t\tthis.componentAdditionQueue = new Array<{\r\n\t\t\tentity: Entity;\r\n\t\t\tcomponent: Component;\r\n\t\t}>();\r\n\t\tthis.componentRemovalQueue = new Array<{\r\n\t\t\tentity: Entity;\r\n\t\t\tcomponentType: ComponentTypeEnum;\r\n\t\t}>();\r\n\r\n\t\tthis.initializeSystems();\r\n\t}\r\n\r\n\tinitializeSystems() {\r\n\t\tthis.systems.set(\"COLLISION\", new CollisionSystem());\r\n\t\tthis.systems.set(\"MOVEMENT\", new MovementSystem());\r\n\t\tthis.systems.set(\"POSITIONMATRIXUPDATE\", new PositionMatrixUpdateSystem());\r\n\t\tthis.systems.set(\"GRAPHICS\", new GraphicsSystem());\r\n\t\tthis.systems.set(\"PARTICLE\", new ParticleSpawnerSystem());\r\n\t\tthis.systems.set(\r\n\t\t\t\"CAMERAFOCUS\",\r\n\t\t\tnew CameraFocusSystem(this.rendering.camera)\r\n\t\t);\r\n\t\tthis.systems.set(\"DELIVERY\", new DeliveryZoneSystem());\r\n\t}\r\n\r\n\tupdate(dt: number) {\r\n\t\t// Add new entities\r\n\t\tthis.addQueuedEntities();\r\n\r\n\t\t// For all entities, remove/add components\r\n\t\t// Remove/add entities from systems\r\n\t\tthis.addQueuedComponents();\r\n\t\tthis.removeComponents();\r\n\t\tthis.removeEntitiesMarkedForDeletion();\r\n\r\n\t\tthis.systems.get(\"MOVEMENT\").update(dt);\r\n\t\tthis.systems.get(\"POSITIONMATRIXUPDATE\").update(dt);\r\n\t\tthis.systems.get(\"GRAPHICS\").update(dt);\r\n\t\tthis.systems.get(\"COLLISION\").update(dt);\r\n\t\tthis.systems.get(\"DELIVERY\").update(dt);\r\n\t}\r\n\r\n\tupdateRenderingSystems(dt: number) {\r\n\t\tthis.systems.get(\"PARTICLE\").update(dt);\r\n\t\tthis.systems.get(\"CAMERAFOCUS\").update(dt);\r\n\t}\r\n\r\n\tcreateEntity(): Entity {\r\n\t\tconst length = this.entityAdditionQueue.push(\r\n\t\t\tnew Entity(this.entityCounter++)\r\n\t\t);\r\n\t\treturn this.entityAdditionQueue[length - 1];\r\n\t}\r\n\r\n\taddComponent(entity: Entity, component: Component) {\r\n\t\tthis.componentAdditionQueue.push({ entity, component });\r\n\t}\r\n\r\n\tremoveEntity(entityID: number) {\r\n\t\tthis.entityDeletionQueue.push(entityID);\r\n\t}\r\n\r\n\tremoveComponent(entity: Entity, componentType: ComponentTypeEnum) {\r\n\t\tthis.componentRemovalQueue.push({ entity, componentType });\r\n\t}\r\n\r\n\tgetEntity(entityID: number): Entity {\r\n\t\tfor (const entity of this.entities) {\r\n\t\t\tif (entity.id == entityID) {\r\n\t\t\t\treturn entity;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgetSystem(type: string): System {\r\n\t\treturn this.systems.get(type);\r\n\t}\r\n\r\n\t// Private\r\n\tprivate addQueuedEntities() {\r\n\t\tfor (const newEntity of this.entityAdditionQueue) {\r\n\t\t\t// Add to manager\r\n\t\t\tconst length = this.entities.push(newEntity);\r\n\r\n\t\t\t// Add to systems\r\n\t\t\tfor (let system of this.systems) {\r\n\t\t\t\tsystem[1].addEntity(this.entities[length - 1]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Empty queue\r\n\t\tthis.entityAdditionQueue.length = 0;\r\n\t}\r\n\r\n\tprivate addQueuedComponents() {\r\n\t\tfor (const compEntityPair of this.componentAdditionQueue) {\r\n\t\t\t// If enitity does not already have component, proceed\r\n\t\t\tif (compEntityPair.entity.addComponent(compEntityPair.component)) {\r\n\t\t\t\tfor (let system of this.systems) {\r\n\t\t\t\t\t// If entity is not already belonging to the system, try and add it\r\n\t\t\t\t\tif (!system[1].containsEntity(compEntityPair.entity.id)) {\r\n\t\t\t\t\t\tsystem[1].addEntity(compEntityPair.entity);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Empty queue\r\n\t\tthis.componentAdditionQueue.length = 0;\r\n\t}\r\n\r\n\tprivate removeEntitiesMarkedForDeletion() {\r\n\t\tfor (let i of this.entityDeletionQueue) {\r\n\t\t\t// Delete in systems\r\n\t\t\tfor (let system of this.systems) {\r\n\t\t\t\tsystem[1].removeEntity(i);\r\n\t\t\t}\r\n\r\n\t\t\t// Delete in manager\r\n\t\t\tlet index = this.entities.findIndex(\r\n\t\t\t\t(e) => e.id == this.entityDeletionQueue[i]\r\n\t\t\t);\r\n\t\t\tif (index != -1) {\r\n\t\t\t\tthis.entities.splice(index, 1);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Empty queue\r\n\t\tthis.entityDeletionQueue.length = 0;\r\n\t}\r\n\r\n\tprivate removeComponents() {\r\n\t\tfor (const compEntityPair of this.componentRemovalQueue) {\r\n\t\t\t// Remove component from entity\r\n\t\t\tcompEntityPair.entity.removeComponent(compEntityPair.componentType);\r\n\r\n\t\t\t// Remove entity from system if it no longer lives up to the requirements of being in the system\r\n\t\t\tfor (let system of this.systems) {\r\n\t\t\t\tsystem[1].removeFaultyEntity(compEntityPair.entity.id);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Empty queue\r\n\t\tthis.componentRemovalQueue.length = 0;\r\n\t}\r\n}\r\n","import Rendering from \"../Rendering/Rendering\";\r\nimport { Component, ComponentTypeEnum } from \"./Components/Component\";\r\n\r\nexport default class Entity {\r\n\tpublic readonly id: number;\r\n\tprivate name: string;\r\n\tprivate components: Array<Component>;\r\n\r\n\tconstructor(id: number) {\r\n\t\tthis.id = id;\r\n\t\tthis.components = new Array<Component>();\r\n\t}\r\n\r\n\taddComponent(component: Component): boolean {\r\n\t\tif (!this.hasComponent(component.type)) {\r\n\t\t\tthis.components.push(component);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\thasComponent(type: ComponentTypeEnum): boolean {\r\n\t\treturn this.components.some((c) => c.type == type);\r\n\t}\r\n\r\n\tremoveComponent(type: ComponentTypeEnum) {\r\n\t\tlet index = this.components.findIndex((c) => c.type == type);\r\n\t\tif (index != -1) {\r\n\t\t\tthis.components.splice(index, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tgetComponent(type: ComponentTypeEnum): Component {\r\n\t\treturn this.components.find((c) => c.type == type);\r\n\t}\r\n}\r\n","import System from \"./System\";\r\nimport { ComponentTypeEnum } from \"../Components/Component\";\r\nimport CameraFocusComponent from \"../Components/CameraFocusCompontent\";\r\nimport PositionComponent from \"../Components/PositionComponent\";\r\nimport Camera from \"../../Camera\";\r\nimport Vec3 from \"../../Maths/Vec3\";\r\nimport PositionParentComponent from \"../Components/PositionParentComponent\";\r\n\r\nexport default class CameraFocusSystem extends System {\r\n\tcamera: Camera;\r\n\r\n\tconstructor(camera: Camera) {\r\n\t\tsuper([ComponentTypeEnum.POSITION, ComponentTypeEnum.CAMERAFOCUS]);\r\n\t\tthis.camera = camera;\r\n\t}\r\n\r\n\tupdate(dt: number) {\r\n\t\tfor (const e of this.entities) {\r\n\t\t\tlet posComp = <PositionComponent>(\r\n\t\t\t\te.getComponent(ComponentTypeEnum.POSITIONPARENT)\r\n\t\t\t);\r\n\r\n\t\t\tif (!posComp) {\r\n\t\t\t\tposComp = <PositionComponent>e.getComponent(ComponentTypeEnum.POSITION);\r\n\t\t\t}\r\n\r\n\t\t\tlet camFocusComp = <CameraFocusComponent>(\r\n\t\t\t\te.getComponent(ComponentTypeEnum.CAMERAFOCUS)\r\n\t\t\t);\r\n\r\n\t\t\tlet camPos = new Vec3(posComp.position);\r\n\t\t\tcamPos.add(camFocusComp.offset);\r\n\r\n\t\t\tthis.camera.setPosition(camPos.x, camPos.y, camPos.z);\r\n\t\t\tthis.camera.setDir(\r\n\t\t\t\t-camFocusComp.offset.x,\r\n\t\t\t\t-camFocusComp.offset.y,\r\n\t\t\t\t-camFocusComp.offset.z\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n}\r\n","import System from \"./System\";\r\nimport { ComponentTypeEnum } from \"../Components/Component\";\r\nimport { IntersectionTester } from \"../../Physics/IntersectionTester\";\r\nimport MeshCollisionComponent from \"../Components/MeshCollisionComponent\";\r\nimport IntersectionInformation from \"../../Physics/IntersectionInformation\";\r\nimport MovementComponent from \"../Components/MovementComponent\";\r\nimport PositionComponent from \"../Components/PositionComponent\";\r\nimport Vec3 from \"../../Maths/Vec3\";\r\nimport { CollisionSolver } from \"../../Physics/CollisionSolver\";\r\nimport CollisionComponent from \"../Components/CollisionComponent\";\r\nimport BoundingBoxComponent from \"../Components/BoundingBoxComponent\";\r\nimport Shape from \"../../Physics/Shapes/Shape\";\r\n\r\nexport default class CollisionSystem extends System {\r\n\tconstructor() {\r\n\t\tsuper([\r\n\t\t\tComponentTypeEnum.COLLISION,\r\n\t\t\tComponentTypeEnum.BOUNDINGBOX,\r\n\t\t\tComponentTypeEnum.POSITION,\r\n\t\t]);\r\n\t\t// Optional MESHCOLLISION, MOVEMENT\r\n\t}\r\n\r\n\tupdate(dt: number) {\r\n\t\tlet information = new Array<IntersectionInformation>();\r\n\r\n\t\tfor (let e1 of this.entities) {\r\n\t\t\tlet e1CollisionComp = <CollisionComponent>(\r\n\t\t\t\te1.getComponent(ComponentTypeEnum.COLLISION)\r\n\t\t\t);\r\n\r\n\t\t\t// If this is static or immovable only other objects collisions with this matters\r\n\t\t\tif (e1CollisionComp.isStatic || e1CollisionComp.isImmovable) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tinformation.length = 0;\r\n\r\n\t\t\tlet e1BoundingBoxComp = <BoundingBoxComponent>(\r\n\t\t\t\te1.getComponent(ComponentTypeEnum.BOUNDINGBOX)\r\n\t\t\t);\r\n\r\n\t\t\t// This is not static, so the bounding box needs to be updated in case it moved\r\n\t\t\te1BoundingBoxComp.updateTransformMatrix();\r\n\r\n\t\t\tlet e1MeshCollisionComp = <MeshCollisionComponent>(\r\n\t\t\t\te1.getComponent(ComponentTypeEnum.MESHCOLLISION)\r\n\t\t\t);\r\n\t\t\tif (e1MeshCollisionComp) {\r\n\t\t\t\t// Update mesh collision component\r\n\t\t\t\te1MeshCollisionComp.octree.setModelMatrix();\r\n\t\t\t}\r\n\r\n\t\t\tfor (let e2 of this.entities) {\r\n\t\t\t\tif (e1.id == e2.id) {\r\n\t\t\t\t\t// Don't collide with self\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet e2BoundingBoxComp = <BoundingBoxComponent>(\r\n\t\t\t\t\te2.getComponent(ComponentTypeEnum.BOUNDINGBOX)\r\n\t\t\t\t);\r\n\r\n\t\t\t\tlet e2CollisionComp = <CollisionComponent>(\r\n\t\t\t\t\te2.getComponent(ComponentTypeEnum.COLLISION)\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif (!e2CollisionComp.isStatic) {\r\n\t\t\t\t\t// e2 is not static, so it can move, we need to update the bounding box\r\n\t\t\t\t\t// Update the e2 bounding box using saved matrix\r\n\t\t\t\t\te2BoundingBoxComp.updateTransformMatrix();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet e2MeshCollisionComp = <MeshCollisionComponent>(\r\n\t\t\t\t\te2.getComponent(ComponentTypeEnum.MESHCOLLISION)\r\n\t\t\t\t);\r\n\t\t\t\tif (e1MeshCollisionComp || e2MeshCollisionComp) {\r\n\t\t\t\t\t// At least one of the entities have mesh collision\r\n\t\t\t\t\t// Start by checking bounding boxes, but don't save information\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\tIntersectionTester.identifyIntersection(\r\n\t\t\t\t\t\t\t[e1BoundingBoxComp.boundingBox],\r\n\t\t\t\t\t\t\t[e2BoundingBoxComp.boundingBox]\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tlet e1ShapeArray = new Array<Shape>();\r\n\t\t\t\t\t\tlet e2ShapeArray = new Array<Shape>();\r\n\r\n\t\t\t\t\t\tif (e1MeshCollisionComp) {\r\n\t\t\t\t\t\t\t// Entity 1 has mesh collision, check e2 bb versus e1 mesh octree\r\n\t\t\t\t\t\t\te1MeshCollisionComp.octree.getShapesForCollision(\r\n\t\t\t\t\t\t\t\te2BoundingBoxComp.boundingBox,\r\n\t\t\t\t\t\t\t\te1ShapeArray\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t// Then update the shapes using their saved transform matrix\r\n\t\t\t\t\t\t\tfor (let shape of e1ShapeArray) {\r\n\t\t\t\t\t\t\t\tshape.setUpdateNeeded();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// Entity 1 does not have mesh collision, use the bounding box for intersection testing\r\n\t\t\t\t\t\t\te1ShapeArray.push(e1BoundingBoxComp.boundingBox);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (e2MeshCollisionComp) {\r\n\t\t\t\t\t\t\t// Entity 2 has mesh collision, check e1 bb versus e2 mesh octree\r\n\r\n\t\t\t\t\t\t\t// First update e2 octree\r\n\t\t\t\t\t\t\t// TODO: This has to be done every time right now since multiple instances of the same object share the same octree, but has different transforms. Can this be solved another way?\r\n\t\t\t\t\t\t\te2MeshCollisionComp.octree.setModelMatrix(\r\n\t\t\t\t\t\t\t\te2BoundingBoxComp.boundingBox.getTransformMatrix()\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t// Then get the shapes from the octree\r\n\t\t\t\t\t\t\te2MeshCollisionComp.octree.getShapesForCollision(\r\n\t\t\t\t\t\t\t\te1BoundingBoxComp.boundingBox,\r\n\t\t\t\t\t\t\t\te2ShapeArray\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\t// Then update the shapes using their saved transform matrix\r\n\t\t\t\t\t\t\tif (!e2CollisionComp.isStatic) {\r\n\t\t\t\t\t\t\t\tfor (let shape of e2ShapeArray) {\r\n\t\t\t\t\t\t\t\t\tshape.setUpdateNeeded();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// Entity 2 does not have mesh collision, use the bounding box for intersection testing\r\n\t\t\t\t\t\t\te2ShapeArray.push(e2BoundingBoxComp.boundingBox);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// We now have our updated shape arrays to intersection test, let's do it!\r\n\t\t\t\t\t\tIntersectionTester.identifyIntersectionInformation(\r\n\t\t\t\t\t\t\te1ShapeArray,\r\n\t\t\t\t\t\t\te2ShapeArray,\r\n\t\t\t\t\t\t\tinformation\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// None of the entities have mesh collision, do collision with bounding boxes, and save information\r\n\t\t\t\t\tIntersectionTester.identifyIntersectionInformation(\r\n\t\t\t\t\t\t[e1BoundingBoxComp.boundingBox],\r\n\t\t\t\t\t\t[e2BoundingBoxComp.boundingBox],\r\n\t\t\t\t\t\tinformation\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tlet movComp = <MovementComponent>(\r\n\t\t\t\te1.getComponent(ComponentTypeEnum.MOVEMENT)\r\n\t\t\t);\r\n\r\n\t\t\t// Update velocities\r\n\t\t\tif (movComp) {\r\n\t\t\t\tmovComp.onGround = false;\r\n\t\t\t\tfor (let inf of information) {\r\n\t\t\t\t\tlet axis = new Vec3(inf.axis);\r\n\t\t\t\t\t// let depth = inf.depth;\r\n\t\t\t\t\tif (inf.shapeB.getTransformedNormals().length == 1) {\r\n\t\t\t\t\t\taxis.deepAssign(inf.shapeB.getTransformedNormals()[0]);\r\n\t\t\t\t\t\t// depth = SAT.getOverlap(axis, inf.shapeA.getTransformedVertices(), inf.shapeB.getTransformedVertices(), {value: false}, 0);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet dotProd = movComp.velocity.dot(axis);\r\n\t\t\t\t\tif (dotProd < 0.0) {\r\n\t\t\t\t\t\tmovComp.velocity.subtract(new Vec3(axis).multiply(dotProd));\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (axis.y > 0.5) {\r\n\t\t\t\t\t\tmovComp.onGround = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Prioritize the parent position component if there is one\r\n\t\t\tlet posComp = <PositionComponent>(\r\n\t\t\t\te1.getComponent(ComponentTypeEnum.POSITIONPARENT)\r\n\t\t\t);\r\n\r\n\t\t\t// Otherwise move the position component\r\n\t\t\tif (!posComp) {\r\n\t\t\t\tposComp = <PositionComponent>(\r\n\t\t\t\t\te1.getComponent(ComponentTypeEnum.POSITION)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\tlet displacement = CollisionSolver.getTranslationNeeded(information);\r\n\t\t\tposComp.position.add(displacement);\r\n\t\t}\r\n\t}\r\n}\r\n","import System from \"./System\";\r\nimport GraphicsComponent from \"../Components/GraphicsComponent\";\r\nimport { ComponentTypeEnum } from \"../Components/Component\";\r\nimport PositionComponent from \"../Components/PositionComponent\";\r\nimport PointLightComponent from \"../Components/PointLightComponent\";\r\nimport PositionParentComponent from \"../Components/PositionParentComponent\";\r\n\r\nexport default class GraphicsSystem extends System {\r\n\tconstructor() {\r\n\t\tsuper([ComponentTypeEnum.POSITION]);\r\n\t\t// Optional ComponentTypeEnum.GRAPHICS, ComponentTypeEnum.POINTLIGHT, ComponentTypeEnun.POSITIONPARENT\r\n\t}\r\n\r\n\tupdate(dt: number) {\r\n\t\tfor (const e of this.entities) {\r\n\t\t\tlet posComp = <PositionComponent>(\r\n\t\t\t\te.getComponent(ComponentTypeEnum.POSITION)\r\n\t\t\t);\r\n\r\n\t\t\tlet graphComp = <GraphicsComponent>(\r\n\t\t\t\te.getComponent(ComponentTypeEnum.GRAPHICS)\r\n\t\t\t);\r\n\r\n\t\t\tlet posParentComp = <PositionParentComponent>(\r\n\t\t\t\te.getComponent(ComponentTypeEnum.POSITIONPARENT)\r\n\t\t\t);\r\n\r\n\t\t\tif (graphComp && posComp) {\r\n\t\t\t\tgraphComp.object.modelMatrix.setIdentity();\r\n\r\n\t\t\t\tif (posParentComp) {\r\n\t\t\t\t\tposParentComp.calculateMatrix(graphComp.object.modelMatrix);\r\n\t\t\t\t\tposParentComp.matrix.set(graphComp.object.modelMatrix);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tposComp.calculateMatrix(graphComp.object.modelMatrix);\r\n\t\t\t}\r\n\r\n\t\t\tlet pointLightComp = <PointLightComponent>(\r\n\t\t\t\te.getComponent(ComponentTypeEnum.POINTLIGHT)\r\n\t\t\t);\r\n\r\n\t\t\tif (pointLightComp && posComp) {\r\n\t\t\t\tpointLightComp.pointLight.position\r\n\t\t\t\t\t.deepAssign(posComp.position)\r\n\t\t\t\t\t.add(pointLightComp.posOffset);\r\n\r\n\t\t\t\tif (posParentComp) {\r\n\t\t\t\t\tpointLightComp.pointLight.position.add(posParentComp.position);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","import System from \"./System\";\r\nimport { ComponentTypeEnum } from \"../Components/Component\";\r\nimport PositionComponent from \"../Components/PositionComponent\";\r\nimport MovementComponent from \"../Components/MovementComponent\";\r\nimport Vec3 from \"../../Maths/Vec3\";\r\n\r\nexport default class MovementSystem extends System {\r\n\tconstructor() {\r\n\t\tsuper([ComponentTypeEnum.POSITION, ComponentTypeEnum.MOVEMENT]);\r\n\t}\r\n\r\n\tupdate(dt: number) {\r\n\t\tfor (const e of this.entities) {\r\n\t\t\tlet posComp = <PositionComponent>(\r\n\t\t\t\te.getComponent(ComponentTypeEnum.POSITIONPARENT)\r\n\t\t\t);\r\n\r\n\t\t\tif (posComp == undefined) {\r\n\t\t\t\tposComp = <PositionComponent>e.getComponent(ComponentTypeEnum.POSITION);\r\n\t\t\t}\r\n\t\t\tlet movComp = <MovementComponent>(\r\n\t\t\t\te.getComponent(ComponentTypeEnum.MOVEMENT)\r\n\t\t\t);\r\n\r\n\t\t\tlet oldVel = new Vec3(movComp.velocity);\r\n\r\n\t\t\t// Do movement calculations\r\n\t\t\tmovComp.velocity.add(\r\n\t\t\t\tnew Vec3(movComp.accelerationDirection).multiply(\r\n\t\t\t\t\tmovComp.acceleration * dt\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t\tmovComp.velocity.add(new Vec3(movComp.constantAcceleration).multiply(dt));\r\n\r\n\t\t\tmovComp.jumpAllowed = movComp.jumpAllowed || movComp.onGround;\r\n\r\n\t\t\tif (movComp.jumpAllowed && movComp.jumpRequested) {\r\n\t\t\t\tmovComp.velocity.y = movComp.jumpPower;\r\n\t\t\t\tmovComp.onGround = false;\r\n\t\t\t\tmovComp.jumpRequested = false;\r\n\t\t\t\tmovComp.jumpAllowed = false;\r\n\t\t\t}\r\n\r\n\t\t\t//Drag\r\n\t\t\tlet dragVec = new Vec3(movComp.velocity).multiply(-1.0);\r\n\t\t\tdragVec.y = 0.0;\r\n\t\t\tlet magnitude = dragVec.len();\r\n\t\t\tmovComp.velocity.add(\r\n\t\t\t\tdragVec.normalize().multiply(Math.min(movComp.drag * dt, magnitude))\r\n\t\t\t);\r\n\r\n\t\t\t//stop if velocity is too slow\r\n\t\t\tconst accelerating =\r\n\t\t\t\tmovComp.accelerationDirection.x != 0.0 ||\r\n\t\t\t\tmovComp.accelerationDirection.z != 0.0;\r\n\t\t\tif (!accelerating && movComp.velocity.length2() < 0.001) {\r\n\t\t\t\tmovComp.velocity.multiply(0.0);\r\n\t\t\t}\r\n\r\n\t\t\tlet displacement = new Vec3(movComp.velocity)\r\n\t\t\t\t.add(oldVel)\r\n\t\t\t\t.multiply(0.5 * dt);\r\n\r\n\t\t\tif (Math.abs(displacement.x) > 0.001) {\r\n\t\t\t\tposComp.position.x += displacement.x;\r\n\t\t\t}\r\n\r\n\t\t\tif (Math.abs(displacement.y) > 0.001) {\r\n\t\t\t\tposComp.position.y += displacement.y;\r\n\t\t\t}\r\n\r\n\t\t\tif (Math.abs(displacement.z) > 0.001) {\r\n\t\t\t\tposComp.position.z += displacement.z;\r\n\t\t\t}\r\n\r\n\t\t\tmovComp.accelerationDirection.multiply(0.0);\r\n\t\t}\r\n\t}\r\n}\r\n","import System from \"./System\";\r\nimport ParticleSpawnerComponent from \"../Components/ParticleSpawnerComponent\";\r\nimport { ComponentTypeEnum } from \"../Components/Component\";\r\nimport PositionComponent from \"../Components/PositionComponent\";\r\n\r\nexport default class ParticleSpawnerSystem extends System {\r\n\tconstructor() {\r\n\t\tsuper([ComponentTypeEnum.PARTICLESPAWNER, ComponentTypeEnum.POSITION]);\r\n\t}\r\n\r\n\tupdate(dt: number) {\r\n\t\tfor (const e of this.entities) {\r\n\t\t\tlet particleComp = <ParticleSpawnerComponent>(\r\n\t\t\t\te.getComponent(ComponentTypeEnum.PARTICLESPAWNER)\r\n\t\t\t);\r\n\t\t\tlet posComp = <PositionComponent>(\r\n\t\t\t\te.getComponent(ComponentTypeEnum.POSITION)\r\n\t\t\t);\r\n\r\n\t\t\tif (particleComp && posComp) {\r\n\t\t\t\tlet currentParticle = Math.floor(\r\n\t\t\t\t\t(particleComp.resetTimer / Math.max(particleComp.lifeTime, 0.00001)) *\r\n\t\t\t\t\t\tparticleComp.particleSpawner.getNumberOfParticles()\r\n\t\t\t\t);\r\n\t\t\t\tparticleComp.resetTimer += dt;\r\n\t\t\t\tlet endParticle = Math.floor(\r\n\t\t\t\t\t(particleComp.resetTimer / Math.max(particleComp.lifeTime, 0.00001)) *\r\n\t\t\t\t\t\tparticleComp.particleSpawner.getNumberOfParticles()\r\n\t\t\t\t);\r\n\t\t\t\tfor (\r\n\t\t\t\t\tcurrentParticle;\r\n\t\t\t\t\tcurrentParticle < endParticle;\r\n\t\t\t\t\tcurrentParticle++\r\n\t\t\t\t) {\r\n\t\t\t\t\tparticleComp.particleSpawner.resetParticleStartTime(\r\n\t\t\t\t\t\tcurrentParticle %\r\n\t\t\t\t\t\t\tparticleComp.particleSpawner.getNumberOfParticles()\r\n\t\t\t\t\t);\r\n\t\t\t\t\tparticleComp.particleSpawner.setParticleStartPosition(\r\n\t\t\t\t\t\tcurrentParticle %\r\n\t\t\t\t\t\t\tparticleComp.particleSpawner.getNumberOfParticles(),\r\n\t\t\t\t\t\tposComp.position\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\tif (particleComp.resetTimer > particleComp.lifeTime) {\r\n\t\t\t\t\tparticleComp.resetTimer -= particleComp.lifeTime;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","import System from \"./System\";\r\nimport { ComponentTypeEnum } from \"../Components/Component\";\r\nimport PositionComponent from \"../Components/PositionComponent\";\r\n\r\nexport default class PositionMatrixUpdateSystem extends System {\r\n\tconstructor() {\r\n\t\tsuper([ComponentTypeEnum.POSITION]);\r\n\t}\r\n\r\n\tupdate(dt: number) {\r\n\t\tfor (const e of this.entities) {\r\n\t\t\t// TODO: Add locic for position parent if that is ever needed. Or redo the whole position parent thing because it is not very nice to work with.\r\n\r\n\t\t\tlet posComp = <PositionComponent>(\r\n\t\t\t\te.getComponent(ComponentTypeEnum.POSITION)\r\n\t\t\t);\r\n\r\n\t\t\tposComp.matrix.setIdentity();\r\n\t\t\tposComp.calculateMatrix(posComp.matrix);\r\n\t\t}\r\n\t}\r\n}\r\n","import { ComponentTypeEnum } from \"../Components/Component\";\r\nimport Entity from \"../Entity\";\r\n\r\nexport default class System {\r\n\tprotected entities: Array<Entity>;\r\n\tprotected requiredComponents: Array<ComponentTypeEnum>;\r\n\r\n\tconstructor(componentTypes: Array<ComponentTypeEnum>) {\r\n\t\tthis.requiredComponents = componentTypes;\r\n\t\tthis.entities = new Array<Entity>();\r\n\t}\r\n\r\n\tentityHasCorrectComponents(entity: Entity): boolean {\r\n\t\tfor (const type of this.requiredComponents) {\r\n\t\t\tif (!entity.hasComponent(type)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\taddEntity(entity: Entity): boolean {\r\n\t\tif (this.entityHasCorrectComponents(entity)) {\r\n\t\t\tthis.entities.push(entity);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tcontainsEntity(entityId: number) {\r\n\t\treturn this.entities.some((c) => c.id == entityId);\r\n\t}\r\n\r\n\tremoveFaultyEntity(entityId: number) {\r\n\t\tconst index = this.entities.findIndex((c) => c.id == entityId);\r\n\t\tif (index != -1) {\r\n\t\t\tif (!this.entityHasCorrectComponents(this.entities[index])) {\r\n\t\t\t\tthis.entities.splice(index, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tremoveEntity(entityId: number) {\r\n\t\tconst index = this.entities.findIndex((c) => c.id == entityId);\r\n\t\tif (index != -1) {\r\n\t\t\tthis.entities.splice(index, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tupdate(dt: number) {\r\n\t\t// Pure virtual possible?\r\n\t}\r\n}\r\n","import { gl } from \"../main\";\r\nimport Texture from \"./Textures/Texture\";\r\n\r\nexport default class Framebuffer {\r\n\t// Public\r\n\ttextures: Array<Texture>;\r\n\tdepthTexture: Texture;\r\n\r\n\t// Private\r\n\tprotected rbo: WebGLRenderbuffer;\r\n\tprotected fbo: WebGLFramebuffer;\r\n\tprotected width: number;\r\n\tprotected height: number;\r\n\r\n\t/**\r\n\t *\r\n\t * @param width - width of framebuffer textures\r\n\t * @param height - height of framebuffer textures\r\n\t * @param textures - colour attachment textures, send empty array if no colour attachments should be used\r\n\t * @param depthTexture - depth attachment texture, send null if no depth attachment (an rbo will be created instead)\r\n\t */\r\n\tconstructor(\r\n\t\twidth: number,\r\n\t\theight: number,\r\n\t\ttextures: Array<Texture>,\r\n\t\tdepthTexture: Texture\r\n\t) {\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\r\n\t\tthis.textures = textures;\r\n\t\tthis.depthTexture = depthTexture;\r\n\r\n\t\tthis.fbo = gl.createFramebuffer();\r\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.fbo);\r\n\r\n\t\tthis.setupAttachments();\r\n\r\n\t\tif (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {\r\n\t\t\tconsole.warn(\"ERROR::FRAMEBUFFER:: Framebuffer is not complete!\");\r\n\t\t}\r\n\r\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\t}\r\n\r\n\tprotected setupAttachments() {\r\n\t\tlet attachments = new Array<any>();\r\n\t\tfor (let i = 0; i < this.textures.length; i++) {\r\n\t\t\tthis.textures[i].setTextureData(null, this.width, this.height);\r\n\t\t\tthis.textures[i].setTexParameterI(gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n\t\t\tthis.textures[i].setTexParameterI(gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n\t\t\tthis.textures[i].setTexParameterI(gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n\t\t\tthis.textures[i].setTexParameterI(gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\t\t\tgl.framebufferTexture2D(\r\n\t\t\t\tgl.FRAMEBUFFER,\r\n\t\t\t\tgl.COLOR_ATTACHMENT0 + i,\r\n\t\t\t\tgl.TEXTURE_2D,\r\n\t\t\t\tthis.textures[i].texture,\r\n\t\t\t\t0\r\n\t\t\t);\r\n\t\t\tattachments.push(gl.COLOR_ATTACHMENT0 + i);\r\n\t\t}\r\n\r\n\t\tgl.drawBuffers(attachments);\r\n\r\n\t\t// More choices here would be good, not only texture or renderbuffer\r\n\t\tif (this.depthTexture != undefined) {\r\n\t\t\tthis.depthTexture.setTextureData(null, this.width, this.height);\r\n\r\n\t\t\tgl.framebufferTexture2D(\r\n\t\t\t\tgl.FRAMEBUFFER,\r\n\t\t\t\tgl.DEPTH_ATTACHMENT,\r\n\t\t\t\tgl.TEXTURE_2D,\r\n\t\t\t\tthis.depthTexture.texture,\r\n\t\t\t\t0\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tthis.rbo = gl.createRenderbuffer();\r\n\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, this.rbo);\r\n\t\t\tgl.renderbufferStorage(\r\n\t\t\t\tgl.RENDERBUFFER,\r\n\t\t\t\tgl.DEPTH_STENCIL,\r\n\t\t\t\tthis.width,\r\n\t\t\t\tthis.height\r\n\t\t\t);\r\n\r\n\t\t\tgl.framebufferRenderbuffer(\r\n\t\t\t\tgl.FRAMEBUFFER,\r\n\t\t\t\tgl.DEPTH_STENCIL_ATTACHMENT,\r\n\t\t\t\tgl.RENDERBUFFER,\r\n\t\t\t\tthis.rbo\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tsetProportions(width: number, height: number) {\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t\tfor (let texture of this.textures) {\r\n\t\t\ttexture.setTextureData(null, this.width, this.height);\r\n\t\t}\r\n\t\tif (this.depthTexture) {\r\n\t\t\tthis.depthTexture.setTextureData(null, this.width, this.height);\r\n\t\t}\r\n\r\n\t\tif (this.rbo) {\r\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.fbo);\r\n\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, this.rbo);\r\n\t\t\tgl.renderbufferStorage(\r\n\t\t\t\tgl.RENDERBUFFER,\r\n\t\t\t\tgl.DEPTH24_STENCIL8,\r\n\t\t\t\twidth,\r\n\t\t\t\theight\r\n\t\t\t);\r\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\t\t}\r\n\t}\r\n\r\n\tbind(target: number) {\r\n\t\tgl.bindFramebuffer(target, this.fbo);\r\n\t}\r\n}\r\n","import Vec2 from \"../Maths/Vec2\";\r\nimport GuiObject from \"./GuiObject\";\r\n\r\nexport default class Button extends GuiObject {\r\n\tposition: Vec2;\r\n\ttextSize: number;\r\n\r\n\tprivate inputNode: HTMLInputElement;\r\n\r\n\tconstructor() {\r\n\t\tsuper(\"floating-div\");\r\n\t\tthis.position = new Vec2();\r\n\t\tthis.textSize = 42;\r\n\r\n\t\t// make an input node and a label node\r\n\t\tthis.inputNode = document.createElement(\"input\");\r\n\t\tthis.inputNode.type = \"button\";\r\n\t\tthis.inputNode.className = \"button\";\r\n\r\n\t\tthis.div.appendChild(this.inputNode);\r\n\t}\r\n\r\n\tgetElement(): HTMLDivElement {\r\n\t\treturn this.div;\r\n\t}\r\n\r\n\tgetInputElement(): HTMLInputElement {\r\n\t\treturn this.inputNode;\r\n\t}\r\n\r\n\tonClick(fn: any) {\r\n\t\tthis.inputNode.addEventListener(\"click\", fn);\r\n\t}\r\n\r\n\tdraw() {\r\n\t\tthis.position2D = this.position;\r\n\t\tthis.inputNode.value = this.textString;\r\n\t\tthis.fontSize = this.textSize;\r\n\r\n\t\tthis.drawObject();\r\n\t}\r\n}\r\n","import Vec2 from \"../Maths/Vec2\";\r\nimport GuiObject from \"./GuiObject\";\r\n\r\nexport default class Checkbox extends GuiObject {\r\n\tposition: Vec2;\r\n\ttextSize: number;\r\n\r\n\tprivate inputNode: HTMLInputElement;\r\n\tprivate label: HTMLLabelElement;\r\n\r\n\tconstructor() {\r\n\t\tsuper(\"floating-div\");\r\n\t\tthis.position = new Vec2();\r\n\t\tthis.textSize = 42;\r\n\r\n\t\t// make an input node and a label node\r\n\t\tthis.inputNode = document.createElement(\"input\");\r\n\t\tthis.inputNode.type = \"checkbox\";\r\n\r\n\t\tthis.label = document.createElement(\"label\");\r\n\t\tthis.label.textContent = this.textString;\r\n\r\n\t\tthis.div.appendChild(this.label);\r\n\t\tthis.div.appendChild(this.inputNode);\r\n\t}\r\n\r\n\tgetElement(): HTMLDivElement {\r\n\t\treturn this.div;\r\n\t}\r\n\r\n\tgetInputElement(): HTMLInputElement {\r\n\t\treturn this.inputNode;\r\n\t}\r\n\r\n\tgetChecked(): boolean {\r\n\t\treturn this.inputNode.checked;\r\n\t}\r\n\r\n\tdraw() {\r\n\t\tthis.position2D = this.position;\r\n\t\tthis.fontSize = this.textSize;\r\n\t\tthis.label.textContent = this.textString;\r\n\t\tthis.drawObject();\r\n\t}\r\n}\r\n","import { windowInfo } from \"../../main\";\r\nimport Vec2 from \"../Maths/Vec2\";\r\n\r\nexport default class GuiObject {\r\n\tprotected position2D: Vec2;\r\n\tprotected fontSize: number;\r\n\tscaleWithWindow: boolean;\r\n\ttextString: string;\r\n\tcenter: boolean;\r\n\r\n\tremoved: boolean;\r\n\r\n\tprivate divContainerElement: HTMLElement;\r\n\tprotected div: HTMLDivElement;\r\n\r\n\tconstructor(cssClass: string) {\r\n\t\tthis.removed = false;\r\n\t\tthis.position2D = new Vec2();\r\n\t\tthis.fontSize = 42;\r\n\t\tthis.scaleWithWindow = true;\r\n\t\tthis.textString = \"\";\r\n\t\tthis.center = false;\r\n\r\n\t\t// look up the guicontainer\r\n\t\tthis.divContainerElement = <HTMLElement>(\r\n\t\t\tdocument.getElementById(\"guicontainer\")\r\n\t\t);\r\n\r\n\t\t// make the div\r\n\t\tthis.div = document.createElement(\"div\");\r\n\r\n\t\t// assign it a CSS class\r\n\t\tthis.div.className = cssClass;\r\n\r\n\t\t// add it to the divcontainer\r\n\t\tthis.divContainerElement.appendChild(this.div);\r\n\t}\r\n\r\n\tgetElement(): HTMLDivElement {\r\n\t\treturn this.div;\r\n\t}\r\n\r\n\tsetHidden(hidden: boolean) {\r\n\t\tthis.div.hidden = hidden;\r\n\t}\r\n\r\n\tremove() {\r\n\t\tthis.div.remove();\r\n\t\tthis.removed = true;\r\n\t}\r\n\r\n\tprotected drawObject() {\r\n\t\tthis.div.style.left = this.position2D.x * 100 + \"%\";\r\n\t\tthis.div.style.top = this.position2D.y * 100 + \"%\";\r\n\t\tif (this.scaleWithWindow) {\r\n\t\t\tthis.div.style.fontSize =\r\n\t\t\t\tthis.fontSize * (windowInfo.resolutionHeight / 1080.0) + \"px\";\r\n\t\t} else {\r\n\t\t\tthis.div.style.fontSize = this.fontSize + \"px\";\r\n\t\t}\r\n\r\n\t\tif (this.center) {\r\n\t\t\tthis.div.style.transform = \"translate(-50%,-50%)\";\r\n\t\t}\r\n\t}\r\n\r\n\tdraw() {}\r\n}\r\n","import GuiObject from \"./GuiObject\";\r\nimport Vec2 from \"../Maths/Vec2\";\r\n\r\nexport default class Progress extends GuiObject {\r\n\tposition: Vec2;\r\n\tsize: number;\r\n\r\n\tprivate progressNode: HTMLProgressElement;\r\n\r\n\tconstructor() {\r\n\t\tsuper(\"floating-div\");\r\n\r\n\t\tthis.position = new Vec2();\r\n\t\tthis.size = 42;\r\n\r\n\t\t// make a text node for its content\r\n\t\tthis.progressNode = document.createElement(\"progress\");\r\n\t\tthis.div.appendChild(this.progressNode);\r\n\t}\r\n\r\n\tgetProgressElement(): HTMLProgressElement {\r\n\t\treturn this.progressNode;\r\n\t}\r\n\r\n\tdraw(): void {\r\n\t\tthis.position2D = this.position;\r\n\t\tthis.fontSize = this.size;\r\n\t\tthis.progressNode.textContent = this.textString;\r\n\t\tthis.drawObject();\r\n\t}\r\n}\r\n","import Vec2 from \"../Maths/Vec2\";\r\nimport GuiObject from \"./GuiObject\";\r\n\r\nexport default class Slider extends GuiObject {\r\n\tposition: Vec2;\r\n\ttextSize: number;\r\n\r\n\tprivate inputNode: HTMLInputElement;\r\n\tprivate label: HTMLLabelElement;\r\n\r\n\tconstructor() {\r\n\t\tsuper(\"floating-div\");\r\n\t\tthis.position = new Vec2();\r\n\t\tthis.textSize = 42;\r\n\r\n\t\t// make an input node and a label node\r\n\t\tthis.inputNode = document.createElement(\"input\");\r\n\t\tthis.inputNode.type = \"range\";\r\n\r\n\t\tthis.label = document.createElement(\"label\");\r\n\t\tthis.label.textContent = this.textString;\r\n\r\n\t\tthis.div.appendChild(this.label);\r\n\t\tthis.div.appendChild(this.inputNode);\r\n\t}\r\n\r\n\tgetElement(): HTMLDivElement {\r\n\t\treturn this.div;\r\n\t}\r\n\r\n\tgetInputElement(): HTMLInputElement {\r\n\t\treturn this.inputNode;\r\n\t}\r\n\r\n\tgetValue(): number {\r\n\t\treturn Number(this.inputNode.value);\r\n\t}\r\n\r\n\tdraw() {\r\n\t\tthis.position2D = this.position;\r\n\t\tthis.fontSize = this.textSize;\r\n\t\tthis.label.textContent = this.textString;\r\n\t\tthis.drawObject();\r\n\t}\r\n}\r\n","import Vec2 from \"../../Maths/Vec2\";\r\nimport Vec3 from \"../../Maths/Vec3\";\r\nimport GuiObject from \"../GuiObject\";\r\n\r\nexport default class TextObject2D extends GuiObject {\r\n\tposition: Vec2;\r\n\tsize: number;\r\n\r\n\tprivate textNode: Text;\r\n\r\n\tconstructor() {\r\n\t\tsuper(\"floating-div\");\r\n\r\n\t\tthis.position = new Vec2();\r\n\t\tthis.size = 42;\r\n\r\n\t\t// make a text node for its content\r\n\t\tthis.textNode = document.createTextNode(\"\");\r\n\t\tthis.div.appendChild(this.textNode);\r\n\t}\r\n\r\n\tdraw(): void {\r\n\t\tthis.position2D = this.position;\r\n\t\tthis.fontSize = this.size;\r\n\t\tthis.textNode.textContent = this.textString;\r\n\t\tthis.drawObject();\r\n\t}\r\n}\r\n","import Vec3 from \"../../Maths/Vec3\";\r\nimport GuiObject from \"../GuiObject\";\r\n\r\nexport default class TextObject3D extends GuiObject {\r\n\tposition: Vec3;\r\n\tsize: number;\r\n\tscaleFontWithDistance: boolean;\r\n\r\n\tprivate textNode: Text;\r\n\r\n\tconstructor() {\r\n\t\tsuper(\"floating-div\");\r\n\r\n\t\tthis.position = new Vec3();\r\n\t\tthis.size = 42;\r\n\t\tthis.scaleFontWithDistance = true;\r\n\r\n\t\t// make a text node for its content\r\n\t\tthis.textNode = document.createTextNode(\"\");\r\n\t\tthis.div.appendChild(this.textNode);\r\n\t}\r\n\r\n\tdraw3D(viewProj: Matrix4): void {\r\n\t\tlet pos = new Vector4([\r\n\t\t\tthis.position.x,\r\n\t\t\tthis.position.y,\r\n\t\t\tthis.position.z,\r\n\t\t\t1.0,\r\n\t\t]);\r\n\t\tlet screenCoords = viewProj.multiplyVector4(pos);\r\n\t\tscreenCoords.elements[0] =\r\n\t\t\t(screenCoords.elements[0] / screenCoords.elements[3] + 1.0) / 2.0;\r\n\t\tscreenCoords.elements[1] =\r\n\t\t\t1.0 - (screenCoords.elements[1] / screenCoords.elements[3] + 1.0) / 2.0;\r\n\r\n\t\tif (screenCoords.elements[2] > 0.0) {\r\n\t\t\tthis.position2D.x = screenCoords.elements[0];\r\n\t\t\tthis.position2D.y = screenCoords.elements[1];\r\n\r\n\t\t\tlet size = this.size;\r\n\t\t\tif (this.scaleFontWithDistance) {\r\n\t\t\t\tsize = this.size / screenCoords.elements[2];\r\n\t\t\t}\r\n\t\t\tthis.fontSize = size;\r\n\r\n\t\t\tthis.div.hidden = false;\r\n\t\t\tthis.textNode.textContent = this.textString;\r\n\t\t\tthis.drawObject();\r\n\t\t} else {\r\n\t\t\tthis.div.hidden = true;\r\n\t\t}\r\n\t}\r\n}\r\n","import { windowInfo } from \"../../main\";\r\nimport TextObject2D from \"../GUI/Text/TextObject2D\";\r\nimport Vec2 from \"../Maths/Vec2\";\r\n\r\nexport default class Input {\r\n\tkeys: boolean[];\r\n\tbuttons: Map<string, boolean>;\r\n\tgamepads: Gamepad[];\r\n\tmousePosition: { x: number; y: number; previousX: number; previousY: number };\r\n\tmousePositionOnCanvas: {\r\n\t\tx: number;\r\n\t\ty: number;\r\n\t\tpreviousX: number;\r\n\t\tpreviousY: number;\r\n\t};\r\n\tmouseClicked: boolean;\r\n\r\n\tsimulateTouchBasedOnMouse: boolean;\r\n\r\n\ttouchUsed: boolean;\r\n\tjoystickLeftDirection: Vec2;\r\n\tjoystickRightDirection: Vec2;\r\n\trepositionTouchControls: boolean;\r\n\tprivate joystickLeftRadius: number;\r\n\tprivate joystickRightRadius: number;\r\n\tprivate screenAspectRatio: number;\r\n\r\n\tprivate joystickLeftCenter: TextObject2D;\r\n\tprivate joystickLeftBorder: TextObject2D;\r\n\tprivate joystickRightCenter: TextObject2D;\r\n\tprivate joystickRightBorder: TextObject2D;\r\n\r\n\tprivate buttonRadius: number;\r\n\tprivate aButton: TextObject2D;\r\n\tprivate bButton: TextObject2D;\r\n\r\n\tprivate mouseMovementSinceLast: Vec2;\r\n\r\n\tconstructor() {\r\n\t\tthis.keys = [];\r\n\t\tthis.buttons = new Map();\r\n\t\tthis.gamepads = new Array<Gamepad>();\r\n\t\tthis.mousePosition = { x: 0, y: 0, previousX: 0, previousY: 0 };\r\n\t\tthis.mousePositionOnCanvas = { x: 0, y: 0, previousX: 0, previousY: 0 };\r\n\t\tthis.mouseClicked = false;\r\n\r\n\t\tthis.mouseMovementSinceLast = new Vec2();\r\n\r\n\t\tthis.simulateTouchBasedOnMouse = false;\r\n\r\n\t\tthis.touchUsed = false;\r\n\r\n\t\t//----Controls----\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values <-- for key codes\r\n\t\tlet self = this;\r\n\t\tdocument.addEventListener(\"keydown\", function (event) {\r\n\t\t\tself.keys[event.key.toUpperCase()] = true;\r\n\t\t\tself.touchUsed = false;\r\n\t\t});\r\n\r\n\t\tdocument.addEventListener(\"keyup\", function (event) {\r\n\t\t\tself.keys[event.key.toUpperCase()] = false;\r\n\t\t\tself.touchUsed = false;\r\n\t\t});\r\n\r\n\t\tdocument.addEventListener(\"mousemove\", function (event) {\r\n\t\t\tself.mouseMovementSinceLast.x += event.movementX;\r\n\t\t\tself.mouseMovementSinceLast.y += event.movementY;\r\n\t\t\tself.mousePosition = {\r\n\t\t\t\tx: event.clientX,\r\n\t\t\t\ty: event.clientY,\r\n\t\t\t\tpreviousX: self.mousePosition.x,\r\n\t\t\t\tpreviousY: self.mousePosition.y,\r\n\t\t\t};\r\n\t\t\tself.mousePositionOnCanvas = {\r\n\t\t\t\tx: self.mousePosition.x - windowInfo.paddingX,\r\n\t\t\t\ty: self.mousePosition.y - windowInfo.paddingY,\r\n\t\t\t\tpreviousX: self.mousePositionOnCanvas.x,\r\n\t\t\t\tpreviousY: self.mousePositionOnCanvas.y,\r\n\t\t\t};\r\n\t\t\tif (self.simulateTouchBasedOnMouse && self.mouseClicked) {\r\n\t\t\t\tself.handleTouch([event]);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tdocument.addEventListener(\"mousedown\", (event) => {\r\n\t\t\tself.mouseClicked = true;\r\n\t\t\tif (self.simulateTouchBasedOnMouse) {\r\n\t\t\t\tself.handleTouch([event]);\r\n\t\t\t}\r\n\t\t});\r\n\t\tdocument.addEventListener(\"mouseup\", (event) => {\r\n\t\t\tself.mouseClicked = false;\r\n\t\t\tif (self.simulateTouchBasedOnMouse) {\r\n\t\t\t\tself.handleTouch([]);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tdocument.addEventListener(\"touchstart\", function (event) {\r\n\t\t\tself.handleTouch(event.touches);\r\n\t\t});\r\n\t\tdocument.addEventListener(\"touchmove\", function (event) {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tself.handleTouch(event.touches);\r\n\t\t});\r\n\t\tdocument.addEventListener(\"touchend\", function (event) {\r\n\t\t\tself.handleTouch(event.touches);\r\n\t\t});\r\n\t\t//----------------\r\n\r\n\t\tthis.joystickLeftDirection = new Vec2();\r\n\t\tthis.joystickRightDirection = new Vec2();\r\n\t\tthis.repositionTouchControls = false;\r\n\t\tthis.joystickLeftRadius = 0.1; // 10 % of the width\r\n\t\tthis.joystickRightRadius = 0.1; // 10 % of the width\r\n\t\tthis.screenAspectRatio = 16 / 9;\r\n\r\n\t\tthis.joystickLeftBorder = new TextObject2D();\r\n\t\tthis.joystickLeftBorder.center = true;\r\n\t\tthis.joystickLeftBorder.scaleWithWindow = true;\r\n\t\tthis.joystickLeftBorder.position = new Vec2([0.15, 0.8]);\r\n\t\tthis.joystickLeftBorder.size = 1920 * this.joystickLeftRadius * 2.0;\r\n\t\tthis.joystickLeftBorder.textString = \"⊕\";\r\n\t\tthis.joystickLeftBorder.getElement().style.opacity = \"50%\";\r\n\t\tthis.joystickLeftBorder.setHidden(true);\r\n\r\n\t\tthis.joystickLeftCenter = new TextObject2D();\r\n\t\tthis.joystickLeftCenter.center = true;\r\n\t\tthis.joystickLeftCenter.scaleWithWindow = true;\r\n\t\tthis.joystickLeftCenter.position = new Vec2(\r\n\t\t\tthis.joystickLeftBorder.position\r\n\t\t);\r\n\t\tthis.joystickLeftCenter.size = 1920 * this.joystickLeftRadius;\r\n\t\tthis.joystickLeftCenter.textString = \"⚫\";\r\n\t\tthis.joystickLeftCenter.getElement().style.opacity = \"50%\";\r\n\t\tthis.joystickLeftCenter.getElement().style.color = \"red\";\r\n\t\tthis.joystickLeftCenter.setHidden(true);\r\n\r\n\t\tthis.joystickRightBorder = new TextObject2D();\r\n\t\tthis.joystickRightBorder.center = true;\r\n\t\tthis.joystickRightBorder.scaleWithWindow = true;\r\n\t\tthis.joystickRightBorder.position = new Vec2([0.85, 0.8]);\r\n\t\tthis.joystickRightBorder.size = 1920 * this.joystickRightRadius * 2.0;\r\n\t\tthis.joystickRightBorder.textString = \"⊕\";\r\n\t\tthis.joystickRightBorder.getElement().style.opacity = \"50%\";\r\n\t\tthis.joystickRightBorder.setHidden(true);\r\n\r\n\t\tthis.joystickRightCenter = new TextObject2D();\r\n\t\tthis.joystickRightCenter.center = true;\r\n\t\tthis.joystickRightCenter.scaleWithWindow = true;\r\n\t\tthis.joystickRightCenter.position = new Vec2(\r\n\t\t\tthis.joystickRightBorder.position\r\n\t\t);\r\n\t\tthis.joystickRightCenter.size = 1920 * this.joystickRightRadius;\r\n\t\tthis.joystickRightCenter.textString = \"⚫\";\r\n\t\tthis.joystickRightCenter.getElement().style.opacity = \"50%\";\r\n\t\tthis.joystickRightCenter.getElement().style.color = \"red\";\r\n\t\tthis.joystickRightCenter.setHidden(true);\r\n\r\n\t\tthis.buttonRadius = 0.05; // 5 % of the width\r\n\r\n\t\tthis.aButton = new TextObject2D();\r\n\t\tthis.aButton.center = true;\r\n\t\tthis.aButton.scaleWithWindow = true;\r\n\t\tthis.aButton.position.x = 0.65;\r\n\t\tthis.aButton.position.y = 0.8;\r\n\t\tthis.aButton.size = 1920 * this.buttonRadius * 2.0;\r\n\t\tthis.aButton.textString = \"🔴\";\r\n\t\tthis.aButton.getElement().style.opacity = \"50%\";\r\n\t\tthis.aButton.setHidden(true);\r\n\r\n\t\tthis.bButton = new TextObject2D();\r\n\t\tthis.bButton.center = true;\r\n\t\tthis.bButton.scaleWithWindow = true;\r\n\t\tthis.bButton.position.x = 0.75;\r\n\t\tthis.bButton.position.y = 0.55;\r\n\t\tthis.bButton.size = 1920 * this.buttonRadius * 2.0;\r\n\t\tthis.bButton.textString = \"🔵\";\r\n\t\tthis.bButton.getElement().style.opacity = \"50%\";\r\n\t\tthis.bButton.setHidden(true);\r\n\t}\r\n\r\n\thandleTouch(touches) {\r\n\t\tthis.touchUsed = true;\r\n\r\n\t\tlet joystickLeftBeingUsed =\r\n\t\t\tthis.joystickLeftDirection.x != 0.0 ||\r\n\t\t\tthis.joystickLeftDirection.y != 0.0;\r\n\r\n\t\tthis.joystickLeftDirection.x = 0.0;\r\n\t\tthis.joystickLeftDirection.y = 0.0;\r\n\r\n\t\tlet joystickRightBeingUsed =\r\n\t\t\tthis.joystickRightDirection.x != 0.0 ||\r\n\t\t\tthis.joystickRightDirection.y != 0.0;\r\n\r\n\t\tthis.joystickRightDirection.x = 0.0;\r\n\t\tthis.joystickRightDirection.y = 0.0;\r\n\r\n\t\tfor (const key of this.buttons.keys()) {\r\n\t\t\tthis.buttons.set(key, false);\r\n\t\t}\r\n\r\n\t\tvar paddingX = windowInfo.paddingX;\r\n\t\tvar paddingY = windowInfo.paddingY;\r\n\t\tlet width = windowInfo.resolutionWidth;\r\n\t\tlet height = windowInfo.resolutionHeight;\r\n\r\n\t\tlet joystickLeftRadiusInPixels = width * this.joystickLeftRadius;\r\n\t\tlet joystickLeftCenter = new Vec2([\r\n\t\t\tpaddingX + width * this.joystickLeftBorder.position.x,\r\n\t\t\tpaddingY + height * this.joystickLeftBorder.position.y,\r\n\t\t]); // In pixels\r\n\r\n\t\tlet joystickRightRadiusInPixels = width * this.joystickRightRadius;\r\n\t\tlet joystickRightCenter = new Vec2([\r\n\t\t\tpaddingX + width * this.joystickRightBorder.position.x,\r\n\t\t\tpaddingY + height * this.joystickRightBorder.position.y,\r\n\t\t]); // In pixels\r\n\r\n\t\tlet aButtonCenter = new Vec2([\r\n\t\t\tpaddingX + width * this.aButton.position.x,\r\n\t\t\tpaddingY + height * this.aButton.position.y,\r\n\t\t]); // In pixels\r\n\t\tlet bButtonCenter = new Vec2([\r\n\t\t\tpaddingX + width * this.bButton.position.x,\r\n\t\t\tpaddingY + height * this.bButton.position.y,\r\n\t\t]); // In pixels\r\n\r\n\t\tfor (let touch of touches) {\r\n\t\t\tlet touchPos = new Vec2([touch.clientX, touch.clientY]);\r\n\r\n\t\t\t// Handle touches not related to joystickLeft here, break if they are fulfilled\r\n\t\t\tif (\r\n\t\t\t\tnew Vec2(touchPos).subtract(aButtonCenter).len() <\r\n\t\t\t\tthis.buttonRadius * width\r\n\t\t\t) {\r\n\t\t\t\tif (this.repositionTouchControls) {\r\n\t\t\t\t\tthis.aButton.position.x = (touchPos.x - paddingX) / width;\r\n\t\t\t\t\tthis.aButton.position.y = (touchPos.y - paddingY) / height;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.buttons.set(\"A\", true);\r\n\t\t\t\t}\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tif (\r\n\t\t\t\tnew Vec2(touchPos).subtract(bButtonCenter).len() <\r\n\t\t\t\tthis.buttonRadius * width\r\n\t\t\t) {\r\n\t\t\t\tif (this.repositionTouchControls) {\r\n\t\t\t\t\tthis.bButton.position.x = (touchPos.x - paddingX) / width;\r\n\t\t\t\t\tthis.bButton.position.y = (touchPos.y - paddingY) / height;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.buttons.set(\"B\", true);\r\n\t\t\t\t}\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t// Handle joystickLeft\r\n\t\t\tlet joystickLeftDistanceFromCenter = new Vec2(touchPos).subtract(\r\n\t\t\t\tjoystickLeftCenter\r\n\t\t\t);\r\n\t\t\t// If the joystickLeft was being used already, allow movement on the left size of the screen, otherwise allow movement within the joystickLeft border\r\n\t\t\tif (\r\n\t\t\t\t(joystickLeftBeingUsed ||\r\n\t\t\t\t\tjoystickLeftDistanceFromCenter.len() < joystickLeftRadiusInPixels) &&\r\n\t\t\t\ttouchPos.x < paddingX + width * 0.5\r\n\t\t\t) {\r\n\t\t\t\tif (this.repositionTouchControls) {\r\n\t\t\t\t\tthis.joystickLeftBorder.position.x = (touchPos.x - paddingX) / width;\r\n\t\t\t\t\tthis.joystickLeftBorder.position.y = (touchPos.y - paddingY) / height;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.joystickLeftDirection.x =\r\n\t\t\t\t\t\tjoystickLeftDistanceFromCenter.x / joystickLeftRadiusInPixels;\r\n\t\t\t\t\tthis.joystickLeftDirection.y =\r\n\t\t\t\t\t\tjoystickLeftDistanceFromCenter.y / joystickLeftRadiusInPixels;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Handle joystickRight\r\n\t\t\tlet joystickRightDistanceFromCenter = new Vec2(touchPos).subtract(\r\n\t\t\t\tjoystickRightCenter\r\n\t\t\t);\r\n\t\t\t// If the joystickRight was being used already, allow movement on the left size of the screen, otherwise allow movement within the joystickRight border\r\n\t\t\tif (\r\n\t\t\t\t(joystickRightBeingUsed ||\r\n\t\t\t\t\tjoystickRightDistanceFromCenter.len() <\r\n\t\t\t\t\t\tjoystickRightRadiusInPixels) &&\r\n\t\t\t\ttouchPos.x > paddingX + width * 0.5\r\n\t\t\t) {\r\n\t\t\t\tif (this.repositionTouchControls) {\r\n\t\t\t\t\tthis.joystickRightBorder.position.x = (touchPos.x - paddingX) / width;\r\n\t\t\t\t\tthis.joystickRightBorder.position.y =\r\n\t\t\t\t\t\t(touchPos.y - paddingY) / height;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.joystickRightDirection.x =\r\n\t\t\t\t\t\tjoystickRightDistanceFromCenter.x / joystickRightRadiusInPixels;\r\n\t\t\t\t\tthis.joystickRightDirection.y =\r\n\t\t\t\t\t\tjoystickRightDistanceFromCenter.y / joystickRightRadiusInPixels;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tgetMouseMovement(): Vec2 {\r\n\t\tlet diff = new Vec2(this.mouseMovementSinceLast);\r\n\t\tthis.mouseMovementSinceLast.setValues(0.0, 0.0);\r\n\t\treturn diff;\r\n\t}\r\n\r\n\tupdateGamepad() {\r\n\t\tif (window.isSecureContext) {\r\n\t\t\tthis.gamepads = navigator.getGamepads();\r\n\r\n\t\t\tfor (const gp of this.gamepads) {\r\n\t\t\t\tif (!gp) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.touchUsed = false;\r\n\t\t\t\tif (Math.abs(gp.axes[0]) > 0.1) {\r\n\t\t\t\t\tthis.joystickLeftDirection.x = gp.axes[0];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.joystickLeftDirection.x = 0.0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (Math.abs(gp.axes[1]) > 0.1) {\r\n\t\t\t\t\tthis.joystickLeftDirection.y = gp.axes[1];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.joystickLeftDirection.y = 0.0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.touchUsed = false;\r\n\t\t\t\tif (Math.abs(gp.axes[2]) > 0.1) {\r\n\t\t\t\t\tthis.joystickRightDirection.x = gp.axes[2];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.joystickRightDirection.x = 0.0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (Math.abs(gp.axes[3]) > 0.1) {\r\n\t\t\t\t\tthis.joystickRightDirection.y = gp.axes[3];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.joystickRightDirection.y = 0.0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (const key of this.buttons.keys()) {\r\n\t\t\t\t\tthis.buttons.set(key, false);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (gp.buttons[0].value > 0.5) {\r\n\t\t\t\t\tthis.buttons.set(\"A\", true);\r\n\t\t\t\t\tconsole.log(\"Pressed A\");\r\n\t\t\t\t}\r\n\t\t\t\tif (gp.buttons[1].value > 0.5) {\r\n\t\t\t\t\tthis.buttons.set(\"B\", true);\r\n\t\t\t\t\tconsole.log(\"Pressed B\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tdrawTouchControls() {\r\n\t\tthis.joystickLeftBorder.setHidden(!this.touchUsed);\r\n\t\tthis.joystickLeftCenter.setHidden(!this.touchUsed);\r\n\t\tthis.joystickRightBorder.setHidden(!this.touchUsed);\r\n\t\tthis.joystickRightCenter.setHidden(!this.touchUsed);\r\n\t\tthis.aButton.setHidden(!this.touchUsed);\r\n\t\tthis.bButton.setHidden(!this.touchUsed);\r\n\t\tif (this.touchUsed) {\r\n\t\t\tthis.joystickLeftCenter.position.x =\r\n\t\t\t\tthis.joystickLeftBorder.position.x +\r\n\t\t\t\tthis.joystickLeftDirection.x * this.joystickLeftRadius;\r\n\t\t\tthis.joystickLeftCenter.position.y =\r\n\t\t\t\tthis.joystickLeftBorder.position.y +\r\n\t\t\t\tthis.joystickLeftDirection.y *\r\n\t\t\t\t\t(this.joystickLeftRadius * this.screenAspectRatio) -\r\n\t\t\t\t0.01;\r\n\t\t\tthis.joystickRightCenter.position.x =\r\n\t\t\t\tthis.joystickRightBorder.position.x +\r\n\t\t\t\tthis.joystickRightDirection.x * this.joystickRightRadius;\r\n\t\t\tthis.joystickRightCenter.position.y =\r\n\t\t\t\tthis.joystickRightBorder.position.y +\r\n\t\t\t\tthis.joystickRightDirection.y *\r\n\t\t\t\t\t(this.joystickRightRadius * this.screenAspectRatio) -\r\n\t\t\t\t0.01;\r\n\r\n\t\t\tthis.joystickLeftBorder.draw();\r\n\t\t\tthis.joystickLeftCenter.draw();\r\n\t\t\tthis.joystickRightBorder.draw();\r\n\t\t\tthis.joystickRightCenter.draw();\r\n\t\t\tthis.aButton.draw();\r\n\t\t\tthis.bButton.draw();\r\n\t\t}\r\n\t}\r\n}\r\n","import { gl } from \"../../main\";\r\nimport Vec3 from \"../Maths/Vec3\";\r\nimport ShaderProgram from \"../ShaderPrograms/ShaderProgram\";\r\n\r\nexport default class DirectionalLight {\r\n\tdirection: Vec3;\r\n\tcolour: Vec3;\r\n\tambientMultiplier: number;\r\n\r\n\tlightProjectionBoxSideLength: number;\r\n\r\n\tprivate gl: WebGL2RenderingContext;\r\n\tprivate shaderProgram: ShaderProgram;\r\n\r\n\tconstructor(gl: WebGL2RenderingContext, shaderProgram: ShaderProgram) {\r\n\t\tgl = gl;\r\n\t\tthis.shaderProgram = shaderProgram;\r\n\r\n\t\tthis.direction = new Vec3([0.0, -1.0, -0.5]);\r\n\t\tthis.colour = new Vec3([0.2, 0.2, 0.2]);\r\n\t\tthis.ambientMultiplier = 0.1;\r\n\t\tthis.lightProjectionBoxSideLength = 50.0;\r\n\t}\r\n\r\n\tbind() {\r\n\t\tgl.uniform3fv(\r\n\t\t\tthis.shaderProgram.getUniformLocation(\"directionalLight.direction\")[0],\r\n\t\t\tthis.direction.normalize()\r\n\t\t);\r\n\t\tgl.uniform3fv(\r\n\t\t\tthis.shaderProgram.getUniformLocation(\"directionalLight.colour\")[0],\r\n\t\t\tthis.colour\r\n\t\t);\r\n\t\tgl.uniform1f(\r\n\t\t\tthis.shaderProgram.getUniformLocation(\r\n\t\t\t\t\"directionalLight.ambientMultiplier\"\r\n\t\t\t)[0],\r\n\t\t\tthis.ambientMultiplier\r\n\t\t);\r\n\t}\r\n\r\n\tcalcAndSendLightSpaceMatrix(\r\n\t\tfocusPos: Vec3,\r\n\t\toffset: number,\r\n\t\tuniformLocation: WebGLUniformLocation\r\n\t) {\r\n\t\tlet cameraPos = new Vec3(focusPos);\r\n\t\tlet offsetVec = new Vec3(this.direction).normalize().multiply(offset);\r\n\t\tlet lightSpaceMatrix = new Matrix4(null).setOrtho(\r\n\t\t\t-this.lightProjectionBoxSideLength,\r\n\t\t\tthis.lightProjectionBoxSideLength,\r\n\t\t\t-this.lightProjectionBoxSideLength,\r\n\t\t\tthis.lightProjectionBoxSideLength,\r\n\t\t\t0.1,\r\n\t\t\toffset * 2.0\r\n\t\t); // Start by setting it to projection\r\n\t\tcameraPos.subtract(offsetVec);\r\n\t\tlet lightView = new Matrix4(null).setLookAt(\r\n\t\t\tcameraPos.x,\r\n\t\t\tcameraPos.y,\r\n\t\t\tcameraPos.z,\r\n\t\t\tfocusPos.x,\r\n\t\t\tfocusPos.y,\r\n\t\t\tfocusPos.z,\r\n\t\t\t0.0,\r\n\t\t\t1.0,\r\n\t\t\t0.0\r\n\t\t); // This will make it impossible to have exactly straight down shadows, but I'm fine with that\r\n\t\tlightSpaceMatrix = lightSpaceMatrix.concat(lightView); // Multiply with view\r\n\t\tgl.uniformMatrix4fv(uniformLocation, false, lightSpaceMatrix.elements);\r\n\t}\r\n}\r\n","import { gl } from \"../../main\";\r\nimport Vec3 from \"../Maths/Vec3\";\r\nimport ShaderProgram from \"../ShaderPrograms/ShaderProgram\";\r\n\r\nexport default class PointLight {\r\n\tposition: Vec3;\r\n\tcolour: Vec3;\r\n\r\n\tconstant: number;\r\n\tlinear: number;\r\n\tquadratic: number;\r\n\t// private radius: number; // TODO: implement light volumes\r\n\r\n\tprivate gl: WebGL2RenderingContext;\r\n\tprivate shaderProgram: ShaderProgram;\r\n\r\n\tconstructor(gl: WebGL2RenderingContext, shaderProgram: ShaderProgram) {\r\n\t\tgl = gl;\r\n\t\tthis.shaderProgram = shaderProgram;\r\n\r\n\t\tthis.position = new Vec3([0.0, 0.0, 0.0]);\r\n\t\tthis.colour = new Vec3([1.0, 1.0, 1.0]);\r\n\r\n\t\tthis.constant = 1.0;\r\n\t\tthis.linear = 0.07;\r\n\t\tthis.quadratic = 0.017;\r\n\t\t// this.radius = (-this.linear + Math.sqrt(this.linear * this.linear - 4.0 * this.quadratic * (this.constant - (256.0 / 5.0)))) / (2.0 * this.quadratic);\r\n\t}\r\n\r\n\tbind(lightIndex: number) {\r\n\t\tlet ul = this.shaderProgram.getUniformLocation(\r\n\t\t\t\"pointLights[\" + lightIndex + \"].position\"\r\n\t\t);\r\n\t\tif (ul[1]) {\r\n\t\t\tgl.uniform3fv(ul[0], this.position);\r\n\t\t}\r\n\t\tul = this.shaderProgram.getUniformLocation(\r\n\t\t\t\"pointLights[\" + lightIndex + \"].colour\"\r\n\t\t);\r\n\t\tif (ul[1]) {\r\n\t\t\tgl.uniform3fv(ul[0], this.colour);\r\n\t\t}\r\n\r\n\t\tul = this.shaderProgram.getUniformLocation(\r\n\t\t\t\"pointLights[\" + lightIndex + \"].constant\"\r\n\t\t);\r\n\t\tif (ul[1]) {\r\n\t\t\tgl.uniform1f(ul[0], this.constant);\r\n\t\t}\r\n\t\tul = this.shaderProgram.getUniformLocation(\r\n\t\t\t\"pointLights[\" + lightIndex + \"].linear\"\r\n\t\t);\r\n\t\tif (ul[1]) {\r\n\t\t\tgl.uniform1f(ul[0], this.linear);\r\n\t\t}\r\n\t\tul = this.shaderProgram.getUniformLocation(\r\n\t\t\t\"pointLights[\" + lightIndex + \"].quadratic\"\r\n\t\t);\r\n\t\tif (ul[1]) {\r\n\t\t\tgl.uniform1f(ul[0], this.quadratic);\r\n\t\t}\r\n\t}\r\n}\r\n","import Vec3 from \"./Vec3\";\r\n\r\nexport default class Matrix3 {\r\n\telements: Array<number>;\r\n\r\n\tconstructor() {\r\n\t\tthis.elements = new Array<number>();\r\n\r\n\t\tthis.elements.length = 9;\r\n\t\tthis.elements[0] = 1.0;\r\n\t\tthis.elements[3] = 0.0;\r\n\t\tthis.elements[6] = 0.0;\r\n\t\tthis.elements[1] = 0.0;\r\n\t\tthis.elements[4] = 1.0;\r\n\t\tthis.elements[7] = 0.0;\r\n\t\tthis.elements[2] = 0.0;\r\n\t\tthis.elements[5] = 0.0;\r\n\t\tthis.elements[8] = 1.0;\r\n\t}\r\n\r\n\tfromMatrix4(mat4: Matrix4): Matrix3 {\r\n\t\tthis.elements[0] = mat4.elements[0];\r\n\t\tthis.elements[3] = mat4.elements[4];\r\n\t\tthis.elements[6] = mat4.elements[8];\r\n\t\tthis.elements[1] = mat4.elements[1];\r\n\t\tthis.elements[4] = mat4.elements[5];\r\n\t\tthis.elements[7] = mat4.elements[9];\r\n\t\tthis.elements[2] = mat4.elements[2];\r\n\t\tthis.elements[5] = mat4.elements[6];\r\n\t\tthis.elements[8] = mat4.elements[10];\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\ttoMatrix4(): Matrix4 {\r\n\t\tlet retMat = new Matrix4(null);\r\n\r\n\t\tretMat.elements[0] = this.elements[0];\r\n\t\tretMat.elements[4] = this.elements[3];\r\n\t\tretMat.elements[8] = this.elements[6];\r\n\t\tretMat.elements[1] = this.elements[1];\r\n\t\tretMat.elements[5] = this.elements[4];\r\n\t\tretMat.elements[9] = this.elements[7];\r\n\t\tretMat.elements[2] = this.elements[2];\r\n\t\tretMat.elements[6] = this.elements[5];\r\n\t\tretMat.elements[10] = this.elements[8];\r\n\r\n\t\treturn retMat;\r\n\t}\r\n\r\n\tmultiplyVec3(vec: Vec3): Vec3 {\r\n\t\tlet e = this.elements;\r\n\t\tlet v = new Vec3();\r\n\r\n\t\tv.x = vec.x * e[0] + vec.y * e[3] + vec.z * e[6];\r\n\t\tv.y = vec.x * e[1] + vec.y * e[4] + vec.z * e[7];\r\n\t\tv.z = vec.x * e[2] + vec.y * e[5] + vec.z * e[8];\r\n\t\treturn v;\r\n\t}\r\n\r\n\ttranspose(): Matrix3 {\r\n\t\tlet e = this.elements;\r\n\t\tlet t: number;\r\n\r\n\t\tt = e[1];\r\n\t\te[1] = e[3];\r\n\t\te[3] = t;\r\n\t\tt = e[2];\r\n\t\te[2] = e[6];\r\n\t\te[6] = t;\r\n\t\tt = e[5];\r\n\t\te[5] = e[7];\r\n\t\te[7] = t;\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tdeterminant(): number {\r\n\t\tlet a =\r\n\t\t\tthis.elements[0] *\r\n\t\t\t(this.elements[4] * this.elements[8] -\r\n\t\t\t\tthis.elements[5] * this.elements[7]);\r\n\t\tlet b =\r\n\t\t\tthis.elements[4] *\r\n\t\t\t(this.elements[1] * this.elements[8] -\r\n\t\t\t\tthis.elements[2] * this.elements[7]);\r\n\t\tlet c =\r\n\t\t\tthis.elements[6] *\r\n\t\t\t(this.elements[1] * this.elements[5] -\r\n\t\t\t\tthis.elements[2] * this.elements[4]);\r\n\t\treturn a - b + c;\r\n\t}\r\n\r\n\tadj(): Matrix3 {\r\n\t\tlet temp = new Matrix3();\r\n\r\n\t\ttemp.elements[0] =\r\n\t\t\tthis.elements[4] * this.elements[8] - this.elements[5] * this.elements[7];\r\n\t\ttemp.elements[3] = -(\r\n\t\t\tthis.elements[3] * this.elements[8] -\r\n\t\t\tthis.elements[5] * this.elements[6]\r\n\t\t);\r\n\t\ttemp.elements[6] =\r\n\t\t\tthis.elements[3] * this.elements[8] - this.elements[5] * this.elements[6];\r\n\t\ttemp.elements[1] = -(\r\n\t\t\tthis.elements[1] * this.elements[8] -\r\n\t\t\tthis.elements[2] * this.elements[7]\r\n\t\t);\r\n\t\ttemp.elements[4] =\r\n\t\t\tthis.elements[0] * this.elements[8] - this.elements[2] * this.elements[6];\r\n\t\ttemp.elements[7] = -(\r\n\t\t\tthis.elements[0] * this.elements[5] -\r\n\t\t\tthis.elements[2] * this.elements[3]\r\n\t\t);\r\n\t\ttemp.elements[2] =\r\n\t\t\tthis.elements[3] * this.elements[7] - this.elements[4] * this.elements[6];\r\n\t\ttemp.elements[5] = -(\r\n\t\t\tthis.elements[0] * this.elements[6] -\r\n\t\t\tthis.elements[1] * this.elements[7]\r\n\t\t);\r\n\t\ttemp.elements[8] =\r\n\t\t\tthis.elements[0] * this.elements[4] - this.elements[1] * this.elements[3];\r\n\r\n\t\treturn temp;\r\n\t}\r\n\r\n\tinvert(): Matrix3 {\r\n\t\tlet determinant = this.determinant();\r\n\r\n\t\tif (determinant == 0.0) {\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\tlet adj = this.adj();\r\n\r\n\t\tfor (let i = 0; i < 9; i++) {\r\n\t\t\tthis.elements[i] = adj.elements[i] / determinant;\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n}\r\n","import { input } from \"../../Game/GameMachine\";\r\nimport { windowInfo } from \"../../main\";\r\nimport Camera from \"../Camera\";\r\nimport Ray from \"../Physics/Shapes/Ray\";\r\nimport Vec2 from \"./Vec2\";\r\nimport Vec3 from \"./Vec3\";\r\n\r\nexport module MousePicking {\r\n\texport function GetRay(camera: Camera): Ray {\r\n\t\tlet ndc = new Vec2([\r\n\t\t\tinput.mousePositionOnCanvas.x,\r\n\t\t\tinput.mousePositionOnCanvas.y,\r\n\t\t]);\r\n\t\tndc.x = (ndc.x / windowInfo.resolutionWidth - 0.5) * 2.0;\r\n\t\tndc.y = (ndc.y / windowInfo.resolutionHeight - 0.5) * -2.0;\r\n\r\n\t\tlet mouseRayClip = new Vector4([ndc.x, ndc.y, -1.0, 1.0]);\r\n\t\tlet mouseRayCamera = new Matrix4(camera.getProjectionMatrix())\r\n\t\t\t.invert()\r\n\t\t\t.multiplyVector4(mouseRayClip);\r\n\t\tmouseRayCamera.elements[2] = -1.0;\r\n\t\tmouseRayCamera.elements[3] = 0.0;\r\n\t\tlet mouseRayWorld4D = new Matrix4(camera.getViewMatrix())\r\n\t\t\t.invert()\r\n\t\t\t.multiplyVector4(mouseRayCamera);\r\n\t\tlet dir = new Vec3([\r\n\t\t\tmouseRayWorld4D.elements[0],\r\n\t\t\tmouseRayWorld4D.elements[1],\r\n\t\t\tmouseRayWorld4D.elements[2],\r\n\t\t]).normalize();\r\n\r\n\t\tlet ray = new Ray();\r\n\t\tray.setDir(dir);\r\n\t\tray.setStart(camera.getPosition());\r\n\r\n\t\treturn ray;\r\n\t}\r\n}\r\n","import Shape from \"../Physics/Shapes/Shape\";\r\nimport Triangle from \"../Physics/Shapes/Triangle\";\r\nimport Vec3 from \"./Vec3\";\r\n\r\nexport module SAT {\r\n\t/**\r\n\t * Finds how big of an overlap there is between two sets of points along a vector.\r\n\t * @param overlapVector The vector to test along.\r\n\t * @param shapeAVertices Points in set A\r\n\t * @param shapeBVertices Points in set B\r\n\t * @param reverse An object holding a variable \"value\" that is set to true if the vector should be flipped in order to have the vector point from dataset B towards dataset A.\r\n\t * Is set by this function.\r\n\t * @returns How big the overlap is, returns -1.0 if there is no overlap.\r\n\t */\r\n\texport function getOverlap(\r\n\t\toverlapVector: Vec3,\r\n\t\tshapeAVertices: Array<Vec3>,\r\n\t\tshapeBVertices: Array<Vec3>,\r\n\t\treverse: { value: boolean },\r\n\t\tmargin: number\r\n\t): number {\r\n\t\tlet maxA = overlapVector.dot(shapeAVertices[0]);\r\n\t\tlet minA = maxA;\r\n\t\tlet maxB = overlapVector.dot(shapeBVertices[0]);\r\n\t\tlet minB = maxB;\r\n\r\n\t\tlet tempDot = 0.0;\r\n\r\n\t\tfor (let i = 1; i < shapeAVertices.length; i++) {\r\n\t\t\ttempDot = overlapVector.dot(shapeAVertices[i]);\r\n\t\t\tif (tempDot < minA) {\r\n\t\t\t\tminA = tempDot;\r\n\t\t\t}\r\n\t\t\tif (tempDot > maxA) {\r\n\t\t\t\tmaxA = tempDot;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let i = 1; i < shapeBVertices.length; i++) {\r\n\t\t\ttempDot = overlapVector.dot(shapeBVertices[i]);\r\n\t\t\tif (tempDot < minB) {\r\n\t\t\t\tminB = tempDot;\r\n\t\t\t}\r\n\t\t\tif (tempDot > maxB) {\r\n\t\t\t\tmaxB = tempDot;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet overlap1 = maxB - minA;\r\n\t\tlet overlap2 = maxA - minB;\r\n\t\tif (overlap1 >= -margin && overlap2 >= -margin) {\r\n\t\t\tif (overlap1 > overlap2) {\r\n\t\t\t\treverse.value = true;\r\n\t\t\t\treturn overlap2;\r\n\t\t\t} else {\r\n\t\t\t\treverse.value = false;\r\n\t\t\t\treturn overlap1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn -1.0;\r\n\t}\r\n\r\n\t/**\r\n\t * Finds if two sets of vertices will overlap along an axis given their relative speed within the time frame (time input object).\r\n\t * Will alter the first collision time and last collision time in the times object\r\n\t * @param testVec The axis for overlap\r\n\t * @param shapeAVertices Vertices for shape A\r\n\t * @param shapeBVertices Vertices for shape B\r\n\t * @param relativeVelocity Relative velocity between the shapes\r\n\t * @param times Times object which contains - first, last, max. Max is how soon the overlap has to happen to count.\r\n\t * @returns If an overlap happens within the timeframe (times.max)\r\n\t */\r\n\texport function getContinousOverlap(\r\n\t\ttestVec: Vec3,\r\n\t\tshapeAVertices: Array<Vec3>,\r\n\t\tshapeBVertices: Array<Vec3>,\r\n\t\trelativeVelocity: Vec3,\r\n\t\ttimes: { first: number; last: number; max: number }\r\n\t): boolean {\r\n\t\tlet minA = Infinity,\r\n\t\t\tminB = Infinity;\r\n\t\tlet maxA = -Infinity,\r\n\t\t\tmaxB = -Infinity;\r\n\r\n\t\tlet tempDot = 0.0;\r\n\r\n\t\tfor (const vert of shapeAVertices) {\r\n\t\t\ttempDot = vert.dot(testVec);\r\n\r\n\t\t\tminA = Math.min(minA, tempDot);\r\n\t\t\tmaxA = Math.max(maxA, tempDot);\r\n\t\t}\r\n\r\n\t\tfor (const vert of shapeBVertices) {\r\n\t\t\ttempDot = vert.dot(testVec);\r\n\r\n\t\t\tminB = Math.min(minB, tempDot);\r\n\t\t\tmaxB = Math.max(maxB, tempDot);\r\n\t\t}\r\n\r\n\t\t//Following found here: https://www.geometrictools.com/Documentation/MethodOfSeparatingAxes.pdf\r\n\r\n\t\tlet T: number;\r\n\t\tlet speed = testVec.dot(relativeVelocity);\r\n\r\n\t\tif (maxB <= minA) {\r\n\t\t\tif (speed <= 0.0) {\r\n\t\t\t\t// Interval (B) initially on ‘left’ of interval (A)\r\n\t\t\t\treturn false; // Intervals moving apart\r\n\t\t\t}\r\n\r\n\t\t\tT = (minA - maxB) / speed;\r\n\t\t\tif (T > times.first) {\r\n\t\t\t\ttimes.first = T;\r\n\t\t\t}\r\n\t\t\tif (times.first > times.max) {\r\n\t\t\t\treturn false;\r\n\t\t\t} // Early exit\r\n\r\n\t\t\tT = (maxA - minB) / speed;\r\n\t\t\tif (T < times.last) {\r\n\t\t\t\ttimes.last = T;\r\n\t\t\t}\r\n\t\t\tif (times.first > times.last) {\r\n\t\t\t\treturn false;\r\n\t\t\t} // Early exit\r\n\t\t} else if (maxA <= minB) {\r\n\t\t\t// Interval (B) initially on ‘right’ of interval (A)\r\n\t\t\tif (speed >= 0.0) {\r\n\t\t\t\treturn false;\r\n\t\t\t} // Intervals moving apart\r\n\r\n\t\t\tT = (maxA - minB) / speed;\r\n\t\t\tif (T > times.first) {\r\n\t\t\t\ttimes.first = T;\r\n\t\t\t}\r\n\t\t\tif (times.first > times.max) {\r\n\t\t\t\treturn false;\r\n\t\t\t} // Early exit\r\n\r\n\t\t\tT = (minA - maxB) / speed;\r\n\t\t\tif (T < times.last) {\r\n\t\t\t\ttimes.last = T;\r\n\t\t\t}\r\n\t\t\tif (times.first > times.last) {\r\n\t\t\t\treturn false;\r\n\t\t\t} // Early exit\r\n\t\t} else {\r\n\t\t\t// Interval (A) and interval (B) overlap\r\n\t\t\tif (speed > 0.0) {\r\n\t\t\t\tT = (maxA - minB) / speed;\r\n\t\t\t\tif (T < times.last) {\r\n\t\t\t\t\ttimes.last = T;\r\n\t\t\t\t}\r\n\t\t\t\tif (times.first > times.last) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t} // Early exit\r\n\t\t\t} else if (speed < 0.0) {\r\n\t\t\t\tT = (minA - maxB) / speed;\r\n\t\t\t\tif (T < times.last) {\r\n\t\t\t\t\ttimes.last = T;\r\n\t\t\t\t}\r\n\t\t\t\tif (times.first > times.last) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t} // Early exit\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * This will find the average point of intersection between two shapes along an axis.\r\n\t * This assumes that the shapes are intersecting and can not be used to find out IF two shapes are intersecting.\r\n\t * @param shapeA Shape A\r\n\t * @param shapeB Shape B\r\n\t * @param testAxis The axis to test along.\r\n\t * @returns The average point of intersection.\r\n\t */\r\n\texport function getIntersectionPoint(\r\n\t\tshapeA: Shape,\r\n\t\tshapeB: Shape,\r\n\t\ttestAxis: Vec3\r\n\t): Vec3 {\r\n\t\tlet shapeAVertices = shapeA.getTransformedVertices();\r\n\t\tlet shapeBVertices = shapeB.getTransformedVertices();\r\n\r\n\t\tlet maxAPoints: Array<number> = new Array<number>();\r\n\t\tlet minAPoints: Array<number> = new Array<number>();\r\n\t\tlet maxBPoints: Array<number> = new Array<number>();\r\n\t\tlet minBPoints: Array<number> = new Array<number>();\r\n\r\n\t\tlet maxA = testAxis.dot(shapeAVertices[0]);\r\n\t\tmaxAPoints.push(0);\r\n\t\tlet minA = maxA;\r\n\t\tminAPoints.push(0);\r\n\t\tlet maxB = testAxis.dot(shapeBVertices[0]);\r\n\t\tmaxBPoints.push(0);\r\n\t\tlet minB = maxB;\r\n\t\tminBPoints.push(0);\r\n\r\n\t\tlet tempDot = 0.0;\r\n\r\n\t\tfor (let i = 1; i < shapeAVertices.length; i++) {\r\n\t\t\ttempDot = testAxis.dot(shapeAVertices[i]);\r\n\t\t\tif (tempDot < minA) {\r\n\t\t\t\tminA = tempDot;\r\n\t\t\t\tminAPoints.length = 0;\r\n\t\t\t\tminAPoints.push(i);\r\n\t\t\t} else if (tempDot == minA) {\r\n\t\t\t\t// TODO: Add some kind of epsilon?\r\n\t\t\t\tminAPoints.push(i);\r\n\t\t\t}\r\n\t\t\tif (tempDot > maxA) {\r\n\t\t\t\tmaxA = tempDot;\r\n\t\t\t\tmaxAPoints.length = 0;\r\n\t\t\t\tmaxAPoints.push(i);\r\n\t\t\t} else if (tempDot == maxA) {\r\n\t\t\t\t// TODO: Add some kind of epsilon?\r\n\t\t\t\tmaxAPoints.push(i);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let i = 1; i < shapeBVertices.length; i++) {\r\n\t\t\ttempDot = testAxis.dot(shapeBVertices[i]);\r\n\t\t\tif (tempDot < minB) {\r\n\t\t\t\tminB = tempDot;\r\n\t\t\t\tminBPoints.length = 0;\r\n\t\t\t\tminBPoints.push(i);\r\n\t\t\t} else if (tempDot == minB) {\r\n\t\t\t\t// TODO: Add some kind of epsilon?\r\n\t\t\t\tminBPoints.push(i);\r\n\t\t\t}\r\n\t\t\tif (tempDot > maxB) {\r\n\t\t\t\tmaxB = tempDot;\r\n\t\t\t\tmaxBPoints.length = 0;\r\n\t\t\t\tmaxBPoints.push(i);\r\n\t\t\t} else if (tempDot == maxB) {\r\n\t\t\t\t// TODO: Add some kind of epsilon?\r\n\t\t\t\tmaxBPoints.push(i);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet overlap1 = Math.abs(maxB - minA);\r\n\t\tlet overlap2 = Math.abs(maxA - minB);\r\n\r\n\t\tlet averagePoint = new Vec3();\r\n\t\tlet nrPoints = 0;\r\n\r\n\t\tif (overlap1 > overlap2) {\r\n\t\t\t// overlap2\r\n\t\t\tfor (const p of maxAPoints) {\r\n\t\t\t\taveragePoint.add(shapeAVertices[p]);\r\n\t\t\t\tnrPoints++;\r\n\t\t\t}\r\n\t\t\tfor (const p of minBPoints) {\r\n\t\t\t\taveragePoint.add(shapeBVertices[p]);\r\n\t\t\t\tnrPoints++;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// overlap1;\r\n\t\t\tlet averagePoint = new Vec3();\r\n\t\t\tlet nrPoints = 0;\r\n\t\t\tfor (const p of minAPoints) {\r\n\t\t\t\taveragePoint.add(shapeAVertices[p]);\r\n\t\t\t\tnrPoints++;\r\n\t\t\t}\r\n\t\t\tfor (const p of maxBPoints) {\r\n\t\t\t\taveragePoint.add(shapeBVertices[p]);\r\n\t\t\t\tnrPoints++;\r\n\t\t\t}\r\n\t\t}\r\n\t\taveragePoint.multiply(1.0 / nrPoints);\r\n\t\treturn averagePoint;\r\n\t}\r\n\r\n\t/**\r\n\t * Intersection testing of two shapes.\r\n\t * @param shapeA Shape A\r\n\t * @param shapeB Shape B\r\n\t * @param intersectionAxis The minimum translation vector (MTV).\r\n\t * This is the axis at which the shapes are intersecting the least.\r\n\t * Is set by this function.\r\n\t * Will always point from Shape B towards Shape A.\r\n\t * @param intersectionDepth An object holding a variable \"depth\" that will state how much the shapes are intersecting.\r\n\t * Is set by this function\r\n\t * @returns Boolean stating if the shapes intersect or not.\r\n\t */\r\n\texport function getIntersection3D(\r\n\t\tshapeA: Shape,\r\n\t\tshapeB: Shape,\r\n\t\tintersectionAxis: Vec3,\r\n\t\tintersectionDepth: { depth: number }\r\n\t): boolean {\r\n\t\tintersectionDepth.depth = Infinity;\r\n\r\n\t\tlet shapeAVertices = shapeA.getTransformedVertices();\r\n\t\tlet shapeBVertices = shapeB.getTransformedVertices();\r\n\r\n\t\t// Check normal and update intersection depth and axis if shallower than previous\r\n\t\tlet checkNormal = function (normal: Vec3): boolean {\r\n\t\t\tlet reverse = { value: false };\r\n\t\t\tlet overlap = SAT.getOverlap(\r\n\t\t\t\tnormal,\r\n\t\t\t\tshapeAVertices,\r\n\t\t\t\tshapeBVertices,\r\n\t\t\t\treverse,\r\n\t\t\t\tshapeA.margin + shapeB.margin\r\n\t\t\t);\r\n\r\n\t\t\tif (overlap < 0.0) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif (overlap < intersectionDepth.depth) {\r\n\t\t\t\tintersectionDepth.depth = overlap;\r\n\t\t\t\tintersectionAxis.deepAssign(normal);\r\n\t\t\t\tif (reverse.value) {\r\n\t\t\t\t\tintersectionAxis.flip();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\tlet shapeANormals = shapeA.getTransformedNormals();\r\n\t\tfor (let normal of shapeANormals) {\r\n\t\t\tif (!checkNormal(normal)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet shapeBNormals = shapeB.getTransformedNormals();\r\n\t\tfor (let normal of shapeBNormals) {\r\n\t\t\tif (!checkNormal(normal)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// The shapes are intersecting along all normals\r\n\t\t// Two cases are possible;\r\n\t\t// 1. The shapes are flat and coplanar -> We need to test the shapes in \"2d\", projected on the plane they are on\r\n\t\t// 2. The shapes are not flat and coplanar -> We need to test the cross products of all the edges of ShapeA with the edges of ShapeB\r\n\r\n\t\t// Lets start with the coplanar possibility, which can be checked by seeing if both shapes have only one normal, and the two shapes normals are perpendicular\r\n\t\t// Side note; If the normals are perpendicular, but the shapes are not coplanar, the previous tests would have found a seperating axis, so we wouldn't have gotten here\r\n\r\n\t\tif (shapeANormals.length == 1 && shapeBNormals.length == 1) {\r\n\t\t\t// Coplanar possible\r\n\t\t\tlet crossVector = new Vec3(shapeANormals[0]).cross(shapeBNormals[0]);\r\n\r\n\t\t\tif (\r\n\t\t\t\tcrossVector.x == 0.0 &&\r\n\t\t\t\tcrossVector.y == 0.0 &&\r\n\t\t\t\tcrossVector.z == 0.0\r\n\t\t\t) {\r\n\t\t\t\t// Coplanar\r\n\t\t\t\t// Test the edge normals for all edges\r\n\t\t\t\tfor (const AEdgeNormal of shapeA.getTransformedEdgeNormals()) {\r\n\t\t\t\t\tif (!checkNormal(AEdgeNormal)) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (const BEdgeNormal of shapeB.getTransformedEdgeNormals()) {\r\n\t\t\t\t\tif (!checkNormal(BEdgeNormal)) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// There is an intersection, return it\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Calculate cross vectors of edges and test along the results\r\n\t\tfor (const e1 of shapeA.getTransformedEdges()) {\r\n\t\t\tfor (const e2 of shapeB.getTransformedEdges()) {\r\n\t\t\t\tconst dotProd = e1.dot(e2);\r\n\t\t\t\tif (dotProd < 0.99 && dotProd > -0.99) {\r\n\t\t\t\t\tlet testVec = new Vec3();\r\n\t\t\t\t\ttestVec.deepAssign(e1);\r\n\t\t\t\t\ttestVec.cross(e2).normalize();\r\n\t\t\t\t\tif (!checkNormal(testVec)) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Check when an intersection will occur (if it happens before timeMax).\r\n\t * @param shapeA\r\n\t * @param shapeB\r\n\t * @param velocityA\r\n\t * @param velocityB\r\n\t * @param timeMax\r\n\t * @returns Returns time of intersection if there is one within timeMax, otherwise returns -1.0\r\n\t */\r\n\texport function getContinousIntersection3D(\r\n\t\tshapeA: Shape,\r\n\t\tshapeB: Shape,\r\n\t\tvelocityA: Vec3,\r\n\t\tvelocityB: Vec3,\r\n\t\ttimeMax: number\r\n\t): number {\r\n\t\t// Treat shapeA as stationary and shapeB as moving\r\n\t\tlet relativeVel = new Vec3(velocityB).subtract(velocityA);\r\n\r\n\t\tlet times = { first: 0.0, last: Infinity, max: timeMax };\r\n\r\n\t\tlet shapeAVertices = shapeA.getTransformedVertices();\r\n\t\tlet shapeBVertices = shapeB.getTransformedVertices();\r\n\r\n\t\tlet shapeANormals = shapeA.getTransformedNormals();\r\n\t\tfor (let normal of shapeANormals) {\r\n\t\t\tif (\r\n\t\t\t\t!getContinousOverlap(\r\n\t\t\t\t\tnormal,\r\n\t\t\t\t\tshapeAVertices,\r\n\t\t\t\t\tshapeBVertices,\r\n\t\t\t\t\trelativeVel,\r\n\t\t\t\t\ttimes\r\n\t\t\t\t)\r\n\t\t\t) {\r\n\t\t\t\treturn -1.0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet shapeBNormals = shapeB.getTransformedNormals();\r\n\t\tfor (let normal of shapeBNormals) {\r\n\t\t\tif (\r\n\t\t\t\t!getContinousOverlap(\r\n\t\t\t\t\tnormal,\r\n\t\t\t\t\tshapeAVertices,\r\n\t\t\t\t\tshapeBVertices,\r\n\t\t\t\t\trelativeVel,\r\n\t\t\t\t\ttimes\r\n\t\t\t\t)\r\n\t\t\t) {\r\n\t\t\t\treturn -1.0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// The shapes are intersecting along all normals\r\n\t\t// Two cases are possible;\r\n\t\t// 1. The shapes are flat and coplanar -> We need to test the shapes in \"2d\", projected on the plane they are on\r\n\t\t// 2. The shapes are not flat and coplanar -> We need to test the cross products of all the edges of ShapeA with the edges of ShapeB\r\n\r\n\t\t// Lets start with the coplanar possibility, which can be checked by seeing if both shapes have only one normal, and the two shapes normals are perpendicular\r\n\t\t// Side note; If the normals are perpendicular, but the shapes are not coplanar, the previous tests would have found a seperating axis, so we wouldn't have gotten here\r\n\r\n\t\tif (shapeANormals.length == 1 && shapeBNormals.length == 1) {\r\n\t\t\t// Coplanar possible\r\n\t\t\tlet crossVector = new Vec3(shapeANormals[0]).cross(shapeBNormals[0]);\r\n\r\n\t\t\tif (\r\n\t\t\t\tcrossVector.x == 0.0 &&\r\n\t\t\t\tcrossVector.y == 0.0 &&\r\n\t\t\t\tcrossVector.z == 0.0\r\n\t\t\t) {\r\n\t\t\t\t// Coplanar\r\n\t\t\t\t// Test the edge normals for all edges\r\n\t\t\t\tfor (const AEdgeNormal of shapeA.getTransformedEdgeNormals()) {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\t!getContinousOverlap(\r\n\t\t\t\t\t\t\tAEdgeNormal,\r\n\t\t\t\t\t\t\tshapeAVertices,\r\n\t\t\t\t\t\t\tshapeBVertices,\r\n\t\t\t\t\t\t\trelativeVel,\r\n\t\t\t\t\t\t\ttimes\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\treturn -1.0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (const BEdgeNormal of shapeB.getTransformedEdgeNormals()) {\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\t!getContinousOverlap(\r\n\t\t\t\t\t\t\tBEdgeNormal,\r\n\t\t\t\t\t\t\tshapeAVertices,\r\n\t\t\t\t\t\t\tshapeBVertices,\r\n\t\t\t\t\t\t\trelativeVel,\r\n\t\t\t\t\t\t\ttimes\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\treturn -1.0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// There is an intersection, return it\r\n\t\t\t\treturn times.first;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Calculate cross vectors of edges and test along the results\r\n\t\tfor (const e1 of shapeA.getTransformedEdges()) {\r\n\t\t\tfor (const e2 of shapeB.getTransformedEdges()) {\r\n\t\t\t\tconst dotProd = e1.dot(e2);\r\n\t\t\t\tif (dotProd < 0.99 && dotProd > -0.99) {\r\n\t\t\t\t\tlet testVec = new Vec3();\r\n\t\t\t\t\ttestVec.deepAssign(e1);\r\n\t\t\t\t\ttestVec.cross(e2).normalize();\r\n\t\t\t\t\tif (\r\n\t\t\t\t\t\t!getContinousOverlap(\r\n\t\t\t\t\t\t\ttestVec,\r\n\t\t\t\t\t\t\tshapeAVertices,\r\n\t\t\t\t\t\t\tshapeBVertices,\r\n\t\t\t\t\t\t\trelativeVel,\r\n\t\t\t\t\t\t\ttimes\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\treturn -1.0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn times.first;\r\n\t}\r\n\r\n\texport function runUnitTests() {\r\n\t\t// prettier-ignore\r\n\t\tlet vertexCoords = [\r\n            // Triangle 0\r\n            0.0, 1.0, 0.0,\r\n            0.0, 0.0, 0.0,\r\n            1.0, 0.0, 0.0,\r\n            \r\n            // Triangle 1\r\n            0.5, 0.5, -0.1,\r\n            0.5, 0.5, 1.0,\r\n            0.5, 0.0, 1.0,\r\n\r\n            // Triangle 2\r\n            5.0, 5.0, 0.0,\r\n            5.0, 4.0, 0.0,\r\n            6.0, 4.0, 0.0,\r\n\r\n            // Triangle 3\r\n            1.0, 1.0, 0.0,\r\n            1.0, 0.0, 0.0,\r\n            2.0, 0.0, 0.0,\r\n        ]\r\n\r\n\t\t// prettier-ignore\r\n\t\tlet positiveTests: {t1Index: number, t2Index:number, depth: number, axis: Vec3, strictDirection: boolean}[] = [\r\n            {t1Index: 0, t2Index: 1, depth: 0.1, axis: new Vec3([0.0, 0.0, -1.0]), strictDirection: true},\r\n            {t1Index: 0, t2Index: 3, depth: 0.0, axis: new Vec3([0.0, 0.0, 1.0]), strictDirection: false},\r\n        ]\r\n\r\n\t\t// prettier-ignore\r\n\t\tlet negativeTests = [\r\n            0, 2, // Coplanar\r\n            1, 2,\r\n        ]\r\n\r\n\t\t// Create Vec3s from the data points\r\n\t\tlet vertexPositions = new Array<Vec3>();\r\n\t\tfor (let i = 0; i < vertexCoords.length; i += 3) {\r\n\t\t\tvertexPositions.push(\r\n\t\t\t\tnew Vec3([vertexCoords[i], vertexCoords[i + 1], vertexCoords[i + 2]])\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// Create triangles from the Vec3s\r\n\t\tlet triangles = new Array<Triangle>();\r\n\t\tfor (let i = 0; i < vertexPositions.length; i += 3) {\r\n\t\t\tlet length = triangles.push(new Triangle());\r\n\t\t\ttriangles[length - 1].setVertices(\r\n\t\t\t\tvertexPositions[i],\r\n\t\t\t\tvertexPositions[i + 1],\r\n\t\t\t\tvertexPositions[i + 2]\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tlet intersectionAxis = new Vec3();\r\n\t\tlet intersectionDepth = { depth: 0.0 };\r\n\t\t// Test the triangles that should be intersecting, no matter the order they are tried in\r\n\t\tfor (let i = 0; i < positiveTests.length; i++) {\r\n\t\t\tif (\r\n\t\t\t\t!SAT.getIntersection3D(\r\n\t\t\t\t\ttriangles[positiveTests[i].t1Index],\r\n\t\t\t\t\ttriangles[positiveTests[i].t2Index],\r\n\t\t\t\t\tintersectionAxis,\r\n\t\t\t\t\tintersectionDepth\r\n\t\t\t\t)\r\n\t\t\t) {\r\n\t\t\t\talert(\"False negative intersection test!\");\r\n\t\t\t\tdebugger;\r\n\t\t\t} else if (\r\n\t\t\t\tMath.abs(intersectionDepth.depth - positiveTests[i].depth) > 0.00001\r\n\t\t\t) {\r\n\t\t\t\talert(\"Intersection test returned wrong depth!\");\r\n\t\t\t\tdebugger;\r\n\t\t\t} else if (positiveTests[i].strictDirection) {\r\n\t\t\t\t// Check that the axis is pointing in the correct direction\r\n\t\t\t\tif (!intersectionAxis.compare(positiveTests[i].axis)) {\r\n\t\t\t\t\talert(\"Intersection test returned wrong intersection axis!\");\r\n\t\t\t\t\tdebugger;\r\n\t\t\t\t}\r\n\t\t\t} else if (\r\n\t\t\t\t!intersectionAxis.cross(positiveTests[i].axis).compare([0.0, 0.0, 0.0])\r\n\t\t\t) {\r\n\t\t\t\t// Only check that the axises are perpendicular\r\n\t\t\t\talert(\"Intersection test returned wrong intersection axis!\");\r\n\t\t\t\tdebugger;\r\n\t\t\t}\r\n\r\n\t\t\tif (\r\n\t\t\t\t!SAT.getIntersection3D(\r\n\t\t\t\t\ttriangles[positiveTests[i].t2Index],\r\n\t\t\t\t\ttriangles[positiveTests[i].t1Index],\r\n\t\t\t\t\tintersectionAxis,\r\n\t\t\t\t\tintersectionDepth\r\n\t\t\t\t)\r\n\t\t\t) {\r\n\t\t\t\talert(\"False negative intersection test!\");\r\n\t\t\t\tdebugger;\r\n\t\t\t} else if (\r\n\t\t\t\tMath.abs(intersectionDepth.depth - positiveTests[i].depth) > 0.00001\r\n\t\t\t) {\r\n\t\t\t\talert(\"Intersection test returned wrong depth!\");\r\n\t\t\t\tdebugger;\r\n\t\t\t} else if (positiveTests[i].strictDirection) {\r\n\t\t\t\t// Check that the axis is pointing in the correct direction\r\n\t\t\t\tif (!intersectionAxis.flip().compare(positiveTests[i].axis)) {\r\n\t\t\t\t\talert(\"Intersection test returned wrong intersection axis!\");\r\n\t\t\t\t\tdebugger;\r\n\t\t\t\t}\r\n\t\t\t} else if (\r\n\t\t\t\t!intersectionAxis.cross(positiveTests[i].axis).compare([0.0, 0.0, 0.0])\r\n\t\t\t) {\r\n\t\t\t\t// Only check that the axises are perpendicular\r\n\t\t\t\talert(\"Intersection test returned wrong intersection axis!\");\r\n\t\t\t\tdebugger;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Test the triangles that should not be intersecting, no matter the order they are tried in\r\n\t\tfor (let i = 0; i < negativeTests.length; i += 2) {\r\n\t\t\tif (\r\n\t\t\t\tSAT.getIntersection3D(\r\n\t\t\t\t\ttriangles[negativeTests[i]],\r\n\t\t\t\t\ttriangles[negativeTests[i + 1]],\r\n\t\t\t\t\tnew Vec3(),\r\n\t\t\t\t\t{ depth: 0.0 }\r\n\t\t\t\t) ||\r\n\t\t\t\tSAT.getIntersection3D(\r\n\t\t\t\t\ttriangles[negativeTests[i + 1]],\r\n\t\t\t\t\ttriangles[negativeTests[i]],\r\n\t\t\t\t\tnew Vec3(),\r\n\t\t\t\t\t{ depth: 0.0 }\r\n\t\t\t\t)\r\n\t\t\t) {\r\n\t\t\t\talert(\"False positive intersection test!\");\r\n\t\t\t\tdebugger;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","export default class Vec extends Array<number> {\r\n\tconstructor(size: number, base?: number[]) {\r\n\t\tsuper(size);\r\n\t\tif (base) {\r\n\t\t\tthis.iterate((i: number) => {\r\n\t\t\t\tthis[i] = base[i];\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tthis.fill(0);\r\n\t\t}\r\n\t}\r\n\r\n\titerate(fun: Function) {\r\n\t\tfor (let i = 0; i < this.length; i++) {\r\n\t\t\tfun(i);\r\n\t\t}\r\n\t}\r\n\r\n\tdeepAssign(base: number[]): any {\r\n\t\tthis.iterate((i: number) => {\r\n\t\t\tthis[i] = base[i];\r\n\t\t});\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tcompare(other: number[]): boolean {\r\n\t\tlet returnVal = true;\r\n\t\tthis.iterate((i: number) => {\r\n\t\t\tif (this[i] != other[i]) {\r\n\t\t\t\treturnVal = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn returnVal;\r\n\t}\r\n\r\n\tlen(): number {\r\n\t\treturn Math.sqrt(this.length2());\r\n\t}\r\n\r\n\tlength2(): number {\r\n\t\tlet returnVal = 0;\r\n\t\tthis.iterate((i: number) => {\r\n\t\t\treturnVal += Math.pow(this[i], 2);\r\n\t\t});\r\n\t\treturn returnVal;\r\n\t}\r\n\r\n\t/**\r\n\t * Normalizes the vector and returns it.\r\n\t * It does not return a copy, so this will change the instance itself.\r\n\t */\r\n\tnormalize(): any {\r\n\t\tconst length = this.len();\r\n\t\tif (length > 0.0) {\r\n\t\t\tthis.iterate((i: number) => {\r\n\t\t\t\tthis[i] /= length;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\tdot(otherVec: number[]): number {\r\n\t\tlet dot = 0.0;\r\n\t\tthis.iterate((i: number) => {\r\n\t\t\tdot += this[i] * otherVec[i];\r\n\t\t});\r\n\t\treturn dot;\r\n\t}\r\n\r\n\tflip(): any {\r\n\t\tthis.iterate((i: number) => {\r\n\t\t\tthis[i] *= -1.0;\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\r\n\tadd(vec: number[]): any {\r\n\t\tthis.iterate((i: number) => {\r\n\t\t\tthis[i] += vec[i];\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\r\n\tsubtract(vec: number[]): any {\r\n\t\tthis.iterate((i: number) => {\r\n\t\t\tthis[i] -= vec[i];\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\r\n\tmultiply(mult: number): any {\r\n\t\tthis.iterate((i: number) => {\r\n\t\t\tthis[i] *= mult;\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\r\n\tmin(vec: number[]): any {\r\n\t\tthis.iterate((i: number) => {\r\n\t\t\tthis[i] = Math.min(this[i], vec[i]);\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n\r\n\tmax(vec: number[]): any {\r\n\t\tthis.iterate((i: number) => {\r\n\t\t\tthis[i] = Math.max(this[i], vec[i]);\r\n\t\t});\r\n\t\treturn this;\r\n\t}\r\n}\r\n","import Vec from \"./Vec\";\r\n\r\nexport default class Vec2 extends Vec {\r\n\tconstructor(base?: number[]) {\r\n\t\tsuper(2, base);\r\n\t}\r\n\r\n\tget x(): number {\r\n\t\treturn this[0];\r\n\t}\r\n\r\n\tget y(): number {\r\n\t\treturn this[1];\r\n\t}\r\n\r\n\tset x(x: number) {\r\n\t\tthis[0] = x;\r\n\t}\r\n\r\n\tset y(y: number) {\r\n\t\tthis[1] = y;\r\n\t}\r\n\r\n\tsetValues(x?: number, y?: number): Vec2 {\r\n\t\tif (x != undefined) {\r\n\t\t\tthis[0] = x;\r\n\t\t}\r\n\t\tif (y != undefined) {\r\n\t\t\tthis[1] = y;\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n}\r\n","import Vec from \"./Vec\";\r\n\r\nexport default class Vec3 extends Vec {\r\n\tconstructor(base?: number[]) {\r\n\t\tsuper(3, base);\r\n\t}\r\n\r\n\tget x(): number {\r\n\t\treturn this[0];\r\n\t}\r\n\r\n\tget y(): number {\r\n\t\treturn this[1];\r\n\t}\r\n\r\n\tget z(): number {\r\n\t\treturn this[2];\r\n\t}\r\n\r\n\tset x(x: number) {\r\n\t\tthis[0] = x;\r\n\t}\r\n\r\n\tset y(y: number) {\r\n\t\tthis[1] = y;\r\n\t}\r\n\r\n\tset z(z: number) {\r\n\t\tthis[2] = z;\r\n\t}\r\n\r\n\tsetValues(x?: number, y?: number, z?: number): Vec3 {\r\n\t\tif (x != undefined) {\r\n\t\t\tthis[0] = x;\r\n\t\t}\r\n\t\tif (y != undefined) {\r\n\t\t\tthis[1] = y;\r\n\t\t}\r\n\t\tif (z != undefined) {\r\n\t\t\tthis[2] = z;\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tcross(otherVec: number[]): Vec3 {\r\n\t\tlet tempVec: Vec3 = new Vec3();\r\n\t\ttempVec.x = this[1] * otherVec[2] - this[2] * otherVec[1];\r\n\t\ttempVec.y = this[0] * otherVec[2] - this[2] * otherVec[0];\r\n\t\ttempVec.z = this[0] * otherVec[1] - this[1] * otherVec[0];\r\n\t\tthis.deepAssign(tempVec);\r\n\t\treturn this;\r\n\t}\r\n}\r\n","import { gl } from \"../../main\";\r\nimport Texture from \"../Textures/Texture\";\r\nimport GraphicsObject from \"./GraphicsObject\";\r\n\r\nexport default class GraphicsBundle {\r\n\tmodelMatrix: Matrix4;\r\n\ttextureMatrix: Matrix4;\r\n\r\n\tdiffuse: Texture;\r\n\tspecular: Texture;\r\n\temission: Texture;\r\n\r\n\tbaseColor: Vector3;\r\n\r\n\tgraphicsObject: GraphicsObject;\r\n\r\n\tconstructor(\r\n\t\tdiffuse: Texture,\r\n\t\tspecular: Texture,\r\n\t\tgraphicsObject: GraphicsObject,\r\n\t\temissionMap?: Texture\r\n\t) {\r\n\t\tthis.diffuse = diffuse;\r\n\t\tthis.specular = specular;\r\n\r\n\t\tif (emissionMap != undefined) {\r\n\t\t\tthis.emission = emissionMap;\r\n\t\t} else {\r\n\t\t\tthis.emission = new Texture();\r\n\t\t\tthis.emission.setTextureData(new Uint8Array([0.0, 0.0, 0.0, 0.0]), 1, 1);\r\n\t\t}\r\n\t\tthis.baseColor = new Vector3([0, 0, 0]);\r\n\r\n\t\tthis.modelMatrix = new Matrix4(null);\r\n\t\tthis.textureMatrix = new Matrix4(null);\r\n\r\n\t\tthis.graphicsObject = graphicsObject;\r\n\t}\r\n\r\n\tdraw(bindSpecialTextures: boolean = true) {\r\n\t\tthis.diffuse.bind(0);\r\n\r\n\t\tif (bindSpecialTextures) {\r\n\t\t\tthis.specular.bind(1);\r\n\t\t\tthis.emission.bind(2);\r\n\t\t}\r\n\r\n\t\tlet baseColor: [WebGLUniformLocation, boolean] =\r\n\t\t\tthis.graphicsObject.shaderProgram.getUniformLocation(\"baseColor\");\r\n\t\tif (baseColor[1]) {\r\n\t\t\tgl.uniform3fv(baseColor[0], this.baseColor.elements);\r\n\t\t}\r\n\t\tlet modelReturn: [WebGLUniformLocation, boolean] =\r\n\t\t\tthis.graphicsObject.shaderProgram.getUniformLocation(\"modelMatrix\");\r\n\t\tif (modelReturn[1]) {\r\n\t\t\tgl.uniformMatrix4fv(modelReturn[0], false, this.modelMatrix.elements);\r\n\t\t}\r\n\t\tlet textureReturn: [WebGLUniformLocation, boolean] =\r\n\t\t\tthis.graphicsObject.shaderProgram.getUniformLocation(\"textureMatrix\");\r\n\t\tif (textureReturn[1]) {\r\n\t\t\tgl.uniformMatrix4fv(textureReturn[0], false, this.textureMatrix.elements);\r\n\t\t}\r\n\r\n\t\tthis.graphicsObject.draw();\r\n\t}\r\n}\r\n","import { gl } from \"../../main\";\r\nimport Vec3 from \"../Maths/Vec3\";\r\nimport Triangle from \"../Physics/Shapes/Triangle\";\r\nimport ShaderProgram from \"../ShaderPrograms/ShaderProgram\";\r\n\r\nexport default class GraphicsObject {\r\n\tshaderProgram: ShaderProgram;\r\n\r\n\t// Private\r\n\tprivate VAO: WebGLVertexArrayObject;\r\n\tprivate VBO: WebGLBuffer;\r\n\tprivate EBO: WebGLBuffer;\r\n\r\n\tconstructor(shaderProgram: ShaderProgram) {\r\n\t\tthis.shaderProgram = shaderProgram;\r\n\r\n\t\tthis.VAO = null;\r\n\t\tthis.VBO = null;\r\n\t\tthis.EBO = null; // Optional\r\n\r\n\t\tthis.init();\r\n\t}\r\n\r\n\tinit() {\r\n\t\t// Create buffers\r\n\t\tthis.VAO = gl.createVertexArray();\r\n\t\tthis.VBO = gl.createBuffer();\r\n\t\tthis.EBO = gl.createBuffer();\r\n\r\n\t\t// Bind buffers\r\n\t\tgl.bindVertexArray(this.VAO);\r\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.VBO);\r\n\r\n\t\tthis.shaderProgram.setupVertexAttributePointers();\r\n\r\n\t\tgl.bindVertexArray(null);\r\n\t}\r\n\r\n\t// changeShaderProgram(shaderProgram) {\r\n\t// \tthis.shaderProgram = shaderProgram;\r\n\t// }\r\n\r\n\tbindVAO() {\r\n\t\tgl.bindVertexArray(this.VAO);\r\n\t}\r\n\r\n\tunbindVAO() {\r\n\t\tgl.bindVertexArray(null);\r\n\t}\r\n\r\n\tsetVertexData(data: Float32Array) {\r\n\t\tgl.bindVertexArray(this.VAO);\r\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.VBO);\r\n\t\tgl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);\r\n\t\tgl.bindVertexArray(null);\r\n\t}\r\n\r\n\tsetIndexData(data: Int32Array) {\r\n\t\tgl.bindVertexArray(this.VAO);\r\n\r\n\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.EBO);\r\n\t\tgl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW);\r\n\r\n\t\tgl.bindVertexArray(null);\r\n\t}\r\n\r\n\tsetupTriangles(triangles: Array<Triangle>) {}\r\n\r\n\tgetVertexPositions(): Array<Vec3> {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tdraw() {\r\n\t\t// Can this be virtual?\r\n\t}\r\n}\r\n","import { gl } from \"../../main\";\r\n\r\nimport GraphicsObject from \"./GraphicsObject\";\r\nimport Vec3 from \"../Maths/Vec3\";\r\nimport ShaderProgram from \"../ShaderPrograms/ShaderProgram\";\r\n\r\nexport default class GrassSpawner extends GraphicsObject {\r\n\t// Private\r\n\tprivate numGrassStraws: number;\r\n\tprivate vertices: Float32Array;\r\n\tprivate instanceVBO: WebGLBuffer;\r\n\r\n\tconstructor(\r\n\t\tshaderProgram: ShaderProgram,\r\n\t\tnumberOfStartingGrassStraws: number = 0\r\n\t) {\r\n\t\tsuper(shaderProgram);\r\n\r\n\t\tthis.bindVAO();\r\n\t\tthis.instanceVBO = gl.createBuffer();\r\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.instanceVBO);\r\n\t\tgl.bufferData(\r\n\t\t\tgl.ARRAY_BUFFER,\r\n\t\t\tnumberOfStartingGrassStraws * 7 * 4,\r\n\t\t\tgl.STATIC_DRAW\r\n\t\t);\r\n\t\tshaderProgram.setupInstancedVertexAttributePointers();\r\n\t\tthis.unbindVAO();\r\n\r\n\t\t// prettier-ignore\r\n\t\tthis.vertices = new Float32Array([ \r\n            // positions  // uv\r\n             0.0,  1.0,   0.5, 1.0,\r\n            -0.1,  0.0,   0.0, 0.0,\r\n             0.1,  0.0,   1.0, 0.0,\r\n        ]);\r\n\r\n\t\tthis.setVertexData(this.vertices);\r\n\r\n\t\t// All starting particles are initialized as size and position 0, so they wont be visable unless manually changed\r\n\t\tthis.numGrassStraws = numberOfStartingGrassStraws;\r\n\t}\r\n\r\n\tsetNumGrassStraws(amount: number) {\r\n\t\tthis.numGrassStraws = amount;\r\n\r\n\t\tthis.bindVAO();\r\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.instanceVBO);\r\n\t\tgl.bufferData(gl.ARRAY_BUFFER, this.numGrassStraws * 7 * 4, gl.STATIC_DRAW);\r\n\t\tthis.unbindVAO();\r\n\t}\r\n\r\n\tgetNumberOfGrassStraws(): number {\r\n\t\treturn this.numGrassStraws;\r\n\t}\r\n\r\n\tsetGrassStrawData(\r\n\t\tparticleIndex: number,\r\n\t\tstartPosition: Vec3,\r\n\t\tsize: number,\r\n\t\ttipOffset: Vec3\r\n\t): boolean {\r\n\t\tif (particleIndex > this.numGrassStraws) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tlet data = new Float32Array([\r\n\t\t\tstartPosition.x,\r\n\t\t\tstartPosition.y,\r\n\t\t\tstartPosition.z,\r\n\t\t\tsize,\r\n\t\t\ttipOffset.x,\r\n\t\t\ttipOffset.y,\r\n\t\t\ttipOffset.z,\r\n\t\t]);\r\n\r\n\t\tthis.bufferSubDataUpdate(particleIndex * 7, data);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tsetGrassStrawPosition(particleIndex: number, position: Vec3): boolean {\r\n\t\tif (particleIndex > this.numGrassStraws) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.bufferSubDataUpdate(particleIndex * 7, new Float32Array(position));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tsetGrassStrawSize(particleIndex: number, size: number): boolean {\r\n\t\tif (particleIndex > this.numGrassStraws) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.bufferSubDataUpdate(particleIndex * 7 + 3, new Float32Array([size]));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tsetGrassTipOffset(particleIndex: number, offset: Vec3): boolean {\r\n\t\tif (particleIndex > this.numGrassStraws) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.bufferSubDataUpdate(particleIndex * 7 + 4, new Float32Array(offset));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tbufferSubDataUpdate(start: number, data: Float32Array): boolean {\r\n\t\tif (start < 0 || start + data.length > this.numGrassStraws * 7) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.bindVAO();\r\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.instanceVBO);\r\n\t\tgl.bufferSubData(gl.ARRAY_BUFFER, start * 4, data);\r\n\t\tthis.unbindVAO();\r\n\t\treturn true;\r\n\t}\r\n\r\n\tdraw() {\r\n\t\tthis.bindVAO();\r\n\r\n\t\tgl.drawArraysInstanced(gl.TRIANGLES, 0, 3, this.numGrassStraws);\r\n\t\tthis.unbindVAO();\r\n\t}\r\n}\r\n","import { gl } from \"../../main\";\r\nimport Vec2 from \"../Maths/Vec2\";\r\nimport Vec3 from \"../Maths/Vec3\";\r\nimport Triangle from \"../Physics/Shapes/Triangle\";\r\nimport ShaderProgram from \"../ShaderPrograms/ShaderProgram\";\r\nimport Mesh from \"./Mesh\";\r\n\r\nexport default class Heightmap extends Mesh {\r\n\timageData: Uint8ClampedArray;\r\n\r\n\txResolution: number;\r\n\tzResolution: number;\r\n\txQuadSize: number;\r\n\tzQuadSize: number;\r\n\tprivate indices: Int32Array;\r\n\r\n\tconstructor(shaderProgram: ShaderProgram) {\r\n\t\tsuper(shaderProgram, null);\r\n\t\tthis.xResolution = 0;\r\n\t\tthis.zResolution = 0;\r\n\t\tthis.createPlane(2, 2, 1, 1);\r\n\t\tthis.imageData = null;\r\n\t}\r\n\r\n\tsetupTriangles(triangles: Array<Triangle>) {\r\n\t\ttriangles.length = 0; // Clear triangles\r\n\t\tfor (let i = 0; i < this.indices.length; i += 3) {\r\n\t\t\t// Go through the vertices\r\n\t\t\t// Save the positions as shapes in the input array\r\n\t\t\tconst length = triangles.push(new Triangle());\r\n\t\t\ttriangles[length - 1].setVertices(\r\n\t\t\t\tnew Vec3([\r\n\t\t\t\t\tthis.vertices[this.indices[i] * 8],\r\n\t\t\t\t\tthis.vertices[this.indices[i] * 8 + 1],\r\n\t\t\t\t\tthis.vertices[this.indices[i] * 8 + 2],\r\n\t\t\t\t]),\r\n\t\t\t\tnew Vec3([\r\n\t\t\t\t\tthis.vertices[this.indices[i + 1] * 8],\r\n\t\t\t\t\tthis.vertices[this.indices[i + 1] * 8 + 1],\r\n\t\t\t\t\tthis.vertices[this.indices[i + 1] * 8 + 2],\r\n\t\t\t\t]),\r\n\t\t\t\tnew Vec3([\r\n\t\t\t\t\tthis.vertices[this.indices[i + 2] * 8],\r\n\t\t\t\t\tthis.vertices[this.indices[i + 2] * 8 + 1],\r\n\t\t\t\t\tthis.vertices[this.indices[i + 2] * 8 + 2],\r\n\t\t\t\t])\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate updateVertexData(x: number, z: number, values: number[]) {\r\n\t\tlet offset = z * this.xResolution * 8 + x * 8;\r\n\t\tfor (let i = 0; i < values.length; i++) {\r\n\t\t\tthis.vertices[offset + i] = values[i];\r\n\t\t}\r\n\t}\r\n\r\n\tprivate updateVertexHeight(x: number, z: number, height: number) {\r\n\t\tthis.vertices[z * this.xResolution * 8 + x * 8 + 1] = height;\r\n\t}\r\n\r\n\tprivate calculateVertexNormal(x: number, z: number) {\r\n\t\tif (\r\n\t\t\tx < 1 ||\r\n\t\t\tx > this.xResolution - 2 ||\r\n\t\t\tz < 1 ||\r\n\t\t\tz > this.zResolution - 2\r\n\t\t) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet resultingNormal = new Vec3();\r\n\t\tlet middlePos = new Vec3([\r\n\t\t\t0.0,\r\n\t\t\tthis.vertices[z * this.xResolution * 8 + x * 8 + 1],\r\n\t\t\t0.0,\r\n\t\t]);\r\n\r\n\t\tlet offsets = [\r\n\t\t\t[-1, -1],\r\n\t\t\t[1, -1],\r\n\t\t\t[1, 1],\r\n\t\t\t[-1, 1],\r\n\t\t];\r\n\r\n\t\tlet tempTriangle = new Triangle();\r\n\r\n\t\tfor (let i = 0; i < 4; i++) {\r\n\t\t\tlet first = i;\r\n\t\t\tlet second = (i + 1) % 4;\r\n\r\n\t\t\ttempTriangle.setVertices(\r\n\t\t\t\tnew Vec3([\r\n\t\t\t\t\toffsets[first][0] * this.xQuadSize,\r\n\t\t\t\t\tthis.vertices[\r\n\t\t\t\t\t\t(z + offsets[first][1]) * this.xResolution * 8 +\r\n\t\t\t\t\t\t\t(x + offsets[first][0]) * 8 +\r\n\t\t\t\t\t\t\t1\r\n\t\t\t\t\t],\r\n\t\t\t\t\toffsets[first][1] * this.zQuadSize,\r\n\t\t\t\t]),\r\n\t\t\t\tmiddlePos,\r\n\t\t\t\tnew Vec3([\r\n\t\t\t\t\toffsets[second][0] * this.xQuadSize,\r\n\t\t\t\t\tthis.vertices[\r\n\t\t\t\t\t\t(z + offsets[second][1]) * this.xResolution * 8 +\r\n\t\t\t\t\t\t\t(x + offsets[second][0]) * 8 +\r\n\t\t\t\t\t\t\t1\r\n\t\t\t\t\t],\r\n\t\t\t\t\toffsets[second][1] * this.zQuadSize,\r\n\t\t\t\t])\r\n\t\t\t);\r\n\t\t\tresultingNormal.add(tempTriangle.getTransformedNormals()[0]);\r\n\t\t}\r\n\r\n\t\tresultingNormal.normalize();\r\n\t\tfor (let i = 0; i < 3; i++) {\r\n\t\t\tthis.vertices[z * this.xResolution * 8 + x * 8 + 3 + i] =\r\n\t\t\t\tresultingNormal[i];\r\n\t\t}\r\n\t}\r\n\r\n\tcreatePlane(\r\n\t\txResolution: number,\r\n\t\tzResolution: number,\r\n\t\txQuadSize: number,\r\n\t\tzQuadSize: number\r\n\t) {\r\n\t\tthis.xResolution = Math.max(Math.ceil(xResolution), 2);\r\n\t\tthis.zResolution = Math.max(Math.ceil(zResolution), 2);\r\n\t\tthis.xQuadSize = xQuadSize;\r\n\t\tthis.zQuadSize = zQuadSize;\r\n\t\tthis.vertices = new Float32Array(\r\n\t\t\tthis.xResolution * this.zResolution * 8\r\n\t\t).fill(0.0);\r\n\t\tfor (let z = 0; z < this.zResolution; z++) {\r\n\t\t\tfor (let x = 0; x < this.xResolution; x++) {\r\n\t\t\t\tthis.updateVertexData(x, z, [\r\n\t\t\t\t\tx * xQuadSize,\r\n\t\t\t\t\t0.0,\r\n\t\t\t\t\tz * zQuadSize,\r\n\t\t\t\t\t0.0,\r\n\t\t\t\t\t1.0,\r\n\t\t\t\t\t0.0,\r\n\t\t\t\t\tx / (this.xResolution - 1),\r\n\t\t\t\t\tz / (this.zResolution - 1),\r\n\t\t\t\t]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.setVertexData(this.vertices);\r\n\r\n\t\tthis.indices = new Int32Array(\r\n\t\t\t(this.xResolution - 1) * (this.zResolution - 1) * 6\r\n\t\t).fill(0);\r\n\r\n\t\tfor (let z = 0; z < this.zResolution - 1; z++) {\r\n\t\t\tfor (let x = 0; x < this.xResolution - 1; x++) {\r\n\t\t\t\tlet indicesOffset = z * (this.xResolution - 1) * 6 + x * 6;\r\n\t\t\t\tlet topLeftIndex = z * this.xResolution + x;\r\n\t\t\t\tlet bottomLeftIndex = topLeftIndex + this.xResolution;\r\n\r\n\t\t\t\t// Make the diagonals go zig zag to hide repeating patterns along the diagonals\r\n\t\t\t\tif ((z + x) % 2 == 0) {\r\n\t\t\t\t\tthis.indices[indicesOffset + 0] = topLeftIndex;\r\n\t\t\t\t\tthis.indices[indicesOffset + 1] = bottomLeftIndex;\r\n\t\t\t\t\tthis.indices[indicesOffset + 2] = bottomLeftIndex + 1;\r\n\t\t\t\t\tthis.indices[indicesOffset + 3] = topLeftIndex;\r\n\t\t\t\t\tthis.indices[indicesOffset + 4] = bottomLeftIndex + 1;\r\n\t\t\t\t\tthis.indices[indicesOffset + 5] = topLeftIndex + 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.indices[indicesOffset + 0] = topLeftIndex;\r\n\t\t\t\t\tthis.indices[indicesOffset + 1] = bottomLeftIndex;\r\n\t\t\t\t\tthis.indices[indicesOffset + 2] = topLeftIndex + 1;\r\n\t\t\t\t\tthis.indices[indicesOffset + 3] = topLeftIndex + 1;\r\n\t\t\t\t\tthis.indices[indicesOffset + 4] = bottomLeftIndex;\r\n\t\t\t\t\tthis.indices[indicesOffset + 5] = bottomLeftIndex + 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.setIndexData(this.indices);\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param texturePath - texture path / URL\r\n\t * @param createResolutionFromPixels - if the plane should be recreated using the resolution of the picture\r\n\t */\r\n\tasync readHeightDataFromTexture(\r\n\t\ttexturePath: string,\r\n\t\tcreateResolutionFromPixels: boolean = true\r\n\t) {\r\n\t\tlet loadImage = function (src: string): Promise<HTMLImageElement> {\r\n\t\t\treturn new Promise((resolve, reject) => {\r\n\t\t\t\tlet img = new Image();\r\n\t\t\t\timg.onload = () => resolve(img);\r\n\t\t\t\timg.onerror = reject;\r\n\t\t\t\timg.src = src;\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tlet resizeImage = function (\r\n\t\t\timage: HTMLImageElement,\r\n\t\t\tnewWidth: number,\r\n\t\t\tnewHeight: number\r\n\t\t): Uint8ClampedArray {\r\n\t\t\tvar canvas = document.createElement(\"canvas\");\r\n\t\t\tvar ctx = canvas.getContext(\"2d\");\r\n\t\t\tcanvas.width = newWidth;\r\n\t\t\tcanvas.height = newHeight;\r\n\t\t\tctx.drawImage(image, 0, 0, newWidth, newHeight);\r\n\t\t\treturn ctx.getImageData(0, 0, newWidth, newHeight).data;\r\n\t\t};\r\n\r\n\t\tlet texture = await loadImage(texturePath);\r\n\r\n\t\tif (createResolutionFromPixels) {\r\n\t\t\tthis.createPlane(texture.width, texture.height, 1.0, 1.0);\r\n\t\t}\r\n\r\n\t\t// Resize the image to the same resolution as our hightmap\r\n\t\tthis.imageData = resizeImage(texture, this.xResolution, this.zResolution);\r\n\r\n\t\t// Go through the heightmap and set the height to the corrsponding pixel in the (resized) image\r\n\t\tfor (let z = 0; z < this.zResolution; z++) {\r\n\t\t\tfor (let x = 0; x < this.xResolution; x++) {\r\n\t\t\t\tthis.updateVertexHeight(\r\n\t\t\t\t\tx,\r\n\t\t\t\t\tz,\r\n\t\t\t\t\tthis.imageData[x * 4 + z * this.xResolution * 4] / 255.0\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Calculate normals\r\n\t\tfor (let z = 0; z < this.zResolution; z++) {\r\n\t\t\tfor (let x = 0; x < this.xResolution; x++) {\r\n\t\t\t\tthis.calculateVertexNormal(x, z);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.setVertexData(this.vertices);\r\n\t}\r\n\r\n\tgetNormalFromWorldPosition(\r\n\t\theightmapTransformMatrix: Matrix4,\r\n\t\tworldPosition: Vec3,\r\n\t\tinvertedTransformMatrix?: Matrix4\r\n\t) {\r\n\t\t// Invert the transform matrix used for the heightmap\r\n\t\tlet invertedMatrix;\r\n\t\tif (invertedTransformMatrix != undefined) {\r\n\t\t\tinvertedMatrix = invertedTransformMatrix;\r\n\t\t} else {\r\n\t\t\tinvertedMatrix = new Matrix4(heightmapTransformMatrix).invert();\r\n\t\t}\r\n\r\n\t\t// Take the world position and transform it into heightmap local coordinates\r\n\t\tlet transformedPos = invertedTransformMatrix.multiplyVector4(\r\n\t\t\tnew Vector4([...worldPosition, 1.0])\r\n\t\t);\r\n\r\n\t\treturn this.getNormal(\r\n\t\t\ttransformedPos.elements[0],\r\n\t\t\ttransformedPos.elements[2]\r\n\t\t);\r\n\t}\r\n\r\n\tgetHeightFromWorldPosition(\r\n\t\theightmapTransformMatrix: Matrix4,\r\n\t\tworldPosition: Vec3,\r\n\t\tinvertedTransformMatrix?: Matrix4\r\n\t): number {\r\n\t\t// Invert the transform matrix used for the heightmap\r\n\t\tlet invertedMatrix;\r\n\t\tif (invertedTransformMatrix != undefined) {\r\n\t\t\tinvertedMatrix = invertedTransformMatrix;\r\n\t\t} else {\r\n\t\t\tinvertedMatrix = new Matrix4(heightmapTransformMatrix).invert();\r\n\t\t}\r\n\r\n\t\t// Take the world position and transform it into heightmap local coordinates\r\n\t\tlet transformedPos = invertedMatrix.multiplyVector4(\r\n\t\t\tnew Vector4([...worldPosition, 1.0])\r\n\t\t);\r\n\r\n\t\t// Get the height of the heightmap at the corresponding position\r\n\t\tlet height = this.getHeight(\r\n\t\t\ttransformedPos.elements[0],\r\n\t\t\ttransformedPos.elements[2]\r\n\t\t);\r\n\r\n\t\tif (height == null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\ttransformedPos.elements[1] = height; // set the y coord to the heightmap height\r\n\t\ttransformedPos.elements[3] = 1.0; // set the w to 1 to be able to transform the position back into world space\r\n\t\ttransformedPos = heightmapTransformMatrix.multiplyVector4(transformedPos); // To world space! :D\r\n\r\n\t\treturn transformedPos.elements[1];\r\n\t}\r\n\r\n\tgetHeight(x: number, z: number): number {\r\n\t\tif (\r\n\t\t\tx < 0 ||\r\n\t\t\tx > this.xResolution * this.xQuadSize ||\r\n\t\t\tz < 0 ||\r\n\t\t\tz > this.zResolution * this.zQuadSize\r\n\t\t) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\t// Find out what triangle to get the height from\r\n\t\tlet baseX = Math.floor(x / this.xQuadSize);\r\n\t\tlet baseZ = Math.floor(z / this.zQuadSize);\r\n\t\tlet diffX = x - baseX * this.xQuadSize;\r\n\t\tlet diffZ = z - baseZ * this.zQuadSize;\r\n\r\n\t\tlet topRightHeight =\r\n\t\t\tthis.imageData[(baseX + 1) * 4 + (baseZ + 0) * this.xResolution * 4] /\r\n\t\t\t255.0;\r\n\t\tlet bottomLeftHeight =\r\n\t\t\tthis.imageData[(baseX + 0) * 4 + (baseZ + 1) * this.xResolution * 4] /\r\n\t\t\t255.0;\r\n\t\tlet topLeftHeight =\r\n\t\t\tthis.imageData[(baseX + 0) * 4 + (baseZ + 0) * this.xResolution * 4] /\r\n\t\t\t255.0;\r\n\t\tlet bottomRightHeight =\r\n\t\t\tthis.imageData[(baseX + 1) * 4 + (baseZ + 1) * this.xResolution * 4] /\r\n\t\t\t255.0;\r\n\r\n\t\tif ((baseZ + baseX) % 2 == 0) {\r\n\t\t\t// Because of the zig-zagging mentioned in the createPlane indices set up\r\n\t\t\t/*\r\n            Base\r\n            |\r\n            v\r\n            +--------+ x\r\n            |\\    A  |\r\n            |   \\    |\r\n            | B    \\ |\r\n            +--------+\r\n            z\r\n            */\r\n\t\t\tif (diffX > diffZ) {\r\n\t\t\t\t// A\r\n\t\t\t\tlet kx = topLeftHeight - topRightHeight;\r\n\t\t\t\tlet kz = bottomRightHeight - topRightHeight;\r\n\t\t\t\tdiffX = 1 - diffX;\r\n\t\t\t\treturn topRightHeight + kx * diffX + kz * diffZ;\r\n\t\t\t} else {\r\n\t\t\t\t// B\r\n\t\t\t\tlet kx = bottomRightHeight - bottomLeftHeight;\r\n\t\t\t\tlet kz = topLeftHeight - bottomLeftHeight;\r\n\t\t\t\tdiffZ = 1 - diffZ;\r\n\t\t\t\treturn bottomLeftHeight + kx * diffX + kz * diffZ;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t/*\r\n            Base\r\n            |\r\n            v\r\n            +--------+ x\r\n            |  A    /|\r\n            |    /   |\r\n            | /    B |\r\n            +--------+\r\n            z\r\n            */\r\n\t\t\tif (diffX < 1 - diffZ) {\r\n\t\t\t\t// A\r\n\t\t\t\tlet kx = topRightHeight - topLeftHeight;\r\n\t\t\t\tlet kz = bottomLeftHeight - topLeftHeight;\r\n\t\t\t\treturn topLeftHeight + kx * diffX + kz * diffZ;\r\n\t\t\t} else {\r\n\t\t\t\t// B\r\n\t\t\t\tlet kx = bottomLeftHeight - bottomRightHeight;\r\n\t\t\t\tlet kz = topRightHeight - bottomRightHeight;\r\n\t\t\t\tdiffX = 1 - diffX;\r\n\t\t\t\tdiffZ = 1 - diffZ;\r\n\t\t\t\treturn bottomRightHeight + kx * diffX + kz * diffZ;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tgetNormal(x: number, z: number): Vec3 {\r\n\t\tlet xCoord = Math.round(x / this.xQuadSize);\r\n\t\tlet zCoord = Math.round(z / this.zQuadSize);\r\n\t\tif (\r\n\t\t\txCoord < 0 ||\r\n\t\t\txCoord > this.xResolution - 1 ||\r\n\t\t\tzCoord < 0 ||\r\n\t\t\tzCoord > this.zResolution - 1\r\n\t\t) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tlet normal = new Vec3([\r\n\t\t\tthis.vertices[zCoord * this.xResolution * 8 + xCoord * 8 + 3],\r\n\t\t\tthis.vertices[zCoord * this.xResolution * 8 + xCoord * 8 + 4],\r\n\t\t\tthis.vertices[zCoord * this.xResolution * 8 + xCoord * 8 + 5],\r\n\t\t]);\r\n\r\n\t\treturn normal;\r\n\t}\r\n\r\n\tgetVertices() {\r\n\t\treturn this.vertices;\r\n\t}\r\n\r\n\tdraw() {\r\n\t\tthis.bindVAO();\r\n\t\tgl.drawElements(gl.TRIANGLES, this.indices.length, gl.UNSIGNED_INT, 0);\r\n\t}\r\n}\r\n","import GraphicsObject from \"./GraphicsObject\";\r\nimport Vec3 from \"../Maths/Vec3\";\r\nimport ShaderProgram from \"../ShaderPrograms/ShaderProgram\";\r\nimport Triangle from \"../Physics/Shapes/Triangle\";\r\nimport { gl } from \"../../main\";\r\n\r\nexport default class Mesh extends GraphicsObject {\r\n\t// Protected\r\n\tprotected vertices: Float32Array;\r\n\r\n\tconstructor(shaderProgram: ShaderProgram, vertices: Float32Array) {\r\n\t\tsuper(shaderProgram);\r\n\r\n\t\tthis.vertices = vertices;\r\n\t\tthis.setVertexData(this.vertices);\r\n\t}\r\n\r\n\tsetupTriangles(triangles: Array<Triangle>) {\r\n\t\ttriangles.length = 0; // Clear triangles\r\n\t\tfor (let i = 0; i < this.vertices.length; i += 8 * 3) {\r\n\t\t\t// Go through the vertices\r\n\t\t\t// Save the positions as shapes in the input array\r\n\t\t\tconst length = triangles.push(new Triangle());\r\n\t\t\ttriangles[length - 1].setVertices(\r\n\t\t\t\tnew Vec3([\r\n\t\t\t\t\tthis.vertices[i],\r\n\t\t\t\t\tthis.vertices[i + 1],\r\n\t\t\t\t\tthis.vertices[i + 2],\r\n\t\t\t\t]),\r\n\t\t\t\tnew Vec3([\r\n\t\t\t\t\tthis.vertices[i + 8],\r\n\t\t\t\t\tthis.vertices[i + 8 + 1],\r\n\t\t\t\t\tthis.vertices[i + 8 + 2],\r\n\t\t\t\t]),\r\n\t\t\t\tnew Vec3([\r\n\t\t\t\t\tthis.vertices[i + 16],\r\n\t\t\t\t\tthis.vertices[i + 16 + 1],\r\n\t\t\t\t\tthis.vertices[i + 16 + 2],\r\n\t\t\t\t])\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tgetVertexPositions(): Array<Vec3> {\r\n\t\tlet returnArr = new Array<Vec3>();\r\n\t\tfor (let i = 0; i < this.vertices.length; i += 8) {\r\n\t\t\treturnArr.push(\r\n\t\t\t\tnew Vec3([this.vertices[i], this.vertices[i + 1], this.vertices[i + 2]])\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn returnArr;\r\n\t}\r\n\r\n\tdraw() {\r\n\t\tthis.bindVAO();\r\n\t\tgl.drawArrays(gl.TRIANGLES, 0, this.vertices.length / 8);\r\n\t}\r\n}\r\n","import { SAT } from \"../Maths/SAT\";\r\nimport Vec3 from \"../Maths/Vec3\";\r\nimport { IntersectionTester } from \"../Physics/IntersectionTester\";\r\nimport OBB from \"../Physics/Shapes/OBB\";\r\nimport Ray from \"../Physics/Shapes/Ray\";\r\nimport Shape from \"../Physics/Shapes/Shape\";\r\nimport Triangle from \"../Physics/Shapes/Triangle\";\r\n\r\nclass TreeNode {\r\n\tobb: OBB;\r\n\tsize: number;\r\n\tposition: Vec3;\r\n\tchildren: Array<TreeNode>;\r\n\tcontent: Array<Shape>;\r\n\r\n\tconstructor(size: number, position: Vec3) {\r\n\t\tthis.obb = new OBB();\r\n\t\tthis.size = size;\r\n\t\tthis.position = position;\r\n\t\tlet halfSize = size * 0.5;\r\n\t\tthis.obb.setMinAndMaxVectors(\r\n\t\t\tnew Vec3([-halfSize, -halfSize, -halfSize]).add(this.position),\r\n\t\t\tnew Vec3([halfSize, halfSize, halfSize]).add(this.position)\r\n\t\t);\r\n\r\n\t\tthis.children = new Array<TreeNode>();\r\n\t\tthis.content = new Array<Shape>();\r\n\t}\r\n\r\n\t/**\r\n\t * Create 8 child nodes\r\n\t * @returns if new children was created. Will be false if there already exists children for this node or the sizes of the children would be smaller than minNodeSize.\r\n\t */\r\n\tprivate createChildren(minNodeSize: number): boolean {\r\n\t\tlet halfSize = this.size * 0.5;\r\n\t\tif (this.children.length == 0 && halfSize >= minNodeSize) {\r\n\t\t\tlet quarterSize = this.size * 0.25;\r\n\t\t\tfor (let x = -1; x < 2; x += 2) {\r\n\t\t\t\tfor (let y = -1; y < 2; y += 2) {\r\n\t\t\t\t\tfor (let z = -1; z < 2; z += 2) {\r\n\t\t\t\t\t\tthis.children.push(\r\n\t\t\t\t\t\t\tnew TreeNode(\r\n\t\t\t\t\t\t\t\thalfSize,\r\n\t\t\t\t\t\t\t\tnew Vec3([\r\n\t\t\t\t\t\t\t\t\tx * quarterSize,\r\n\t\t\t\t\t\t\t\t\ty * quarterSize,\r\n\t\t\t\t\t\t\t\t\tz * quarterSize,\r\n\t\t\t\t\t\t\t\t]).add(this.position)\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprivate checkIfContains(shape: Shape) {\r\n\t\tlet minVec = new Vec3(this.position).subtract([\r\n\t\t\tthis.size / 2.0,\r\n\t\t\tthis.size / 2.0,\r\n\t\t\tthis.size / 2.0,\r\n\t\t]);\r\n\t\tlet maxVec = new Vec3(this.position).add([\r\n\t\t\tthis.size / 2.0,\r\n\t\t\tthis.size / 2.0,\r\n\t\t\tthis.size / 2.0,\r\n\t\t]);\r\n\t\tlet shapeVertices = shape.getTransformedVertices();\r\n\t\tfor (let vertex of shapeVertices) {\r\n\t\t\tlet returnVal = true;\r\n\t\t\tfor (let i = 0; i < 3; i++) {\r\n\t\t\t\tif (minVec[i] > vertex[i] || vertex[i] > maxVec[i]) {\r\n\t\t\t\t\treturnVal = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (returnVal) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tsubdivideTree(minNodeSize: number) {\r\n\t\tthis.createChildren(minNodeSize);\r\n\r\n\t\tfor (let child of this.children) {\r\n\t\t\tchild.subdivideTree(minNodeSize);\r\n\t\t}\r\n\t}\r\n\r\n\taddShape(shape: Shape, minNodeSize: number, maxShapesPerNode: number) {\r\n\t\tif (\r\n\t\t\tthis.checkIfContains(shape) &&\r\n\t\t\tIntersectionTester.identifyIntersection([shape], [this.obb])\r\n\t\t) {\r\n\t\t\tif (this.children.length == 0) {\r\n\t\t\t\t// Leaf node\r\n\t\t\t\tif (this.content.length >= maxShapesPerNode) {\r\n\t\t\t\t\t// New children are needed\r\n\t\t\t\t\tthis.createChildren(minNodeSize); // This will create children if the size of the child nodes are still bigger than the minNodeSize\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (this.children.length == 0) {\r\n\t\t\t\t// Still leaf node\r\n\t\t\t\tthis.content.push(shape);\r\n\t\t\t} else {\r\n\t\t\t\t// No longer leaf node\r\n\t\t\t\t// Add all the content from this node to child nodes instead\r\n\t\t\t\tfor (let shape of this.content) {\r\n\t\t\t\t\tfor (let child of this.children) {\r\n\t\t\t\t\t\tchild.addShape(shape, minNodeSize, maxShapesPerNode);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.content.length = 0;\r\n\r\n\t\t\t\t// Keep going deeper\r\n\t\t\t\tfor (let child of this.children) {\r\n\t\t\t\t\tchild.addShape(shape, minNodeSize, maxShapesPerNode);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tsetModelMatrix(modelMatrix: Matrix4) {\r\n\t\tthis.obb.setTransformMatrix(modelMatrix);\r\n\r\n\t\tfor (const shape of this.content) {\r\n\t\t\tshape.setTransformMatrix(modelMatrix);\r\n\t\t}\r\n\r\n\t\tfor (const child of this.children) {\r\n\t\t\tchild.setModelMatrix(modelMatrix);\r\n\t\t}\r\n\t}\r\n\r\n\tprune() {\r\n\t\tfor (let i = 0; i < this.children.length; i++) {\r\n\t\t\tthis.children[i].prune();\r\n\r\n\t\t\tif (\r\n\t\t\t\tthis.children[i].content.length == 0 &&\r\n\t\t\t\tthis.children[i].children.length == 0\r\n\t\t\t) {\r\n\t\t\t\tthis.children.splice(i, 1);\r\n\t\t\t\ti--;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tupdateBox() {\r\n\t\tthis.obb.setUpdateNeeded();\r\n\r\n\t\tfor (const child of this.children) {\r\n\t\t\tchild.updateBox();\r\n\t\t}\r\n\t}\r\n\r\n\tgetShapesForCollision(boundingBox: OBB, shapeArray: Array<Shape>) {\r\n\t\tif (IntersectionTester.identifyIntersection([boundingBox], [this.obb])) {\r\n\t\t\tfor (const child of this.children) {\r\n\t\t\t\tchild.getShapesForCollision(boundingBox, shapeArray);\r\n\t\t\t}\r\n\r\n\t\t\tfor (const shape of this.content) {\r\n\t\t\t\tshapeArray.push(shape);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tgetShapesForRayCast(\r\n\t\tray: Ray,\r\n\t\tshapeArray: Array<Shape>,\r\n\t\tmaxDistance: number = Infinity\r\n\t) {\r\n\t\tif (IntersectionTester.doRayCast(ray, [this.obb], maxDistance) >= 0.0) {\r\n\t\t\tfor (const child of this.children) {\r\n\t\t\t\tchild.getShapesForRayCast(ray, shapeArray, maxDistance);\r\n\t\t\t}\r\n\r\n\t\t\tfor (const shape of this.content) {\r\n\t\t\t\tshapeArray.push(shape);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprint(): string {\r\n\t\tlet result = \"{\\n\";\r\n\t\tresult += \"s\" + this.size + \"\\n\";\r\n\t\tresult += \"p\" + this.position + \"\\n\";\r\n\t\tresult += \"[\\n\";\r\n\t\tfor (let shape of this.content) {\r\n\t\t\tresult +=\r\n\t\t\t\t\"t[\" +\r\n\t\t\t\tshape.getOriginalVertices()[0] +\r\n\t\t\t\t\"], [\" +\r\n\t\t\t\tshape.getOriginalVertices()[1] +\r\n\t\t\t\t\"], [\" +\r\n\t\t\t\tshape.getOriginalVertices()[2] +\r\n\t\t\t\t\"]\\n\";\r\n\t\t}\r\n\t\tresult += \"]\\n\";\r\n\t\tif (this.children.length > 0) {\r\n\t\t\tfor (let child of this.children) {\r\n\t\t\t\tresult += child.print();\r\n\t\t\t}\r\n\t\t}\r\n\t\tresult += \"}\\n\";\r\n\r\n\t\treturn result;\r\n\t}\r\n}\r\n\r\nexport default class Octree {\r\n\tbaseNode: TreeNode;\r\n\tminNodeSize: number;\r\n\tmaxShapesPerNode: number;\r\n\r\n\tconstructor(\r\n\t\tminVec: Vec3,\r\n\t\tmaxVec: Vec3,\r\n\t\tsmallestNodeSizeMultiplicator: number,\r\n\t\tmaxShapesPerNode: number\r\n\t) {\r\n\t\tlet baseNodeSize = maxVec.x - minVec.x;\r\n\t\tbaseNodeSize = Math.max(baseNodeSize, maxVec.y - minVec.y);\r\n\t\tbaseNodeSize = Math.max(baseNodeSize, maxVec.z - minVec.z);\r\n\r\n\t\tthis.baseNode = new TreeNode(\r\n\t\t\tbaseNodeSize,\r\n\t\t\tnew Vec3(minVec).add(maxVec).multiply(0.5)\r\n\t\t);\r\n\t\tthis.minNodeSize = baseNodeSize * smallestNodeSizeMultiplicator;\r\n\t\tthis.maxShapesPerNode = maxShapesPerNode;\r\n\t}\r\n\r\n\taddShape(shape: Shape) {\r\n\t\tthis.baseNode.addShape(shape, this.minNodeSize, this.maxShapesPerNode);\r\n\t}\r\n\r\n\taddShapes(shapes: Array<Shape>) {\r\n\t\tfor (let shape of shapes) {\r\n\t\t\tthis.baseNode.addShape(shape, this.minNodeSize, this.maxShapesPerNode);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Update the transform matrix used for the triangles.\r\n\t * @param matrix Optional: Will set a new matrix to use for the triangles. If no matrix is sent, it will use the previously set matrix but mark all triangles to be updated.\r\n\t */\r\n\tsetModelMatrix(matrix?: Matrix4) {\r\n\t\tif (matrix == this.baseNode.obb.getTransformMatrix()) { // Setting the already used matrix\r\n\t\t\t// TODO: This screws us over if transform matrix is the same matrix but has been modified :(\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (matrix) {\r\n\t\t\tthis.baseNode.setModelMatrix(matrix);\r\n\t\t} else {\r\n\t\t\tthis.baseNode.updateBox();\r\n\t\t}\r\n\t}\r\n\r\n\tprune() {\r\n\t\tthis.baseNode.prune();\r\n\t}\r\n\r\n\tgetShapesForCollision(boundingBox: OBB, shapeArray: Array<Shape>) {\r\n\t\tthis.baseNode.getShapesForCollision(boundingBox, shapeArray);\r\n\t}\r\n\r\n\tgetShapesForRayCast(\r\n\t\tray: Ray,\r\n\t\tshapeArray: Array<Shape>,\r\n\t\tmaxDistance: number = Infinity\r\n\t) {\r\n\t\tthis.baseNode.getShapesForRayCast(ray, shapeArray, maxDistance);\r\n\t}\r\n\r\n\tgetDataString() {\r\n\t\tlet output = \"\";\r\n\t\toutput += this.minNodeSize + \"\\n\";\r\n\t\toutput += this.maxShapesPerNode + \"\\n\";\r\n\t\toutput += this.baseNode.print();\r\n\t\treturn output;\r\n\t}\r\n\r\n\tparseOct(input: string) {\r\n\t\tdelete this.baseNode;\r\n\r\n\t\tlet rows = input.split(\"\\n\");\r\n\t\tthis.minNodeSize = parseFloat(rows[0]);\r\n\t\tthis.maxShapesPerNode = parseInt(rows[1]);\r\n\r\n\t\tlet currentNode = this.baseNode;\r\n\t\tlet currentSize = 0.0;\r\n\t\tlet parentQueue = new Array<TreeNode>();\r\n\r\n\t\tfor (let i = 3; i < rows.length; i++) {\r\n\t\t\tlet row = rows[i];\r\n\r\n\t\t\tif (row == \"{\") {\r\n\t\t\t\t// Information for child node starts\r\n\t\t\t} else if (row == \"[\") {\r\n\t\t\t\t// Start of triangles\r\n\t\t\t} else if (row == \"]\") {\r\n\t\t\t\t// End of triangles\r\n\t\t\t} else if (row == \"}\") {\r\n\t\t\t\t// Node over, set currentNode to parent\r\n\t\t\t\tcurrentNode = parentQueue.pop();\r\n\t\t\t} else if (row.startsWith(\"s\")) {\r\n\t\t\t\trow = row.substring(1);\r\n\t\t\t\t// Size of node\r\n\t\t\t\tcurrentSize = parseFloat(row);\r\n\t\t\t} else if (row.startsWith(\"p\")) {\r\n\t\t\t\trow = row.substring(1);\r\n\t\t\t\t// Position of node\r\n\t\t\t\tlet currentPos = new Vec3(row.split(\",\").map((n) => parseFloat(n)));\r\n\r\n\t\t\t\t// The position is the last information needed to create the child node, so we do it\r\n\t\t\t\t// and set currentNode to the new child\r\n\t\t\t\tif (this.baseNode == undefined) {\r\n\t\t\t\t\tthis.baseNode = new TreeNode(currentSize, currentPos);\r\n\t\t\t\t\tcurrentNode = this.baseNode;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Add current node to parent queue\r\n\t\t\t\t\tparentQueue.push(currentNode);\r\n\t\t\t\t\tlet length = currentNode.children.push(\r\n\t\t\t\t\t\tnew TreeNode(currentSize, currentPos)\r\n\t\t\t\t\t);\r\n\t\t\t\t\tcurrentNode = currentNode.children[length - 1];\r\n\t\t\t\t}\r\n\t\t\t} else if (row.startsWith(\"t\")) {\r\n\t\t\t\t// Triangle\r\n\t\t\t\t// t[-3,3,1.5], [-3,3,2.5], [-4,3,1.5]\r\n\t\t\t\trow = row.substring(1);\r\n\t\t\t\tlet points = row.split(\", \");\r\n\t\t\t\tlet tri = new Triangle();\r\n\r\n\t\t\t\ttri.setVertices(\r\n\t\t\t\t\tnew Vec3(\r\n\t\t\t\t\t\tpoints[0]\r\n\t\t\t\t\t\t\t.substring(1, points[0].length - 1)\r\n\t\t\t\t\t\t\t.split(\",\")\r\n\t\t\t\t\t\t\t.map((n) => parseFloat(n))\r\n\t\t\t\t\t),\r\n\t\t\t\t\tnew Vec3(\r\n\t\t\t\t\t\tpoints[1]\r\n\t\t\t\t\t\t\t.substring(1, points[1].length - 1)\r\n\t\t\t\t\t\t\t.split(\",\")\r\n\t\t\t\t\t\t\t.map((n) => parseFloat(n))\r\n\t\t\t\t\t),\r\n\t\t\t\t\tnew Vec3(\r\n\t\t\t\t\t\tpoints[2]\r\n\t\t\t\t\t\t\t.substring(1, points[2].length - 1)\r\n\t\t\t\t\t\t\t.split(\",\")\r\n\t\t\t\t\t\t\t.map((n) => parseFloat(n))\r\n\t\t\t\t\t)\r\n\t\t\t\t);\r\n\r\n\t\t\t\tcurrentNode.content.push(tri);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","import { applicationStartTime, gl } from \"../../main\";\r\n\r\nimport GraphicsObject from \"./GraphicsObject\";\r\nimport Texture from \"../Textures/Texture\";\r\nimport Vec3 from \"../Maths/Vec3\";\r\nimport ShaderProgram from \"../ShaderPrograms/ShaderProgram\";\r\n\r\nexport default class ParticleSpawner extends GraphicsObject {\r\n\ttexture: Texture;\r\n\tfadePerSecond: number;\r\n\tsizeChangePerSecond: number;\r\n\r\n\t// Private\r\n\tprivate numParticles: number;\r\n\tprivate vertices: Float32Array;\r\n\tprivate indices: Int32Array;\r\n\tprivate instanceVBO: WebGLBuffer;\r\n\r\n\tconstructor(\r\n\t\tshaderProgram: ShaderProgram,\r\n\t\ttexture: Texture,\r\n\t\tnumberOfStartingParticles: number = 0\r\n\t) {\r\n\t\tsuper(shaderProgram);\r\n\r\n\t\tthis.texture = texture;\r\n\r\n\t\tthis.bindVAO();\r\n\t\tthis.instanceVBO = gl.createBuffer();\r\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.instanceVBO);\r\n\t\tgl.bufferData(\r\n\t\t\tgl.ARRAY_BUFFER,\r\n\t\t\tnumberOfStartingParticles * 11 * 4,\r\n\t\t\tgl.DYNAMIC_DRAW\r\n\t\t);\r\n\t\tshaderProgram.setupInstancedVertexAttributePointers();\r\n\t\tthis.unbindVAO();\r\n\r\n\t\t// prettier-ignore\r\n\t\tthis.vertices = new Float32Array([ \r\n            // positions  // uv\r\n            -0.5,  0.5,   0.0, 1.0,\r\n            -0.5, -0.5,   0.0, 0.0,\r\n             0.5, -0.5,   1.0, 0.0,\r\n             0.5,  0.5,   1.0, 1.0,\r\n        ]);\r\n\r\n\t\t// prettier-ignore\r\n\t\tthis.indices = new Int32Array([\r\n            0, 1, 2,\r\n            0, 2, 3,\r\n        ]);\r\n\t\tthis.setVertexData(this.vertices);\r\n\t\tthis.setIndexData(this.indices);\r\n\r\n\t\t// All starting particles are initialized as size and position 0, so they wont be visable unless manually changed\r\n\t\tthis.numParticles = numberOfStartingParticles;\r\n\r\n\t\tthis.fadePerSecond = 0.0;\r\n\t\tthis.sizeChangePerSecond = 1.0;\r\n\t}\r\n\r\n\tsetNumParticles(amount: number) {\r\n\t\tthis.numParticles = amount;\r\n\r\n\t\tthis.bindVAO();\r\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.instanceVBO);\r\n\t\tgl.bufferData(gl.ARRAY_BUFFER, this.numParticles * 11 * 4, gl.DYNAMIC_DRAW);\r\n\t\tthis.unbindVAO();\r\n\t}\r\n\r\n\tgetNumberOfParticles(): number {\r\n\t\treturn this.numParticles;\r\n\t}\r\n\r\n\tsetParticleData(\r\n\t\tparticleIndex: number,\r\n\t\tstartPosition: Vec3,\r\n\t\tsize: number,\r\n\t\tstartVel: Vec3,\r\n\t\tacceleration: Vec3\r\n\t): boolean {\r\n\t\tif (particleIndex > this.numParticles) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tlet data = new Float32Array([\r\n\t\t\tstartPosition.x,\r\n\t\t\tstartPosition.y,\r\n\t\t\tstartPosition.z,\r\n\t\t\tsize,\r\n\t\t\tstartVel.x,\r\n\t\t\tstartVel.y,\r\n\t\t\tstartVel.z,\r\n\t\t\t(Date.now() - applicationStartTime) * 0.001,\r\n\t\t\tacceleration.x,\r\n\t\t\tacceleration.y,\r\n\t\t\tacceleration.z,\r\n\t\t]);\r\n\r\n\t\tthis.bufferSubDataUpdate(particleIndex * 11, data);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tsetParticleStartPosition(particleIndex: number, position: Vec3): boolean {\r\n\t\tif (particleIndex > this.numParticles) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.bufferSubDataUpdate(particleIndex * 11, new Float32Array(position));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tsetParticleSize(particleIndex: number, size: number): boolean {\r\n\t\tif (particleIndex > this.numParticles) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.bufferSubDataUpdate(particleIndex * 11 + 3, new Float32Array([size]));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tsetParticleStartVelocity(particleIndex: number, vel: Vec3): boolean {\r\n\t\tif (particleIndex > this.numParticles) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.bufferSubDataUpdate(particleIndex * 11 + 4, new Float32Array(vel));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tsetParticleStartTime(particleIndex: number, time: number): boolean {\r\n\t\tif (particleIndex > this.numParticles) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.bufferSubDataUpdate(particleIndex * 11 + 7, new Float32Array([time]));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tresetParticleStartTime(particleIndex: number): boolean {\r\n\t\tif (particleIndex > this.numParticles) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.bufferSubDataUpdate(\r\n\t\t\tparticleIndex * 11 + 7,\r\n\t\t\tnew Float32Array([(Date.now() - applicationStartTime) * 0.001])\r\n\t\t);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tsetParticleAcceleration(particleIndex: number, acc: Vec3): boolean {\r\n\t\tif (particleIndex > this.numParticles) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.bufferSubDataUpdate(particleIndex * 11 + 8, new Float32Array(acc));\r\n\t\treturn true;\r\n\t}\r\n\r\n\tprivate bufferSubDataUpdate(start: number, data: Float32Array): boolean {\r\n\t\tif (start > this.numParticles * 11) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.bindVAO();\r\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.instanceVBO);\r\n\t\tgl.bufferSubData(gl.ARRAY_BUFFER, start * 4, data);\r\n\t\tthis.unbindVAO();\r\n\t\treturn true;\r\n\t}\r\n\r\n\tdraw() {\r\n\t\tthis.bindVAO();\r\n\r\n\t\tthis.texture.bind(0);\r\n\t\tgl.uniform1f(\r\n\t\t\tthis.shaderProgram.getUniformLocation(\"fadePerSecond\")[0],\r\n\t\t\tthis.fadePerSecond\r\n\t\t);\r\n\t\tgl.uniform1f(\r\n\t\t\tthis.shaderProgram.getUniformLocation(\"sizeChangePerSecond\")[0],\r\n\t\t\tthis.sizeChangePerSecond\r\n\t\t);\r\n\r\n\t\tgl.drawElementsInstanced(\r\n\t\t\tgl.TRIANGLES,\r\n\t\t\t6,\r\n\t\t\tgl.UNSIGNED_INT,\r\n\t\t\t0,\r\n\t\t\tthis.getNumberOfParticles()\r\n\t\t);\r\n\t\tthis.unbindVAO();\r\n\t}\r\n}\r\n","import GraphicsObject from \"./GraphicsObject\";\r\nimport Texture from \"../Textures/Texture\";\r\nimport ShaderProgram from \"../ShaderPrograms/ShaderProgram\";\r\nimport Triangle from \"../Physics/Shapes/Triangle\";\r\nimport Vec3 from \"../Maths/Vec3\";\r\nimport { gl } from \"../../main\";\r\n\r\nexport default class PhongQuad extends GraphicsObject {\r\n\t// Private\r\n\tprivate vertices: Float32Array;\r\n\tprivate indices: Int32Array;\r\n\r\n\tconstructor(shaderProgram: ShaderProgram) {\r\n\t\tsuper(shaderProgram);\r\n\r\n\t\t// prettier-ignore\r\n\t\tthis.vertices = new Float32Array([ \r\n            // positions        // normals         // uv\r\n            -0.5,  0.5,  0.0,   0.0, 0.0, 1.0,     0.0, 1.0,\r\n            -0.5, -0.5,  0.0,   0.0, 0.0, 1.0,     0.0, 0.0,\r\n             0.5, -0.5,  0.0,   0.0, 0.0, 1.0,     1.0, 0.0,\r\n             0.5,  0.5,  0.0,   0.0, 0.0, 1.0,     1.0, 1.0,\r\n        ]);\r\n\r\n\t\t// prettier-ignore\r\n\t\tthis.indices = new Int32Array([\r\n            0, 1, 2,\r\n            0, 2, 3,\r\n        ]);\r\n\t\tthis.setVertexData(this.vertices);\r\n\t\tthis.setIndexData(this.indices);\r\n\t}\r\n\r\n\tsetupTriangles(triangles: Array<Triangle>) {\r\n\t\ttriangles.length = 0; // Clear triangles\r\n\t\tfor (let i = 0; i < this.indices.length; i += 3) {\r\n\t\t\t// Go through the vertices\r\n\t\t\t// Save the positions as shapes in the input array\r\n\t\t\tconst length = triangles.push(new Triangle());\r\n\t\t\ttriangles[length - 1].setVertices(\r\n\t\t\t\tnew Vec3([\r\n\t\t\t\t\tthis.vertices[this.indices[i] * 8],\r\n\t\t\t\t\tthis.vertices[this.indices[i] * 8 + 1],\r\n\t\t\t\t\tthis.vertices[this.indices[i] * 8 + 2],\r\n\t\t\t\t]),\r\n\t\t\t\tnew Vec3([\r\n\t\t\t\t\tthis.vertices[this.indices[i + 1] * 8],\r\n\t\t\t\t\tthis.vertices[this.indices[i + 1] * 8 + 1],\r\n\t\t\t\t\tthis.vertices[this.indices[i + 1] * 8 + 2],\r\n\t\t\t\t]),\r\n\t\t\t\tnew Vec3([\r\n\t\t\t\t\tthis.vertices[this.indices[i + 2] * 8],\r\n\t\t\t\t\tthis.vertices[this.indices[i + 2] * 8 + 1],\r\n\t\t\t\t\tthis.vertices[this.indices[i + 2] * 8 + 2],\r\n\t\t\t\t])\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tgetVertexPositions(): Array<Vec3> {\r\n\t\tlet returnArr = new Array<Vec3>();\r\n\t\tfor (let i = 0; i < this.vertices.length; i += 8) {\r\n\t\t\treturnArr.push(\r\n\t\t\t\tnew Vec3([this.vertices[i], this.vertices[i + 1], this.vertices[i + 2]])\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn returnArr;\r\n\t}\r\n\r\n\tdraw() {\r\n\t\tthis.bindVAO();\r\n\t\tgl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_INT, 0);\r\n\t}\r\n}\r\n","import GraphicsObject from \"./GraphicsObject\";\r\nimport Texture from \"../Textures/Texture\";\r\nimport ShaderProgram from \"../ShaderPrograms/ShaderProgram\";\r\nimport { gl } from \"../../main\";\r\n\r\nexport default class ScreenQuad extends GraphicsObject {\r\n\ttextures: Array<Texture>;\r\n\r\n\t// Private\r\n\tprivate vertices: Float32Array;\r\n\tprivate indices: Int32Array;\r\n\r\n\tconstructor(shaderProgram: ShaderProgram, textures: Array<Texture>) {\r\n\t\tsuper(shaderProgram);\r\n\r\n\t\t// prettier-ignore\r\n\t\tthis.vertices = new Float32Array([ \r\n            // positions        // uv\r\n            -1.0,  1.0,     0.0, 1.0,\r\n            -1.0, -1.0,     0.0, 0.0,\r\n             1.0, -1.0,     1.0, 0.0,\r\n             1.0,  1.0,     1.0, 1.0,\r\n        ]);\r\n\r\n\t\t// prettier-ignore\r\n\t\tthis.indices = new Int32Array([\r\n            0, 1, 2,\r\n            0, 2, 3,\r\n        ]);\r\n\r\n\t\tthis.setVertexData(this.vertices);\r\n\t\tthis.setIndexData(this.indices);\r\n\r\n\t\tthis.textures = textures;\r\n\r\n\t\tfor (let texture of this.textures) {\r\n\t\t\ttexture.setTexParameterI(gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n\t\t\ttexture.setTexParameterI(gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\t\t}\r\n\t}\r\n\r\n\tdraw(bindTextures: boolean = true) {\r\n\t\tthis.bindVAO();\r\n\r\n\t\tif (bindTextures) {\r\n\t\t\tfor (let i = 0; i < this.textures.length; i++) {\r\n\t\t\t\tthis.textures[i].bind(i);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tgl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_INT, 0);\r\n\t}\r\n}\r\n","import GraphicsObject from \"./GraphicsObject\";\r\nimport ShaderProgram from \"../ShaderPrograms/ShaderProgram\";\r\nimport { gl } from \"../../main\";\r\nimport CubeMap from \"../Textures/CubeMap\";\r\nimport Texture from \"../Textures/Texture\";\r\n\r\nexport default class Skybox extends GraphicsObject {\r\n\t// Public\r\n\ttexture: CubeMap;\r\n\r\n\t// Private\r\n\tprivate vertices: Float32Array;\r\n\tprivate indices: Int32Array;\r\n\r\n\tconstructor(shaderProgram: ShaderProgram, texture: CubeMap) {\r\n\t\tsuper(shaderProgram);\r\n\r\n\t\t// prettier-ignore\r\n\t\tthis.vertices = new Float32Array([ \r\n            // positions\r\n            -0.5,  0.5, -0.5,\t/*0*/\r\n            -0.5, -0.5, -0.5,\t/*1*/\r\n             0.5, -0.5, -0.5,\t/*2*/\r\n             0.5,  0.5, -0.5,\t/*3*/\r\n            -0.5,  0.5,  0.5,\t/*4*/\r\n            -0.5, -0.5,  0.5,\t/*5*/\r\n             0.5, -0.5,  0.5,\t/*6*/\r\n             0.5,  0.5,  0.5,\t/*7*/\r\n        ]);\r\n\r\n\t\t// prettier-ignore\r\n\t\tthis.indices = new Int32Array([\r\n            0, 1, 2,\r\n            0, 2, 3,\r\n\t\t\t\r\n\t\t\t3, 2, 6,\r\n\t\t\t3, 6, 7,\r\n\r\n\t\t\t7, 6, 5,\r\n\t\t\t7, 5, 4,\r\n\r\n\t\t\t4, 5, 1,\r\n\t\t\t4, 1, 0,\r\n\r\n\t\t\t4, 0, 3,\r\n\t\t\t4, 3, 7,\r\n\r\n\t\t\t1, 5, 6, \r\n\t\t\t1, 6, 2,\r\n        ]);\r\n\t\tthis.setVertexData(this.vertices);\r\n\t\tthis.setIndexData(this.indices);\r\n\r\n\t\tthis.texture = texture;\r\n\t}\r\n\r\n\tdraw() {\r\n\t\tthis.bindVAO();\r\n\r\n\t\tthis.texture.bind();\r\n\r\n\t\tgl.drawElements(gl.TRIANGLES, this.indices.length, gl.UNSIGNED_INT, 0);\r\n\t}\r\n}\r\n","import IntersectionInformation from \"./IntersectionInformation\";\r\nimport Vec3 from \"../Maths/Vec3\";\r\n\r\nexport module CollisionSolver {\r\n\texport function getTranslationNeeded(\r\n\t\tintersectionInformation: Array<IntersectionInformation>\r\n\t): Vec3 {\r\n\t\tif (intersectionInformation.length == 0) {\r\n\t\t\treturn new Vec3();\r\n\t\t}\r\n\r\n\t\t// Displace along the axis which has the most depth\r\n\t\tlet resultingVec = new Vec3();\r\n\t\tlet maxDepth = 0.0;\r\n\t\tfor (let inf of intersectionInformation) {\r\n\t\t\t// Only displace for triangles if it is along the normal\r\n\t\t\tif (inf.shapeB.getTransformedNormals().length == 1) {\r\n\t\t\t\tif (inf.axis.dot(inf.shapeB.getTransformedNormals()[0]) < 0.99) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (inf.depth > maxDepth) {\r\n\t\t\t\tresultingVec.deepAssign(inf.axis);\r\n\t\t\t\tmaxDepth = inf.depth;\r\n\t\t\t}\r\n\t\t}\r\n\t\tresultingVec.multiply(maxDepth);\r\n\r\n\t\treturn resultingVec;\r\n\t}\r\n}\r\n","import Vec3 from \"../Maths/Vec3\";\r\nimport Shape from \"./Shapes/Shape\";\r\n\r\nexport default class IntersectionInformation {\r\n\taxis: Vec3;\r\n\tdepth: number;\r\n\tpoint: Vec3;\r\n\tshapeA: Shape;\r\n\tshapeB: Shape;\r\n\r\n\tconstructor(\r\n\t\taxis: Vec3,\r\n\t\tdepth: number,\r\n\t\tpoint: Vec3,\r\n\t\tshapeA: Shape,\r\n\t\tshapeB: Shape\r\n\t) {\r\n\t\tthis.axis = new Vec3(axis);\r\n\t\tthis.depth = depth;\r\n\t\tthis.point = new Vec3(point);\r\n\t\tthis.shapeA = shapeA;\r\n\t\tthis.shapeB = shapeB;\r\n\t}\r\n}\r\n","import { SAT } from \"../Maths/SAT\";\r\nimport Vec3 from \"../Maths/Vec3\";\r\nimport IntersectionInformation from \"./IntersectionInformation\";\r\nimport Ray from \"./Shapes/Ray\";\r\nimport Shape from \"./Shapes/Shape\";\r\n\r\nexport module IntersectionTester {\r\n\t/**\r\n\t * Will check if there is an intersection between two meshes.\r\n\t * @param shapeArrayA List of shapes in physical object A.\r\n\t * @param shapeArrayB List of shapes in physical object B.\r\n\t * @returns if there is an intersection.\r\n\t */\r\n\texport function identifyIntersection(\r\n\t\tshapeArrayA: Array<Shape>,\r\n\t\tshapeArrayB: Array<Shape>\r\n\t): boolean {\r\n\t\tlet intersectionAxis = new Vec3();\r\n\t\tlet intersectionDepth = { depth: Infinity };\r\n\t\tfor (let shapeA of shapeArrayA) {\r\n\t\t\tfor (let shapeB of shapeArrayB) {\r\n\t\t\t\tif (\r\n\t\t\t\t\tSAT.getIntersection3D(\r\n\t\t\t\t\t\tshapeA,\r\n\t\t\t\t\t\tshapeB,\r\n\t\t\t\t\t\tintersectionAxis,\r\n\t\t\t\t\t\tintersectionDepth\r\n\t\t\t\t\t)\r\n\t\t\t\t) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\t/**\r\n\t * Finds the intersection information (axises, depths, and points) between two physical objects, if they intersect\r\n\t * @param shapeArrayA List of shapes in physical object A.\r\n\t * @param shapeArrayB List of shapes in physical object B.\r\n\t * @param intersectionInformation An array that gets filled with information about all intersections happening between the two objects.\r\n\t * @returns If there is an intersection.\r\n\t */\r\n\texport function identifyIntersectionInformation(\r\n\t\tshapeArrayA: Array<Shape>,\r\n\t\tshapeArrayB: Array<Shape>,\r\n\t\tintersectionInformation: Array<IntersectionInformation>\r\n\t): boolean {\r\n\t\tlet intersecting = false;\r\n\t\tlet tempIntersectionAxis = new Vec3();\r\n\t\tlet tempIntersectionDepth = { depth: Infinity };\r\n\r\n\t\tfor (let shapeA of shapeArrayA) {\r\n\t\t\tfor (let shapeB of shapeArrayB) {\r\n\t\t\t\tif (\r\n\t\t\t\t\tSAT.getIntersection3D(\r\n\t\t\t\t\t\tshapeA,\r\n\t\t\t\t\t\tshapeB,\r\n\t\t\t\t\t\ttempIntersectionAxis,\r\n\t\t\t\t\t\ttempIntersectionDepth\r\n\t\t\t\t\t)\r\n\t\t\t\t) {\r\n\t\t\t\t\tintersecting = true;\r\n\r\n\t\t\t\t\t// Save information about intersection\r\n\t\t\t\t\tintersectionInformation.push(\r\n\t\t\t\t\t\tnew IntersectionInformation(\r\n\t\t\t\t\t\t\ttempIntersectionAxis,\r\n\t\t\t\t\t\t\ttempIntersectionDepth.depth,\r\n\t\t\t\t\t\t\tSAT.getIntersectionPoint(shapeA, shapeB, tempIntersectionAxis),\r\n\t\t\t\t\t\t\tshapeA,\r\n\t\t\t\t\t\t\tshapeB\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn intersecting;\r\n\t}\r\n\r\n\t/**\r\n\t * Finds the closest ray cast hit between a ray and an array of shapes\r\n\t * @param ray Ray shape\r\n\t * @param shapeArray shape array to cast against\r\n\t * @param maxDistance The furthest allowed hit\r\n\t * @param breakOnFirstHit If the first hit should be returned immediately\r\n\t * @returns the closest hit\r\n\t */\r\n\texport function doRayCast(\r\n\t\tray: Ray,\r\n\t\tshapeArray: Array<Shape>,\r\n\t\tmaxDistance: number = Infinity,\r\n\t\tbreakOnFirstHit: boolean = false\r\n\t): number {\r\n\t\tlet closestHit = -1.0;\r\n\r\n\t\tfor (const shape of shapeArray) {\r\n\t\t\tlet dist = SAT.getContinousIntersection3D(\r\n\t\t\t\tray,\r\n\t\t\t\tshape,\r\n\t\t\t\tray.getDir(),\r\n\t\t\t\tnew Vec3([0.0, 0.0, 0.0]),\r\n\t\t\t\tmaxDistance\r\n\t\t\t);\r\n\t\t\tif (dist >= 0.0 && (dist < closestHit || closestHit < 0)) {\r\n\t\t\t\tclosestHit = dist;\r\n\t\t\t\tmaxDistance = closestHit;\r\n\r\n\t\t\t\tif (breakOnFirstHit) {\r\n\t\t\t\t\treturn closestHit;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn closestHit;\r\n\t}\r\n}\r\n","import Matrix3 from \"../../Maths/Matrix3\";\r\nimport Vec3 from \"../../Maths/Vec3\";\r\nimport Shape from \"./Shape\";\r\n\r\nexport default class OBB extends Shape {\r\n\tprivate originalVertices: Array<Vec3>;\r\n\tprivate originalNormals: Array<Vec3>;\r\n\r\n\tprivate transformedVertices: Array<Vec3>;\r\n\tprivate transformedNormals: Array<Vec3>;\r\n\r\n\tprivate transformMatrix: Matrix4;\r\n\tprivate verticesNeedsUpdate: boolean;\r\n\tprivate normalsNeedsUpdate: boolean;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.originalVertices = new Array<Vec3>();\r\n\t\tthis.originalNormals = new Array<Vec3>();\r\n\t\tthis.transformedVertices = new Array<Vec3>();\r\n\t\tthis.transformedNormals = new Array<Vec3>();\r\n\t\tthis.transformMatrix = new Matrix4(null);\r\n\t\tthis.verticesNeedsUpdate = false;\r\n\t\tthis.normalsNeedsUpdate = false;\r\n\t}\r\n\r\n\tsetVertices(vertices: Array<Vec3>) {\r\n\t\tthis.originalVertices.length = 0;\r\n\t\tfor (let vert of vertices) {\r\n\t\t\tthis.originalVertices.push(vert);\r\n\t\t}\r\n\r\n\t\tthis.verticesNeedsUpdate = true;\r\n\t}\r\n\r\n\tsetNormals(normals: Array<Vec3>) {\r\n\t\tthis.originalNormals.length = 0;\r\n\t\tfor (let norm of normals) {\r\n\t\t\tthis.originalNormals.push(norm);\r\n\t\t}\r\n\r\n\t\tthis.normalsNeedsUpdate = true;\r\n\t}\r\n\r\n\t/**\r\n\t * Creates an axis aligned bounding box (AABB).\r\n\t * @param minVec Corner for the lower bound.\r\n\t * @param maxVec Corner for the upper bound.\r\n\t */\r\n\tsetMinAndMaxVectors(minVec: Vec3, maxVec: Vec3) {\r\n\t\tthis.originalNormals.length = 0;\r\n\t\tthis.originalNormals.push(new Vec3([1.0, 0.0, 0.0]));\r\n\t\tthis.originalNormals.push(new Vec3([0.0, 1.0, 0.0]));\r\n\t\tthis.originalNormals.push(new Vec3([0.0, 0.0, 1.0]));\r\n\r\n\t\tthis.originalVertices.length = 0;\r\n\r\n\t\tfor (let i = 0; i < 8; i++) {\r\n\t\t\tthis.originalVertices.push(new Vec3([0.0, 0.0, 0.0]));\r\n\t\t}\r\n\r\n\t\tthis.originalVertices[0].deepAssign(minVec);\r\n\t\tthis.originalVertices[1].setValues(minVec.x, minVec.y, maxVec.z);\r\n\t\tthis.originalVertices[2].setValues(minVec.x, maxVec.y, minVec.z);\r\n\t\tthis.originalVertices[3].setValues(minVec.x, maxVec.y, maxVec.z);\r\n\t\tthis.originalVertices[4].setValues(maxVec.x, minVec.y, minVec.z);\r\n\t\tthis.originalVertices[5].setValues(maxVec.x, minVec.y, maxVec.z);\r\n\t\tthis.originalVertices[6].setValues(maxVec.x, maxVec.y, minVec.z);\r\n\t\tthis.originalVertices[7].deepAssign(maxVec);\r\n\r\n\t\tthis.normalsNeedsUpdate = true;\r\n\t\tthis.verticesNeedsUpdate = true;\r\n\t}\r\n\r\n\tsetUpdateNeeded() {\r\n\t\tthis.verticesNeedsUpdate = true;\r\n\t\tthis.normalsNeedsUpdate = true;\r\n\t}\r\n\r\n\tsetTransformMatrix(matrix: Matrix4) {\r\n\t\tthis.transformMatrix = matrix;\r\n\t\tthis.verticesNeedsUpdate = true;\r\n\t\tthis.normalsNeedsUpdate = true;\r\n\t}\r\n\r\n\tgetTransformedVertices(): Array<Vec3> {\r\n\t\tif (this.verticesNeedsUpdate) {\r\n\t\t\tthis.transformedVertices.length = 0;\r\n\r\n\t\t\tfor (const originalVertex of this.originalVertices) {\r\n\t\t\t\tlet transformedVertex = this.transformMatrix.multiplyVector4(\r\n\t\t\t\t\tnew Vector4([...originalVertex, 1.0])\r\n\t\t\t\t);\r\n\t\t\t\tlet transformedVertexVec3 = new Vec3([\r\n\t\t\t\t\ttransformedVertex.elements[0],\r\n\t\t\t\t\ttransformedVertex.elements[1],\r\n\t\t\t\t\ttransformedVertex.elements[2],\r\n\t\t\t\t]);\r\n\t\t\t\tthis.transformedVertices.push(transformedVertexVec3);\r\n\t\t\t}\r\n\t\t\tthis.verticesNeedsUpdate = false;\r\n\t\t}\r\n\t\treturn this.transformedVertices;\r\n\t}\r\n\r\n\tgetTransformedNormals(): Array<Vec3> {\r\n\t\tif (this.normalsNeedsUpdate) {\r\n\t\t\tthis.transformedNormals.length = 0;\r\n\r\n\t\t\tthis.getTransformedVertices();\r\n\r\n\t\t\tthis.transformedNormals.push(\r\n\t\t\t\tnew Vec3(this.transformedVertices[0])\r\n\t\t\t\t\t.subtract(this.transformedVertices[1])\r\n\t\t\t\t\t.cross(\r\n\t\t\t\t\t\tnew Vec3(this.transformedVertices[4]).subtract(\r\n\t\t\t\t\t\t\tthis.transformedVertices[0]\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t)\r\n\t\t\t\t\t.normalize()\r\n\t\t\t);\r\n\r\n\t\t\tthis.transformedNormals.push(\r\n\t\t\t\tnew Vec3(this.transformedVertices[0])\r\n\t\t\t\t\t.subtract(this.transformedVertices[1])\r\n\t\t\t\t\t.cross(\r\n\t\t\t\t\t\tnew Vec3(this.transformedVertices[2]).subtract(\r\n\t\t\t\t\t\t\tthis.transformedVertices[0]\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t)\r\n\t\t\t\t\t.normalize()\r\n\t\t\t);\r\n\r\n\t\t\tthis.transformedNormals.push(\r\n\t\t\t\tnew Vec3(this.transformedVertices[0])\r\n\t\t\t\t\t.subtract(this.transformedVertices[2])\r\n\t\t\t\t\t.cross(\r\n\t\t\t\t\t\tnew Vec3(this.transformedVertices[4]).subtract(\r\n\t\t\t\t\t\t\tthis.transformedVertices[0]\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t)\r\n\t\t\t\t\t.normalize()\r\n\t\t\t);\r\n\r\n\t\t\t// let tempMatrix = new Matrix3();\r\n\t\t\t// tempMatrix.fromMatrix4(this.transformMatrix).invert().transpose();\r\n\t\t\t// for (const originalNormal of this.originalNormals) {\r\n\t\t\t// \tthis.transformedNormals.push(\r\n\t\t\t// \t\ttempMatrix.multiplyVec3(originalNormal).normalize()\r\n\t\t\t// \t);\r\n\t\t\t// }\r\n\r\n\t\t\tthis.normalsNeedsUpdate = false;\r\n\t\t}\r\n\t\treturn this.transformedNormals;\r\n\t}\r\n\r\n\tgetTransformedEdges(): Array<Vec3> {\r\n\t\treturn this.getTransformedNormals();\r\n\t}\r\n\r\n\tgetTransformedEdgeNormals(): Array<Vec3> {\r\n\t\treturn this.getTransformedNormals();\r\n\t}\r\n\r\n\tgetTransformMatrix(): Matrix4 {\r\n\t\treturn this.transformMatrix;\r\n\t}\r\n}\r\n","import Matrix3 from \"../../Maths/Matrix3\";\r\nimport Vec3 from \"../../Maths/Vec3\";\r\nimport Shape from \"./Shape\";\r\n\r\nexport default class Ray extends Shape {\r\n\tprivate start: Vec3;\r\n\tprivate dir: Vec3;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.start = new Vec3([0.0, 0.0, 0.0]);\r\n\t\tthis.dir = new Vec3([0.0, 0.0, 1.0]);\r\n\t}\r\n\r\n\tsetStart(start: Vec3) {\r\n\t\tthis.start = start;\r\n\t}\r\n\r\n\tsetDir(dir: Vec3) {\r\n\t\tthis.dir.deepAssign(dir).normalize();\r\n\t}\r\n\r\n\tgetDir(): Vec3 {\r\n\t\treturn this.dir;\r\n\t}\r\n\r\n\tsetStartAndDir(start: Vec3, dir: Vec3) {\r\n\t\tthis.start.deepAssign(start);\r\n\t\tthis.dir.deepAssign(dir).normalize();\r\n\t}\r\n\r\n\tgetTransformedVertices(): Array<Vec3> {\r\n\t\treturn [this.start];\r\n\t}\r\n\r\n\tgetTransformedNormals(): Array<Vec3> {\r\n\t\treturn [this.dir];\r\n\t}\r\n\r\n\tgetTransformedEdges(): Array<Vec3> {\r\n\t\treturn [this.dir];\r\n\t}\r\n\r\n\tgetTransformedEdgeNormals(): Array<Vec3> {\r\n\t\treturn [this.dir];\r\n\t}\r\n}\r\n","import Vec3 from \"../../Maths/Vec3\";\r\n\r\nexport default class Shape {\r\n\tmargin: number;\r\n\r\n\tconstructor() {\r\n\t\tthis.margin = 0.0;\r\n\t}\r\n\r\n\tsetUpdateNeeded() {}\r\n\r\n\tsetTransformMatrix(matrix: Matrix4) {}\r\n\r\n\tgetOriginalVertices(): Array<Vec3> {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgetTransformedVertices(): Array<Vec3> {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgetTransformedNormals(): Array<Vec3> {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgetTransformedEdges(): Array<Vec3> {\r\n\t\treturn null;\r\n\t}\r\n\r\n\tgetTransformedEdgeNormals(): Array<Vec3> {\r\n\t\treturn null;\r\n\t}\r\n}\r\n","import Matrix3 from \"../../Maths/Matrix3\";\r\nimport Vec3 from \"../../Maths/Vec3\";\r\nimport Shape from \"./Shape\";\r\n\r\nexport default class Triangle extends Shape {\r\n\tprivate originalVertices: Array<Vec3>;\r\n\tprivate originalNormal: Vec3;\r\n\r\n\tprivate transformedVertices: Array<Vec3>;\r\n\tprivate transformedNormals: Array<Vec3>;\r\n\tprivate transformedEdges: Array<Vec3>;\r\n\tprivate transformedEdgeNormals: Array<Vec3>;\r\n\r\n\tprivate transformMatrix: Matrix4;\r\n\tprivate verticesNeedsUpdate: boolean;\r\n\tprivate normalNeedsUpdate: boolean;\r\n\tprivate edgesNeedsUpdate: boolean;\r\n\tprivate edgeNormalsNeedsUpdate: boolean;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.originalVertices = new Array<Vec3>();\r\n\t\tthis.originalNormal = new Vec3();\r\n\t\tthis.transformedVertices = new Array<Vec3>();\r\n\t\tthis.transformedNormals = new Array<Vec3>(1);\r\n\t\tthis.transformedEdges = new Array<Vec3>();\r\n\t\tthis.transformedEdgeNormals = new Array<Vec3>();\r\n\t\tthis.transformMatrix = new Matrix4(null);\r\n\t\tthis.verticesNeedsUpdate = false;\r\n\t\tthis.normalNeedsUpdate = false;\r\n\t\tthis.edgesNeedsUpdate = false;\r\n\t\tthis.edgeNormalsNeedsUpdate = false;\r\n\t}\r\n\r\n\tsetVertices(vertex1: Vec3, vertex2: Vec3, vertex3: Vec3) {\r\n\t\tthis.originalVertices.length = 0;\r\n\t\tthis.transformedEdges.length = 0;\r\n\t\tthis.originalVertices.push(vertex1);\r\n\t\tthis.originalVertices.push(vertex2);\r\n\t\tthis.originalVertices.push(vertex3);\r\n\t\tthis.originalNormal.deepAssign(\r\n\t\t\tnew Vec3(vertex1)\r\n\t\t\t\t.subtract(vertex2)\r\n\t\t\t\t.cross(new Vec3(vertex3).subtract(vertex2))\r\n\t\t\t\t.normalize()\r\n\t\t);\r\n\r\n\t\tthis.verticesNeedsUpdate = true;\r\n\t\tthis.normalNeedsUpdate = true;\r\n\t\tthis.edgesNeedsUpdate = true;\r\n\t\tthis.edgeNormalsNeedsUpdate = true;\r\n\t}\r\n\r\n\tsetUpdateNeeded() {\r\n\t\tthis.verticesNeedsUpdate = true;\r\n\t\tthis.normalNeedsUpdate = true;\r\n\t\tthis.edgesNeedsUpdate = true;\r\n\t\tthis.edgeNormalsNeedsUpdate = true;\r\n\t}\r\n\r\n\tsetTransformMatrix(matrix: Matrix4) {\r\n\t\tthis.transformMatrix = matrix;\r\n\t\tthis.verticesNeedsUpdate = true;\r\n\t\tthis.normalNeedsUpdate = true;\r\n\t\tthis.edgesNeedsUpdate = true;\r\n\t\tthis.edgeNormalsNeedsUpdate = true;\r\n\t}\r\n\r\n\tgetOriginalVertices(): Array<Vec3> {\r\n\t\treturn this.originalVertices;\r\n\t}\r\n\r\n\tgetTransformedVertices(): Array<Vec3> {\r\n\t\tif (this.verticesNeedsUpdate) {\r\n\t\t\tthis.transformedVertices.length = 0;\r\n\r\n\t\t\tfor (const originalVertex of this.originalVertices) {\r\n\t\t\t\tlet transformedVertex = this.transformMatrix.multiplyVector4(\r\n\t\t\t\t\tnew Vector4([...originalVertex, 1.0])\r\n\t\t\t\t);\r\n\t\t\t\tlet transformedVertexVec3 = new Vec3([\r\n\t\t\t\t\ttransformedVertex.elements[0],\r\n\t\t\t\t\ttransformedVertex.elements[1],\r\n\t\t\t\t\ttransformedVertex.elements[2],\r\n\t\t\t\t]);\r\n\t\t\t\tthis.transformedVertices.push(transformedVertexVec3);\r\n\t\t\t}\r\n\t\t\tthis.verticesNeedsUpdate = false;\r\n\t\t}\r\n\t\treturn this.transformedVertices;\r\n\t}\r\n\r\n\tgetTransformedNormals(): Array<Vec3> {\r\n\t\tif (this.normalNeedsUpdate) {\r\n\t\t\tthis.transformedNormals.length = 0;\r\n\t\t\tthis.getTransformedVertices();\r\n\t\t\tthis.transformedNormals.push(\r\n\t\t\t\tnew Vec3(this.transformedVertices[0])\r\n\t\t\t\t\t.subtract(this.transformedVertices[1])\r\n\t\t\t\t\t.cross(\r\n\t\t\t\t\t\tnew Vec3(this.transformedVertices[2]).subtract(\r\n\t\t\t\t\t\t\tthis.transformedVertices[1]\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t)\r\n\t\t\t\t\t.normalize()\r\n\t\t\t);\r\n\r\n\t\t\t// let tempMatrix = new Matrix3();\r\n\t\t\t// tempMatrix.fromMatrix4(this.transformMatrix).invert().transpose();\r\n\r\n\t\t\t// this.transformedNormals.length = 0;\r\n\t\t\t// this.transformedNormals.push(tempMatrix\r\n\t\t\t// \t.multiplyVec3(this.originalNormal)\r\n\t\t\t// \t.normalize());\r\n\r\n\t\t\t// NO IDEA WHY THIS IS NEEDED BUT IT IS :(\r\n\t\t\tthis.transformedNormals[0].x *= -1.0;\r\n\t\t\tthis.transformedNormals[0].z *= -1.0;\r\n\r\n\t\t\tthis.normalNeedsUpdate = false;\r\n\t\t}\r\n\t\treturn this.transformedNormals;\r\n\t}\r\n\r\n\tgetTransformedEdges(): Array<Vec3> {\r\n\t\tif (this.edgesNeedsUpdate) {\r\n\t\t\tthis.getTransformedVertices(); // Force update of vertices\r\n\t\t\tthis.transformedEdges.length = 0;\r\n\r\n\t\t\tthis.transformedEdges.push(\r\n\t\t\t\tnew Vec3(this.transformedVertices[1])\r\n\t\t\t\t\t.subtract(this.transformedVertices[0])\r\n\t\t\t\t\t.normalize()\r\n\t\t\t);\r\n\t\t\tthis.transformedEdges.push(\r\n\t\t\t\tnew Vec3(this.transformedVertices[2])\r\n\t\t\t\t\t.subtract(this.transformedVertices[1])\r\n\t\t\t\t\t.normalize()\r\n\t\t\t);\r\n\t\t\tthis.transformedEdges.push(\r\n\t\t\t\tnew Vec3(this.transformedVertices[0])\r\n\t\t\t\t\t.subtract(this.transformedVertices[2])\r\n\t\t\t\t\t.normalize()\r\n\t\t\t);\r\n\r\n\t\t\tthis.edgesNeedsUpdate = false;\r\n\t\t}\r\n\t\treturn this.transformedEdges;\r\n\t}\r\n\r\n\tgetTransformedEdgeNormals(): Array<Vec3> {\r\n\t\tif (this.edgeNormalsNeedsUpdate) {\r\n\t\t\tthis.getTransformedEdges(); // Force update of edges\r\n\t\t\tthis.getTransformedNormals(); // Force update of normal\r\n\t\t\tthis.transformedEdgeNormals.length = 0;\r\n\r\n\t\t\tthis.transformedEdgeNormals.push(\r\n\t\t\t\tnew Vec3(this.transformedEdges[0])\r\n\t\t\t\t\t.cross(this.transformedNormals[0])\r\n\t\t\t\t\t.normalize()\r\n\t\t\t);\r\n\t\t\tthis.transformedEdgeNormals.push(\r\n\t\t\t\tnew Vec3(this.transformedEdges[1])\r\n\t\t\t\t\t.cross(this.transformedNormals[0])\r\n\t\t\t\t\t.normalize()\r\n\t\t\t);\r\n\t\t\tthis.transformedEdgeNormals.push(\r\n\t\t\t\tnew Vec3(this.transformedEdges[2])\r\n\t\t\t\t\t.cross(this.transformedNormals[0])\r\n\t\t\t\t\t.normalize()\r\n\t\t\t);\r\n\r\n\t\t\tthis.edgeNormalsNeedsUpdate = false;\r\n\t\t}\r\n\t\treturn this.transformedEdgeNormals;\r\n\t}\r\n}\r\n","import Camera from \"../Camera\";\r\nimport Button from \"../GUI/Button\";\r\nimport Checkbox from \"../GUI/Checkbox\";\r\nimport GuiObject from \"../GUI/GuiObject\";\r\nimport Progress from \"../GUI/Progress\";\r\nimport Slider from \"../GUI/Slider\";\r\nimport TextObject2D from \"../GUI/Text/TextObject2D\";\r\nimport TextObject3D from \"../GUI/Text/TextObject3D\";\r\n\r\nexport class OverlayRendering {\r\n\tprivate camera: Camera; // Optional camera for calculating 3D texts\r\n\r\n\t// ---- GUI rendering ----\r\n\tprivate guiObjects3D: Array<TextObject3D>;\r\n\tprivate guiObjects2D: Array<GuiObject>;\r\n\t// -----------------------\r\n\r\n\tconstructor(camera: Camera = null) {\r\n\t\tthis.camera = camera;\r\n\r\n\t\t// ---- GUI rendering ----\r\n\t\tthis.guiObjects3D = new Array<TextObject3D>();\r\n\t\tthis.guiObjects2D = new Array<GuiObject>();\r\n\t\t// -----------------------\r\n\t}\r\n\r\n\tclear() {\r\n\t\tfor (let guiObject2D of this.guiObjects2D) {\r\n\t\t\tguiObject2D.remove();\r\n\t\t}\r\n\r\n\t\tfor (let guiObject3D of this.guiObjects3D) {\r\n\t\t\tguiObject3D.remove();\r\n\t\t}\r\n\t}\r\n\r\n\thide() {\r\n\t\tfor (let guiObject2D of this.guiObjects2D) {\r\n\t\t\tguiObject2D.setHidden(true);\r\n\t\t}\r\n\r\n\t\tfor (let guiObject3D of this.guiObjects3D) {\r\n\t\t\tguiObject3D.setHidden(true);\r\n\t\t}\r\n\t}\r\n\r\n\tshow() {\r\n\t\tfor (let guiObject2D of this.guiObjects2D) {\r\n\t\t\tguiObject2D.setHidden(false);\r\n\t\t}\r\n\r\n\t\tfor (let guiObject3D of this.guiObjects3D) {\r\n\t\t\tguiObject3D.setHidden(false);\r\n\t\t}\r\n\t}\r\n\r\n\tgetNew2DText(): TextObject2D {\r\n\t\tconst length = this.guiObjects2D.push(new TextObject2D());\r\n\t\treturn this.guiObjects2D[length - 1] as TextObject2D;\r\n\t}\r\n\r\n\tgetNew3DText(): TextObject3D {\r\n\t\tconst length = this.guiObjects3D.push(new TextObject3D());\r\n\t\treturn this.guiObjects3D[length - 1];\r\n\t}\r\n\r\n\tgetNewCheckbox(): Checkbox {\r\n\t\tconst length = this.guiObjects2D.push(new Checkbox());\r\n\t\treturn this.guiObjects2D[length - 1] as Checkbox;\r\n\t}\r\n\r\n\tgetNewButton(): Button {\r\n\t\tconst length = this.guiObjects2D.push(new Button());\r\n\t\treturn this.guiObjects2D[length - 1] as Button;\r\n\t}\r\n\r\n\tgetNewSlider(): Slider {\r\n\t\tconst length = this.guiObjects2D.push(new Slider());\r\n\t\treturn this.guiObjects2D[length - 1] as Slider;\r\n\t}\r\n\r\n\tgetNewProgress(): Progress {\r\n\t\tconst length = this.guiObjects2D.push(new Progress());\r\n\t\treturn this.guiObjects2D[length - 1] as Progress;\r\n\t}\r\n\r\n\tdraw() {\r\n\t\t// ---- GUI rendering ----\r\n\t\tif (this.camera != undefined) {\r\n\t\t\tfor (let i = 0; i < this.guiObjects3D.length; i++) {\r\n\t\t\t\tif (!this.guiObjects3D[i].removed) {\r\n\t\t\t\t\tthis.guiObjects3D[i].draw3D(this.camera.getViewProjMatrix());\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.guiObjects3D.splice(i, 1);\r\n\t\t\t\t\ti--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (let i = 0; i < this.guiObjects2D.length; i++) {\r\n\t\t\tif (!this.guiObjects2D[i].removed) {\r\n\t\t\t\tthis.guiObjects2D[i].draw();\r\n\t\t\t} else {\r\n\t\t\t\tthis.guiObjects2D.splice(i, 1);\r\n\t\t\t\ti--;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// -----------------------\r\n\t}\r\n}\r\n","import { gl, windowInfo } from \"../../../main\";\r\nimport Framebuffer from \"../../Framebuffer\";\r\nimport Texture from \"../../Textures/Texture\";\r\nimport ScreenQuad from \"../../Objects/ScreenQuad\";\r\nimport { screenQuadShaderProgram } from \"../../ShaderPrograms/ScreenQuadShaderProgram\";\r\nimport { bloomExtraction } from \"../../ShaderPrograms/PostProcessing/BloomExtraction\";\r\nimport { gaussianBlur } from \"../../ShaderPrograms/PostProcessing/GaussianBlur\";\r\nimport { bloomBlending } from \"../../ShaderPrograms/PostProcessing/BloomBlending\";\r\n\r\nexport default class BloomRenderPass {\r\n\tprivate bloomResolutionWidth: number;\r\n\tprivate bloomResolutionHeight: number;\r\n\t// private bloomExtractionInputFramebuffer: Framebuffer;\r\n\tprivate bloomExtractionOutputFramebuffer: Framebuffer;\r\n\tprivate pingPongFramebuffers: Array<Framebuffer>; // 2 frambuffers to go back and fourth between\r\n\r\n\tprivate screenQuad: ScreenQuad;\r\n\toutputFramebuffer: Framebuffer;\r\n\r\n\tconstructor(inputTextures: Texture[]) {\r\n\t\tthis.bloomExtractionOutputFramebuffer = new Framebuffer(\r\n\t\t\twindowInfo.resolutionWidth,\r\n\t\t\twindowInfo.resolutionHeight,\r\n\t\t\t[new Texture(false), new Texture(false)],\r\n\t\t\tnull\r\n\t\t);\r\n\t\tthis.pingPongFramebuffers = new Array<Framebuffer>(2);\r\n\t\tthis.bloomResolutionWidth = 1280;\r\n\t\tthis.bloomResolutionHeight = 720;\r\n\t\tfor (let i = 0; i < 2; i++) {\r\n\t\t\tthis.pingPongFramebuffers[i] = new Framebuffer(\r\n\t\t\t\tthis.bloomResolutionWidth,\r\n\t\t\t\tthis.bloomResolutionHeight,\r\n\t\t\t\t[new Texture(false)],\r\n\t\t\t\tnull\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tthis.screenQuad = new ScreenQuad(screenQuadShaderProgram, inputTextures);\r\n\t\tthis.outputFramebuffer = null;\r\n\t}\r\n\r\n\tsetResolution(x: number, y: number) {\r\n\t\tthis.bloomExtractionOutputFramebuffer.setProportions(x, y);\r\n\r\n\t\t// for (let buffer of this.pingPongFramebuffers) {\r\n\t\t// \tbuffer.setProportions(x, y);\r\n\t\t// }\r\n\t}\r\n\r\n\tprivate bindFramebuffers() {\r\n\t\t// Render result to screen or to crt framebuffer if doing crt effect after this.\r\n\t\tif (this.outputFramebuffer == undefined) {\r\n\t\t\tgl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null); // Render directly to screen\r\n\t\t} else {\r\n\t\t\tthis.outputFramebuffer.bind(gl.DRAW_FRAMEBUFFER);\r\n\t\t}\r\n\t}\r\n\r\n\tdraw() {\r\n\t\tgl.disable(gl.DEPTH_TEST);\r\n\r\n\t\tthis.bloomExtractionOutputFramebuffer.bind(gl.DRAW_FRAMEBUFFER);\r\n\t\tbloomExtraction.use();\r\n\t\tthis.screenQuad.draw(true);\r\n\r\n\t\tgl.viewport(0, 0, this.bloomResolutionWidth, this.bloomResolutionHeight);\r\n\t\t// Blur the bright image (second of the two in bloomExtractionOutputFramebuffer)\r\n\t\tlet horizontal = true,\r\n\t\t\tfirstIteration = true;\r\n\t\tlet amount = 5;\r\n\t\tgaussianBlur.use();\r\n\t\tfor (let i = 0; i < amount; i++) {\r\n\t\t\tthis.pingPongFramebuffers[Number(horizontal)].bind(gl.DRAW_FRAMEBUFFER);\r\n\t\t\tgl.uniform1ui(\r\n\t\t\t\tgaussianBlur.getUniformLocation(\"horizontal\")[0],\r\n\t\t\t\tNumber(horizontal)\r\n\t\t\t);\r\n\t\t\tif (firstIteration) {\r\n\t\t\t\tthis.bloomExtractionOutputFramebuffer.textures[1].bind();\r\n\t\t\t} else {\r\n\t\t\t\tthis.pingPongFramebuffers[Number(!horizontal)].textures[0].bind();\r\n\t\t\t}\r\n\r\n\t\t\tthis.screenQuad.draw(false);\r\n\t\t\thorizontal = !horizontal;\r\n\t\t\tfirstIteration = false;\r\n\t\t}\r\n\r\n\t\tgl.viewport(0, 0, windowInfo.resolutionWidth, windowInfo.resolutionHeight);\r\n\r\n\t\t// Combine the normal image with the blured bright image\r\n\t\tbloomBlending.use();\r\n\t\tthis.bloomExtractionOutputFramebuffer.textures[0].bind(0); // Normal scene\r\n\t\tthis.pingPongFramebuffers[Number(horizontal)].textures[0].bind(1); // Blurred bright image\r\n\r\n\t\tthis.bindFramebuffers();\r\n\t\tthis.screenQuad.draw(false);\r\n\r\n\t\tgl.enable(gl.DEPTH_TEST);\r\n\t}\r\n}\r\n","import { gl } from \"../../../main\";\r\nimport Framebuffer from \"../../Framebuffer\";\r\nimport Texture from \"../../Textures/Texture\";\r\nimport { crtShaderProgram } from \"../../ShaderPrograms/PostProcessing/CrtShaderProgram\";\r\nimport ScreenQuad from \"../../Objects/ScreenQuad\";\r\n\r\nexport default class CRTRenderPass {\r\n\tprivate screenQuad: ScreenQuad;\r\n\toutputFramebuffer: Framebuffer;\r\n\r\n\tconstructor(inputTextures: Texture[]) {\r\n\t\tthis.screenQuad = new ScreenQuad(crtShaderProgram, inputTextures);\r\n\t\tthis.outputFramebuffer = null;\r\n\t}\r\n\r\n\tprivate bindFramebuffers() {\r\n\t\tif (this.outputFramebuffer == undefined) {\r\n\t\t\tgl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null); // Render directly to screen\r\n\t\t} else {\r\n\t\t\tthis.outputFramebuffer.bind(gl.DRAW_FRAMEBUFFER);\r\n\t\t}\r\n\t}\r\n\r\n\tdraw() {\r\n\t\tthis.bindFramebuffers();\r\n\t\tgl.disable(gl.DEPTH_TEST);\r\n\t\t// ---- Crt effect ----\r\n\t\tcrtShaderProgram.use();\r\n\t\tthis.screenQuad.draw(true);\r\n\t\t// --------------------\r\n\t\tgl.enable(gl.DEPTH_TEST);\r\n\t}\r\n}\r\n","import { gl } from \"../../../main\";\r\nimport Framebuffer from \"../../Framebuffer\";\r\nimport Texture from \"../../Textures/Texture\";\r\nimport ScreenQuad from \"../../Objects/ScreenQuad\";\r\nimport { screenQuadShaderProgram } from \"../../ShaderPrograms/ScreenQuadShaderProgram\";\r\n\r\nexport default class FinishedOutputRenderPass {\r\n\tprivate screenQuad: ScreenQuad;\r\n\toutputFramebuffer: Framebuffer;\r\n\r\n\tconstructor(inputTextures: Texture[]) {\r\n\t\tthis.screenQuad = new ScreenQuad(screenQuadShaderProgram, inputTextures);\r\n\t\tthis.outputFramebuffer = null;\r\n\t}\r\n\r\n\tdraw() {\r\n\t\tgl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null); // Render directly to screen\r\n\t\tgl.disable(gl.DEPTH_TEST);\r\n\t\t// ---- Crt effect ----\r\n\t\tscreenQuadShaderProgram.use();\r\n\t\tthis.screenQuad.draw(true);\r\n\t\t// --------------------\r\n\t\tgl.enable(gl.DEPTH_TEST);\r\n\t}\r\n}\r\n","import { applicationStartTime, gl, windowInfo } from \"../../../main\";\r\nimport Camera from \"../../Camera\";\r\nimport Framebuffer from \"../../Framebuffer\";\r\nimport { geometryPass } from \"../../ShaderPrograms/DeferredRendering/GeometryPass\";\r\nimport { grassShaderProgram } from \"../../ShaderPrograms/GrassShaderProgram\";\r\nimport Texture from \"../../Textures/Texture\";\r\nimport Scene from \"../Scene\";\r\n\r\nexport default class GeometryRenderPass {\r\n\toutputFramebuffer: Framebuffer;\r\n\r\n\tconstructor() {\r\n\t\tthis.outputFramebuffer = new Framebuffer(\r\n\t\t\twindowInfo.resolutionWidth,\r\n\t\t\twindowInfo.resolutionHeight,\r\n\t\t\t[\r\n\t\t\t\tnew Texture(false, gl.RGBA32F, gl.RGBA, gl.FLOAT),\r\n\t\t\t\tnew Texture(false, gl.RGBA32F, gl.RGBA, gl.FLOAT),\r\n\t\t\t\tnew Texture(false),\r\n\t\t\t],\r\n\t\t\tnull\r\n\t\t);\r\n\t}\r\n\r\n\tsetResolution(x: number, y: number) {\r\n\t\tthis.outputFramebuffer.setProportions(x, y);\r\n\t}\r\n\r\n\tdraw(scene: Scene, camera: Camera) {\r\n\t\tgl.viewport(\r\n\t\t\t0.0,\r\n\t\t\t0.0,\r\n\t\t\twindowInfo.resolutionWidth,\r\n\t\t\twindowInfo.resolutionHeight\r\n\t\t);\r\n\r\n\t\t// Bind gbuffer and clear that with 0,0,0,0 (the alpha = 0 is important to be able to identify fragments in the lighting pass that have not been written with geometry)\r\n\t\tthis.outputFramebuffer.bind(gl.FRAMEBUFFER);\r\n\t\tgl.clearColor(0.0, 0.0, 0.0, 0.0);\r\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);\r\n\r\n\t\tgeometryPass.use();\r\n\r\n\t\tcamera.bindViewProjMatrix(\r\n\t\t\tgeometryPass.getUniformLocation(\"viewProjMatrix\")[0]\r\n\t\t);\r\n\r\n\t\tscene.renderScene(geometryPass, true);\r\n\r\n\t\tgrassShaderProgram.use();\r\n\t\tcamera.bindViewProjMatrix(\r\n\t\t\tgrassShaderProgram.getUniformLocation(\"viewProjMatrix\")[0]\r\n\t\t);\r\n\r\n\t\tgl.uniform3fv(\r\n\t\t\tgrassShaderProgram.getUniformLocation(\"cameraPos\")[0],\r\n\t\t\tcamera.getPosition()\r\n\t\t);\r\n\t\tgl.uniform1f(\r\n\t\t\tgrassShaderProgram.getUniformLocation(\"currentTime\")[0],\r\n\t\t\t(Date.now() - applicationStartTime) * 0.001\r\n\t\t);\r\n\r\n\t\tscene.renderGrass(grassShaderProgram, true);\r\n\t}\r\n}\r\n","import { gl } from \"../../../main\";\r\nimport Camera from \"../../Camera\";\r\nimport Framebuffer from \"../../Framebuffer\";\r\nimport ScreenQuad from \"../../Objects/ScreenQuad\";\r\nimport { lightingPass } from \"../../ShaderPrograms/DeferredRendering/LightingPass\";\r\nimport Texture from \"../../Textures/Texture\";\r\nimport Scene from \"../Scene\";\r\n\r\nexport default class LightingRenderPass {\r\n\tprivate screenQuad: ScreenQuad;\r\n\r\n\toutputFramebuffer: Framebuffer;\r\n\r\n\tconstructor(inputTextures: Texture[]) {\r\n\t\tthis.screenQuad = new ScreenQuad(lightingPass, inputTextures);\r\n\t}\r\n\r\n\tsetResolution(x: number, y: number) {\r\n\t\tthis.outputFramebuffer.setProportions(x, y);\r\n\t}\r\n\r\n\tdraw(scene: Scene, camera: Camera) {\r\n\t\t// Disable depth testing for screen quad(s) rendering\r\n\t\tgl.disable(gl.DEPTH_TEST);\r\n\r\n\t\t// ---- Lighting pass ----\r\n\t\tlightingPass.use();\r\n\r\n\t\tgl.uniform3fv(\r\n\t\t\tlightingPass.getUniformLocation(\"camPos\")[0],\r\n\t\t\tcamera.getPosition()\r\n\t\t);\r\n\t\tscene.directionalLight.bind();\r\n\t\tscene.directionalLight.calcAndSendLightSpaceMatrix(\r\n\t\t\tcamera.getPosition(),\r\n\t\t\t20.0,\r\n\t\t\tlightingPass.getUniformLocation(\"lightSpaceMatrix\")[0]\r\n\t\t);\r\n\t\t// Point lights\r\n\t\tgl.uniform1i(\r\n\t\t\tlightingPass.getUniformLocation(\"nrOfPointLights\")[0],\r\n\t\t\tscene.pointLights.length\r\n\t\t);\r\n\t\tfor (let i = 0; i < scene.pointLights.length; i++) {\r\n\t\t\tscene.pointLights[i].bind(i);\r\n\t\t}\r\n\r\n\t\tthis.screenQuad.draw(true);\r\n\t\t// -----------------------\r\n\r\n\t\t// Enable depth test again\r\n\t\tgl.enable(gl.DEPTH_TEST);\r\n\t}\r\n}\r\n","import { applicationStartTime, gl } from \"../../../main\";\r\nimport Camera from \"../../Camera\";\r\nimport Scene from \"../Scene\";\r\nimport { particleShaderProgram } from \"../../ShaderPrograms/ParticleShaderProgram\";\r\n\r\nexport default class ParticleRenderPass {\r\n\tconstructor() {}\r\n\r\n\tdraw(scene: Scene, camera: Camera) {\r\n\t\tif (scene.particleSpawners.length > 0) {\r\n\t\t\t// only do this if there are any particle spawners\r\n\r\n\t\t\tparticleShaderProgram.use();\r\n\t\t\tcamera.bindViewProjMatrix(\r\n\t\t\t\tparticleShaderProgram.getUniformLocation(\"viewProjMatrix\")[0]\r\n\t\t\t);\r\n\t\t\tgl.uniform3fv(\r\n\t\t\t\tparticleShaderProgram.getUniformLocation(\"cameraPos\")[0],\r\n\t\t\t\tcamera.getPosition()\r\n\t\t\t);\r\n\t\t\tgl.uniform1f(\r\n\t\t\t\tparticleShaderProgram.getUniformLocation(\"currentTime\")[0],\r\n\t\t\t\t(Date.now() - applicationStartTime) * 0.001\r\n\t\t\t);\r\n\t\t\tfor (const particleSpawner of scene.particleSpawners.values()) {\r\n\t\t\t\tparticleSpawner.draw();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","import { applicationStartTime, gl } from \"../../../main\";\r\nimport Framebuffer from \"../../Framebuffer\";\r\nimport { grassShadowPass } from \"../../ShaderPrograms/ShadowMapping/GrassShadowPass\";\r\nimport { shadowPass } from \"../../ShaderPrograms/ShadowMapping/ShadowPass\";\r\nimport Texture from \"../../Textures/Texture\";\r\nimport Scene from \"../Scene\";\r\nimport Camera from \"../../Camera\";\r\n\r\nexport default class ShadowRenderPass {\r\n\t// ---- Shadow mapping ----\r\n\tprivate shadowResolution: number;\r\n\tprivate shadowOffset: number;\r\n\tshadowBuffer: Framebuffer;\r\n\t// ------------------------\r\n\r\n\tconstructor() {\r\n\t\t// ---- Shadow mapping ----\r\n\t\tthis.shadowResolution = 4096;\r\n\t\tthis.shadowOffset = 20.0;\r\n\t\tthis.shadowBuffer = new Framebuffer(\r\n\t\t\tthis.shadowResolution,\r\n\t\t\tthis.shadowResolution,\r\n\t\t\t[],\r\n\t\t\tnew Texture(false, gl.DEPTH_COMPONENT32F, gl.DEPTH_COMPONENT, gl.FLOAT)\r\n\t\t);\r\n\t\t// ------------------------\r\n\t}\r\n\r\n\tsetShadowMappingResolution(res: number) {\r\n\t\tthis.shadowResolution = res;\r\n\t\tthis.shadowBuffer.setProportions(res, res);\r\n\t}\r\n\r\n\tdraw(scene: Scene, camera: Camera) {\r\n\t\tthis.shadowBuffer.bind(gl.FRAMEBUFFER);\r\n\r\n\t\tgl.enable(gl.DEPTH_TEST);\r\n\r\n\t\t// ---- Shadow pass ----\r\n\t\tshadowPass.use();\r\n\t\tgl.viewport(0, 0, this.shadowResolution, this.shadowResolution);\r\n\t\tgl.clearColor(1.0, 1.0, 1.0, 1.0);\r\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n\r\n\t\t//gl.enable(gl.CULL_FACE);\r\n\t\t//gl.cullFace(gl.FRONT);\r\n\r\n\t\t//Set uniforms\r\n\t\tscene\r\n\t\t\t.getDirectionalLight()\r\n\t\t\t.calcAndSendLightSpaceMatrix(\r\n\t\t\t\tcamera.getPosition(),\r\n\t\t\t\tthis.shadowOffset,\r\n\t\t\t\tshadowPass.getUniformLocation(\"lightSpaceMatrix\")[0]\r\n\t\t\t);\r\n\r\n\t\t//Render shadow pass\r\n\t\tscene.renderScene(shadowPass, false);\r\n\r\n\t\t// Grass\r\n\t\tgrassShadowPass.use();\r\n\t\t//Set uniforms\r\n\t\tscene\r\n\t\t\t.getDirectionalLight()\r\n\t\t\t.calcAndSendLightSpaceMatrix(\r\n\t\t\t\tcamera.getPosition(),\r\n\t\t\t\tthis.shadowOffset,\r\n\t\t\t\tgrassShadowPass.getUniformLocation(\"lightSpaceMatrix\")[0]\r\n\t\t\t);\r\n\r\n\t\tgl.uniform3fv(\r\n\t\t\tgrassShadowPass.getUniformLocation(\"cameraPos\")[0],\r\n\t\t\tcamera.getPosition()\r\n\t\t);\r\n\t\tgl.uniform1f(\r\n\t\t\tgrassShadowPass.getUniformLocation(\"currentTime\")[0],\r\n\t\t\t(Date.now() - applicationStartTime) * 0.001\r\n\t\t);\r\n\r\n\t\tscene.renderGrass(grassShadowPass, false);\r\n\r\n\t\t//gl.disable(gl.CULL_FACE);\r\n\t\t// ---------------------\r\n\t}\r\n}\r\n","import { gl } from \"../../../main\";\r\nimport Skybox from \"../../Objects/Skybox\";\r\nimport { skyboxShaderProgram } from \"../../ShaderPrograms/Skybox/SkyboxShaderProgram\";\r\nimport CubeMap from \"../../Textures/CubeMap\";\r\nimport Camera from \"../../Camera\";\r\n\r\nexport default class SkyboxRenderPass {\r\n\tprivate skybox: Skybox;\r\n\r\n\tconstructor() {\r\n\t\tthis.skybox = null;\r\n\t}\r\n\r\n\tsetSkybox(cubemap: CubeMap) {\r\n\t\tthis.skybox = new Skybox(skyboxShaderProgram, cubemap);\r\n\t}\r\n\r\n\tdraw(camera: Camera) {\r\n\t\tif (this.skybox != undefined) {\r\n\t\t\tgl.enable(gl.DEPTH_TEST);\r\n\t\t\tskyboxShaderProgram.use();\r\n\t\t\tcamera.bindViewProjMatrix(\r\n\t\t\t\tskyboxShaderProgram.getUniformLocation(\"viewProjMatrix\")[0],\r\n\t\t\t\ttrue\r\n\t\t\t);\r\n\t\t\tgl.depthFunc(gl.LEQUAL);\r\n\t\t\tthis.skybox.draw();\r\n\t\t\tgl.depthFunc(gl.LESS);\r\n\t\t}\r\n\t}\r\n}\r\n","import { gl, windowInfo } from \"../../main\";\r\nimport { options } from \"../../Game/GameMachine\";\r\nimport Framebuffer from \"../Framebuffer\";\r\nimport Texture from \"../Textures/Texture\";\r\nimport TextureStore from \"../AssetHandling/TextureStore\";\r\nimport Camera from \"../Camera\";\r\nimport Scene from \"./Scene\";\r\nimport ShadowRenderPass from \"./RenderPasses/ShadowRenderPass\";\r\nimport CRTRenderPass from \"./RenderPasses/CRTRenderPass\";\r\nimport BloomRenderPass from \"./RenderPasses/BloomRenderPass\";\r\nimport SkyboxRenderPass from \"./RenderPasses/SkyboxRenderPass\";\r\nimport GeometryRenderPass from \"./RenderPasses/GeometryRenderPass\";\r\nimport LightingRenderPass from \"./RenderPasses/LightingRenderPass\";\r\nimport ParticleRenderPass from \"./RenderPasses/ParticleRenderPass\";\r\nimport FinishedOutputRenderPass from \"./RenderPasses/FinishedOutputRenderPass\";\r\n\r\nexport default class Rendering {\r\n\t// public\r\n\tcamera: Camera;\r\n\tclearColour: { r: number; g: number; b: number; a: number };\r\n\r\n\t// ---- Post processing toggles ----\r\n\tuseCrt: boolean;\r\n\tuseBloom: boolean;\r\n\t// ---------------------------------\r\n\r\n\t// private\r\n\tprivate textureStore: TextureStore;\r\n\tprivate resolutionWidth: number;\r\n\tprivate resolutionHeight: number;\r\n\r\n\t// ---- Particles ----\r\n\tprivate particleRenderPass: ParticleRenderPass;\r\n\t// -------------------\r\n\r\n\t// ---- Shadows ----\r\n\tprivate shadowRenderPass: ShadowRenderPass;\r\n\t// -----------------\r\n\r\n\t// ---- Deferred rendering ----\r\n\tprivate geometryRenderPass: GeometryRenderPass;\r\n\tprivate lightingRenderPass: LightingRenderPass;\r\n\t// ----------------------------\r\n\r\n\t// ---- Skybox ----\r\n\tprivate useSkybox: boolean;\r\n\tprivate skyboxRenderPass: SkyboxRenderPass;\r\n\t// ----------------\r\n\r\n\t// ---- Post processing ----\r\n\t// Crt effect\r\n\tprivate crtFramebuffer: Framebuffer;\r\n\tprivate crtRenderPass: CRTRenderPass;\r\n\r\n\t// Bloom\r\n\tprivate bloomExtractionInputFramebuffer: Framebuffer;\r\n\tprivate bloomRenderPass: BloomRenderPass;\r\n\t// -------------------------\r\n\r\n\t// Finished output\r\n\tprivate finishedFramebuffer: Framebuffer;\r\n\tprivate finishedOutputRenderPass: FinishedOutputRenderPass;\r\n\r\n\tprivate scene: Scene;\r\n\r\n\tconstructor(textureStore: TextureStore, scene: Scene) {\r\n\t\tthis.textureStore = textureStore;\r\n\t\tthis.scene = scene;\r\n\r\n\t\tthis.shadowRenderPass = new ShadowRenderPass();\r\n\r\n\t\tthis.camera = new Camera(gl);\r\n\t\tthis.resolutionWidth = windowInfo.resolutionWidth;\r\n\t\tthis.resolutionHeight = windowInfo.resolutionHeight;\r\n\r\n\t\t// ---- Deferred rendering ----\r\n\t\tthis.geometryRenderPass = new GeometryRenderPass();\r\n\r\n\t\tlet textureArray = new Array<Texture>();\r\n\t\tfor (\r\n\t\t\tlet i = 0;\r\n\t\t\ti < this.geometryRenderPass.outputFramebuffer.textures.length;\r\n\t\t\ti++\r\n\t\t) {\r\n\t\t\ttextureArray.push(this.geometryRenderPass.outputFramebuffer.textures[i]);\r\n\t\t}\r\n\t\ttextureArray.push(this.shadowRenderPass.shadowBuffer.depthTexture);\r\n\t\tthis.lightingRenderPass = new LightingRenderPass(textureArray);\r\n\t\t// ----------------------------\r\n\r\n\t\t// ---- Particles ----\r\n\t\tthis.particleRenderPass = new ParticleRenderPass();\r\n\t\t// -------------------\r\n\r\n\t\t// ---- Skybox ----\r\n\t\tthis.useSkybox = false;\r\n\t\tthis.skyboxRenderPass = new SkyboxRenderPass();\r\n\t\t// ----------------\r\n\r\n\t\t// ---- Post processing ----\r\n\t\t// Crt effect\r\n\t\tthis.useCrt = options.useCrt;\r\n\t\tthis.crtFramebuffer = new Framebuffer(\r\n\t\t\tthis.resolutionWidth,\r\n\t\t\tthis.resolutionHeight,\r\n\t\t\t[new Texture(false)],\r\n\t\t\tnull\r\n\t\t);\r\n\r\n\t\tthis.crtRenderPass = new CRTRenderPass(this.crtFramebuffer.textures);\r\n\r\n\t\t// Bloom\r\n\t\tthis.bloomExtractionInputFramebuffer = new Framebuffer(\r\n\t\t\twindowInfo.resolutionWidth,\r\n\t\t\twindowInfo.resolutionHeight,\r\n\t\t\t[new Texture(false)],\r\n\t\t\tnull\r\n\t\t);\r\n\t\tthis.bloomRenderPass = new BloomRenderPass(\r\n\t\t\tthis.bloomExtractionInputFramebuffer.textures\r\n\t\t);\r\n\t\tthis.useBloom = options.useBloom;\r\n\t\t// -------------------------¨\r\n\r\n\t\tthis.finishedFramebuffer = new Framebuffer(\r\n\t\t\twindowInfo.resolutionWidth,\r\n\t\t\twindowInfo.resolutionHeight,\r\n\t\t\t[new Texture(false)],\r\n\t\t\tnull\r\n\t\t);\r\n\r\n\t\tthis.finishedOutputRenderPass = new FinishedOutputRenderPass(\r\n\t\t\tthis.finishedFramebuffer.textures\r\n\t\t);\r\n\r\n\t\tthis.initGL();\r\n\t}\r\n\r\n\tinitGL() {\r\n\t\tthis.clearColour = { r: 0.15, g: 0.1, b: 0.1, a: 1.0 };\r\n\t\tgl.clearColor(\r\n\t\t\tthis.clearColour.r,\r\n\t\t\tthis.clearColour.g,\r\n\t\t\tthis.clearColour.b,\r\n\t\t\tthis.clearColour.a\r\n\t\t);\r\n\r\n\t\t// Enable depth test\r\n\t\tgl.enable(gl.DEPTH_TEST);\r\n\r\n\t\t//Enable alpha blending\r\n\t\t// gl.enable(gl.BLEND);\r\n\t\t// gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n\t\tgl.disable(gl.BLEND);\r\n\r\n\t\t// Disable faceculling\r\n\t\tgl.cullFace(gl.BACK);\r\n\t\tgl.disable(gl.CULL_FACE);\r\n\t}\r\n\r\n\treportCanvasResize(x: number, y: number) {\r\n\t\tthis.resolutionWidth = x;\r\n\t\tthis.resolutionHeight = y;\r\n\t\tthis.geometryRenderPass.setResolution(x, y);\r\n\t\tthis.crtFramebuffer.setProportions(x, y);\r\n\t\tthis.finishedFramebuffer.setProportions(x, y);\r\n\r\n\t\tthis.bloomExtractionInputFramebuffer.setProportions(x, y);\r\n\t\tthis.bloomRenderPass.setResolution(x, y);\r\n\t}\r\n\r\n\tsetSkybox(path: string) {\r\n\t\tthis.skyboxRenderPass.setSkybox(this.textureStore.getCubeMap(path));\r\n\t\tthis.useSkybox = true;\r\n\t}\r\n\r\n\tdraw() {\r\n\t\tif (\r\n\t\t\tthis.resolutionWidth != windowInfo.resolutionWidth ||\r\n\t\t\tthis.resolutionHeight != windowInfo.resolutionHeight\r\n\t\t) {\r\n\t\t\tthis.reportCanvasResize(\r\n\t\t\t\twindowInfo.resolutionWidth,\r\n\t\t\t\twindowInfo.resolutionHeight\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tgl.enable(gl.DEPTH_TEST);\r\n\r\n\t\t// ---- Shadow pass ----\r\n\t\tthis.shadowRenderPass.draw(this.scene, this.camera);\r\n\t\t// ---------------------\r\n\r\n\t\t// ---- Geometry pass ----\r\n\t\tthis.geometryRenderPass.draw(this.scene, this.camera);\r\n\t\t// -----------------------\r\n\r\n\t\t// Geometry pass over, appropriate framebuffer for post processing or render directly to screen.\r\n\t\tif (this.useBloom) {\r\n\t\t\tthis.bloomExtractionInputFramebuffer.bind(gl.DRAW_FRAMEBUFFER);\r\n\t\t} else if (this.useCrt) {\r\n\t\t\tthis.crtFramebuffer.bind(gl.DRAW_FRAMEBUFFER);\r\n\t\t} else {\r\n\t\t\tthis.finishedFramebuffer.bind(gl.DRAW_FRAMEBUFFER);\r\n\t\t}\r\n\r\n\t\t// Clear the output with the actual clear colour we have set\r\n\t\tgl.clearColor(\r\n\t\t\tthis.clearColour.r,\r\n\t\t\tthis.clearColour.g,\r\n\t\t\tthis.clearColour.b,\r\n\t\t\tthis.clearColour.a\r\n\t\t);\r\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);\r\n\r\n\t\t// ---- Lighting pass ----\r\n\t\tthis.lightingRenderPass.draw(this.scene, this.camera);\r\n\t\t// -----------------------\r\n\r\n\t\t// Copy the depth buffer information from the gBuffer to the current depth buffer\r\n\t\tthis.geometryRenderPass.outputFramebuffer.bind(gl.READ_FRAMEBUFFER);\r\n\t\tgl.blitFramebuffer(\r\n\t\t\t0,\r\n\t\t\t0,\r\n\t\t\tthis.resolutionWidth,\r\n\t\t\tthis.resolutionHeight,\r\n\t\t\t0,\r\n\t\t\t0,\r\n\t\t\tthis.resolutionWidth,\r\n\t\t\tthis.resolutionHeight,\r\n\t\t\tgl.DEPTH_BUFFER_BIT,\r\n\t\t\tgl.NEAREST\r\n\t\t);\r\n\r\n\t\t// ---- Particles ----\r\n\t\tthis.particleRenderPass.draw(this.scene, this.camera);\r\n\t\t// -------------------\r\n\r\n\t\t// ---- Skybox ----\r\n\t\tif (this.useSkybox) {\r\n\t\t\tthis.skyboxRenderPass.draw(this.camera);\r\n\t\t}\r\n\t\t// ----------------\r\n\r\n\t\t// ---- Post processing ----\r\n\t\tif (this.useBloom) {\r\n\t\t\tif (this.useCrt) {\r\n\t\t\t\tthis.bloomRenderPass.outputFramebuffer = this.crtFramebuffer;\r\n\t\t\t} else {\r\n\t\t\t\tthis.bloomRenderPass.outputFramebuffer = null;\r\n\t\t\t}\r\n\t\t\tthis.bloomRenderPass.draw();\r\n\t\t}\r\n\r\n\t\tif (this.useCrt) {\r\n\t\t\tthis.crtRenderPass.draw();\r\n\t\t}\r\n\t\t// -------------------------\r\n\r\n\t\tif (!this.useCrt && !this.useBloom) {\r\n\t\t\tthis.finishedOutputRenderPass.draw();\r\n\t\t}\r\n\t}\r\n}\r\n","import { gl } from \"../../main\";\r\nimport MeshStore from \"../AssetHandling/MeshStore\";\r\nimport TextureStore from \"../AssetHandling/TextureStore\";\r\nimport DirectionalLight from \"../Lighting/DirectionalLight\";\r\nimport PointLight from \"../Lighting/PointLight\";\r\nimport GraphicsBundle from \"../Objects/GraphicsBundle\";\r\nimport GrassSpawner from \"../Objects/GrassSpawner\";\r\nimport ParticleSpawner from \"../Objects/ParticleSpawner\";\r\nimport PhongQuad from \"../Objects/PhongQuad\";\r\nimport Skybox from \"../Objects/Skybox\";\r\nimport { geometryPass } from \"../ShaderPrograms/DeferredRendering/GeometryPass\";\r\nimport { lightingPass } from \"../ShaderPrograms/DeferredRendering/LightingPass\";\r\nimport { grassShaderProgram } from \"../ShaderPrograms/GrassShaderProgram\";\r\nimport { particleShaderProgram } from \"../ShaderPrograms/ParticleShaderProgram\";\r\nimport ShaderProgram from \"../ShaderPrograms/ShaderProgram\";\r\n\r\nexport default class Scene {\r\n\t// ---- Graphics objects ----\r\n\tprivate graphicBundles: Array<GraphicsBundle>;\r\n\tprivate grassSpawners: Array<GraphicsBundle>;\r\n\t// --------------------------\r\n\r\n\t// ---- Lights ----\r\n\tdirectionalLight: DirectionalLight;\r\n\tpointLights: Array<PointLight>;\r\n\t// ----------------\r\n\r\n\t// ---- Particles ----\r\n\tparticleSpawners: Array<ParticleSpawner>;\r\n\t// -------------------\r\n\r\n\t// ---- Skybox ----\r\n\tskybox: Skybox;\r\n\t// ----------------\r\n\r\n\tprivate textureStore: TextureStore;\r\n\tprivate meshStore: MeshStore;\r\n\r\n\tconstructor(textureStore: TextureStore, meshStore: MeshStore) {\r\n\t\tthis.textureStore = textureStore;\r\n\t\tthis.meshStore = meshStore;\r\n\r\n\t\t// ---- Graphics objects ----\r\n\t\tthis.graphicBundles = new Array<GraphicsBundle>();\r\n\t\tthis.grassSpawners = new Array<GraphicsBundle>();\r\n\t\t// --------------------------\r\n\r\n\t\t// ---- Lighting ----\r\n\t\tthis.directionalLight = new DirectionalLight(gl, lightingPass);\r\n\t\tthis.pointLights = new Array<PointLight>();\r\n\t\t// ------------------\r\n\r\n\t\t// ---- Particles ----\r\n\t\tthis.particleSpawners = new Array<ParticleSpawner>();\r\n\t\t// -------------------\r\n\t}\r\n\r\n\tgetNewPhongQuad(diffusePath: string, specularPath: string): GraphicsBundle {\r\n\t\tconst length = this.graphicBundles.push(\r\n\t\t\tnew GraphicsBundle(\r\n\t\t\t\tthis.textureStore.getTexture(diffusePath),\r\n\t\t\t\tthis.textureStore.getTexture(specularPath),\r\n\t\t\t\tnew PhongQuad(geometryPass)\r\n\t\t\t)\r\n\t\t);\r\n\t\treturn this.graphicBundles[length - 1];\r\n\t}\r\n\r\n\tgetNewMesh(\r\n\t\tmeshPath: string,\r\n\t\tdiffusePath: string,\r\n\t\tspecularPath: string\r\n\t): GraphicsBundle {\r\n\t\tconst length = this.graphicBundles.push(\r\n\t\t\tnew GraphicsBundle(\r\n\t\t\t\tthis.textureStore.getTexture(diffusePath),\r\n\t\t\t\tthis.textureStore.getTexture(specularPath),\r\n\t\t\t\tthis.meshStore.getMesh(meshPath)\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\treturn this.graphicBundles[length - 1];\r\n\t}\r\n\r\n\tgetNewHeightMap(\r\n\t\theightmapPath: string,\r\n\t\tdiffusePath: string,\r\n\t\tspecularPath: string\r\n\t): GraphicsBundle {\r\n\t\tconst length = this.graphicBundles.push(\r\n\t\t\tnew GraphicsBundle(\r\n\t\t\t\tthis.textureStore.getTexture(diffusePath),\r\n\t\t\t\tthis.textureStore.getTexture(specularPath),\r\n\t\t\t\tthis.meshStore.getHeightmap(heightmapPath)\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\treturn this.graphicBundles[length - 1];\r\n\t}\r\n\r\n\tgetNewParticleSpawner(\r\n\t\ttexturePath: string,\r\n\t\tnumberOfStartingParticles: number = 0\r\n\t): ParticleSpawner {\r\n\t\tlet length = this.particleSpawners.push(\r\n\t\t\tnew ParticleSpawner(\r\n\t\t\t\tparticleShaderProgram,\r\n\t\t\t\tthis.textureStore.getTexture(texturePath),\r\n\t\t\t\tnumberOfStartingParticles\r\n\t\t\t)\r\n\t\t);\r\n\t\treturn this.particleSpawners[length - 1];\r\n\t}\r\n\r\n\tgetNewGrassSpawner(\r\n\t\tdiffuseTexturePath: string,\r\n\t\tspecularTexturePath: string,\r\n\t\tnumberOfStartingParticles: number = 0\r\n\t): GraphicsBundle {\r\n\t\tlet length = this.grassSpawners.push(\r\n\t\t\tnew GraphicsBundle(\r\n\t\t\t\tthis.textureStore.getTexture(diffuseTexturePath),\r\n\t\t\t\tthis.textureStore.getTexture(specularTexturePath),\r\n\t\t\t\tnew GrassSpawner(grassShaderProgram, numberOfStartingParticles)\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\treturn this.grassSpawners[length - 1];\r\n\t}\r\n\r\n\tgetNewPointLight(): PointLight {\r\n\t\tconst length = this.pointLights.push(new PointLight(gl, lightingPass));\r\n\t\treturn this.pointLights[length - 1];\r\n\t}\r\n\r\n\tgetDirectionalLight(): DirectionalLight {\r\n\t\treturn this.directionalLight;\r\n\t}\r\n\r\n\tdeleteGraphicsBundle(object: GraphicsBundle) {\r\n\t\tthis.graphicBundles = this.graphicBundles.filter((o) => object !== o);\r\n\t}\r\n\r\n\tdeletePointLight(light: PointLight) {\r\n\t\tthis.pointLights = this.pointLights.filter((l) => light !== l);\r\n\t}\r\n\r\n\tdeleteParticleSpawner(particleSpawner: ParticleSpawner) {\r\n\t\tthis.particleSpawners = this.particleSpawners.filter(\r\n\t\t\t(ps) => particleSpawner !== ps\r\n\t\t);\r\n\t}\r\n\r\n\trenderScene(\r\n\t\tshaderProgram: ShaderProgram,\r\n\t\tbindSpecialTextures: boolean = true\r\n\t) {\r\n\t\tfor (let bundle of this.graphicBundles) {\r\n\t\t\tbundle.graphicsObject.shaderProgram = shaderProgram;\r\n\t\t\tbundle.draw(bindSpecialTextures);\r\n\t\t}\r\n\t}\r\n\r\n\trenderGrass(\r\n\t\tshaderProgram: ShaderProgram,\r\n\t\tbindSpecialTextures: boolean = true\r\n\t) {\r\n\t\tfor (let bundle of this.grassSpawners) {\r\n\t\t\tbundle.graphicsObject.shaderProgram = shaderProgram;\r\n\t\t\tbundle.draw(bindSpecialTextures);\r\n\t\t}\r\n\t}\r\n}\r\n","import { gl } from \"../../../main\";\r\nimport ShaderProgram from \"../ShaderProgram\";\r\n\r\nconst geometryVertexShaderSrc: string = `#version 300 es\r\n// If inputs change, also update GeometryPass::setupVertexAttributePointers to match\r\nlayout (location = 0) in vec3 inPosition;\r\nlayout (location = 1) in vec3 inNormal;\r\nlayout (location = 2) in vec2 inTexCoords;\r\n\r\n// If uniforms change, also update PhongShaderProgram to match\r\nuniform mat4 modelMatrix;\r\nuniform mat4 viewProjMatrix;\r\nuniform mat4 textureMatrix;\r\n\r\nout vec3 fragPos;\r\nout vec3 fragNormal;\r\nout vec2 texCoords;\r\n\r\nvoid main() {\r\n    vec4 worldPos = modelMatrix * vec4(inPosition, 1.0);\r\n\ttexCoords = vec2(textureMatrix * vec4(inTexCoords, 0.0, 1.0));\r\n\r\n\t// Calculate normal matrix, should be done on CPU but I can't be bothered with implementing inverse of a matrix and don't want to find a good lib atm\r\n\tmat3 normalMatrix = mat3(modelMatrix);\r\n\tnormalMatrix = inverse(normalMatrix);\r\n\tnormalMatrix = transpose(normalMatrix);\r\n\r\n\tfragNormal = normalize(normalMatrix * inNormal);\r\n\tfragPos = worldPos.xyz;\r\n\r\n    gl_Position = viewProjMatrix * worldPos;\r\n}`;\r\n\r\nexport const geometryFragmentShaderSrc: string = `#version 300 es\r\nprecision highp float;\r\n\r\nin vec3 fragPos;\r\nin vec3 fragNormal;\r\nin vec2 texCoords;\r\n\r\nlayout (location = 0) out vec4 gPositionEmission;\r\nlayout (location = 1) out vec4 gNormal;\r\nlayout (location = 2) out vec4 gColourSpec;\r\n\r\nstruct Material {\r\n\tsampler2D diffuse;\r\n\tsampler2D specular;\r\n\tsampler2D emission;\r\n};\r\n\r\nuniform Material material;\r\nuniform vec3 baseColor;\r\n\r\nmat4 thresholdMatrix = mat4(\r\n\t1.0, 9.0, 3.0, 11.0,\r\n\t13.0, 5.0, 15.0, 7.0,\r\n\t4.0, 12.0, 2.0, 10.0,\r\n\t16.0, 8.0, 14.0, 6.0\r\n\t);\r\n\r\nvoid main() {\r\n\tfloat opacity = texture(material.diffuse, texCoords).a;\r\n\r\n\tfloat threshold = thresholdMatrix[int(floor(mod(gl_FragCoord.x, 4.0)))][int(floor(mod(gl_FragCoord.y, 4.0)))] / 17.0;\r\n    if (threshold >= opacity) {\r\n        discard;\r\n    }\r\n\r\n\tgColourSpec.rgb = texture(material.diffuse, texCoords).rgb;\r\n\tif (baseColor.r > 0.0 || baseColor.g > 0.0 || baseColor.b > 0.0) {\r\n\t\tgColourSpec.rgb = baseColor;\r\n\t}\r\n    gColourSpec.a = texture(material.specular, texCoords).r;\r\n\t\r\n\tgPositionEmission.rgb = fragPos;\r\n\tgPositionEmission.a = texture(material.emission, texCoords).r;\r\n\tgNormal = vec4(fragNormal, 1.0);\r\n}`;\r\n\r\nclass GeometryPass extends ShaderProgram {\r\n\tconstructor() {\r\n\t\tsuper(\"GeometryPass\", geometryVertexShaderSrc, geometryFragmentShaderSrc);\r\n\r\n\t\tthis.use();\r\n\r\n\t\tthis.setUniformLocation(\"modelMatrix\");\r\n\t\tthis.setUniformLocation(\"viewProjMatrix\");\r\n\t\tthis.setUniformLocation(\"textureMatrix\");\r\n\r\n\t\tthis.setUniformLocation(\"material.diffuse\");\r\n\t\tthis.setUniformLocation(\"material.specular\");\r\n\t\tthis.setUniformLocation(\"material.emission\");\r\n\r\n\t\tthis.setUniformLocation(\"baseColor\");\r\n\r\n\t\tgl.uniform1i(this.getUniformLocation(\"material.diffuse\")[0], 0);\r\n\t\tgl.uniform1i(this.getUniformLocation(\"material.specular\")[0], 1);\r\n\t\tgl.uniform1i(this.getUniformLocation(\"material.emission\")[0], 2);\r\n\t}\r\n\r\n\tsetupVertexAttributePointers(): void {\r\n\t\t// Change if input layout changes in shaders\r\n\t\tconst stride = 8 * 4;\r\n\t\tgl.vertexAttribPointer(0, 3, gl.FLOAT, false, stride, 0);\r\n\t\tgl.enableVertexAttribArray(0);\r\n\r\n\t\tgl.vertexAttribPointer(1, 3, gl.FLOAT, false, stride, 3 * 4);\r\n\t\tgl.enableVertexAttribArray(1);\r\n\r\n\t\tgl.vertexAttribPointer(2, 2, gl.FLOAT, false, stride, 6 * 4);\r\n\t\tgl.enableVertexAttribArray(2);\r\n\t}\r\n}\r\n\r\nexport let geometryPass = null;\r\n\r\nexport let createGeometryPass = function () {\r\n\tgeometryPass = new GeometryPass();\r\n};\r\n","import ShaderProgram from \"../ShaderProgram\";\r\nimport { screenQuadVertexSrc } from \"../ScreenQuadShaderProgram\";\r\nimport { gl } from \"../../../main\";\r\n\r\nexport let pointLightsToAllocate: number = 100;\r\n\r\nconst lightingFragmentShaderSrc: string =\r\n\t`#version 300 es\r\nprecision highp float;\r\n\r\nin vec2 texCoords;\r\n\r\nout vec4 final_colour;\r\n\r\nuniform sampler2D gPositionEmission;\r\nuniform sampler2D gNormal;\r\nuniform sampler2D gColourSpec;\r\nuniform sampler2D depthMap;\r\n\r\nstruct PointLight {\r\n\tvec3 position;\r\n\tvec3 colour;\r\n\r\n\tfloat constant;\r\n\tfloat linear;\r\n\tfloat quadratic;\r\n};\r\n\r\nstruct DirectionalLight {\r\n\tvec3 direction;\r\n\tvec3 colour;\r\n\tfloat ambientMultiplier;\r\n};\r\n\r\n#define NR_POINT_LIGHTS ` +\r\n\tpointLightsToAllocate +\r\n\t`\r\n\r\nuniform DirectionalLight directionalLight;\r\nuniform PointLight pointLights[NR_POINT_LIGHTS];\r\nuniform int nrOfPointLights;\r\nuniform vec3 camPos; //Used for specular lighting\r\nuniform mat4 lightSpaceMatrix; // Used for shadow fragment position\r\n\r\nvec3 CalcDirectionalLight(DirectionalLight light, vec3 normal, vec3 cameraDir, vec3 diffuse, float specular, float shininess, vec4 lightSpaceFragPos);\r\nvec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 cameraDir, vec3 diffuse, float specular, float shininess);\r\nfloat CalcShadow(vec4 lightSpaceFragPos, vec3 normal);\r\n\r\nvoid main() {\r\n\t// Discard fragment if normal alpha is 0\r\n\tvec4 fragNormalWithAlpha = texture(gNormal, texCoords);\r\n\tif (fragNormalWithAlpha.a <= 0.0001) {\r\n\t\tdiscard;\r\n\t}\r\n\t\r\n\tvec3 fragPos = texture(gPositionEmission, texCoords).rgb;\r\n\tvec3 fragNormal = fragNormalWithAlpha.rgb;\r\n\tfloat shininess = 32.0f;\r\n\tvec3 diffuse = texture(gColourSpec, texCoords).rgb;\r\n\tfloat specular = texture(gColourSpec, texCoords).a;\r\n\tfloat emission = texture(gPositionEmission, texCoords).a;\r\n\tvec4 lightSpaceFragPos = (lightSpaceMatrix * vec4(fragPos, 1.0f));\r\n\t\r\n\tvec3 cameraDir = normalize(camPos - fragPos); //Direction vector from fragment to camera\r\n\t\r\n\t// vec3 result = fragNormal;\r\n\t// vec3 result = diffuse;\r\n\t// vec3 result = vec3(specular, specular, specular);\r\n    vec3 result = vec3(0.0f);\r\n\tresult += CalcDirectionalLight(directionalLight, fragNormal, cameraDir, diffuse, specular, shininess, lightSpaceFragPos);\r\n\t\r\n\tfor (int i = 0; i < nrOfPointLights; i++) {\r\n\t\tresult += CalcPointLight(pointLights[i], fragNormal, fragPos, cameraDir, diffuse, specular, shininess);\r\n\t}\r\n\r\n\tfinal_colour = vec4(result * (1.0 - emission) + diffuse * emission, 1.0f); // Set colour of fragment. Since we use screen door transparency, do not use alpha value\r\n}\r\n\r\n// Calculates the colour when using a directional light\r\nvec3 CalcDirectionalLight(DirectionalLight light, vec3 normal, vec3 cameraDir, vec3 diffuse, float specular, float shininess, vec4 lightSpaceFragPos) {\r\n\tvec3 lightDir = normalize(-light.direction); //light direction from the fragment position\r\n\r\n\t// Diffuse shading\r\n\tfloat diff = max(dot(normal, lightDir), 0.0);\r\n\r\n\t// Specular shading\r\n\tvec3 reflectDir = reflect(-lightDir, normal);\r\n\tfloat spec = pow(max(dot(cameraDir, reflectDir), 0.0), shininess);\r\n\r\n\t// Combine results\t\r\n\tvec3 ambient = diffuse * light.ambientMultiplier; //Ambient lighting\r\n\tvec3 finalDiffuse = light.colour * diff * diffuse;\r\n\tvec3 finalSpecular = light.colour * spec * specular;\r\n\t\r\n\tfloat shadow = CalcShadow(lightSpaceFragPos, normal);\r\n\tvec3 lighting = (ambient + (1.0f - shadow) * (finalDiffuse + finalSpecular));\r\n\treturn lighting;\r\n}\r\n\r\n// Calculates the colour when using a point light.\r\nvec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 cameraDir, vec3 diffuse, float specular, float shininess) {\r\n\tvec3 lighting;\r\n\tvec3 lightDir = normalize(light.position - fragPos); //light direction from the fragment position\r\n\r\n\t// Diffuse shading\r\n\tfloat diff = max(dot(normal, lightDir), 0.0);\r\n\r\n\t// Specular shading\r\n\tvec3 reflectDir = reflect(-lightDir, normal);\r\n\tfloat spec = pow(max(dot(cameraDir, reflectDir), 0.0), shininess);\r\n\r\n\t// Attenuation\r\n\tfloat distance = length(light.position - fragPos);\r\n\tfloat attenuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * (distance * distance));\r\n\t\r\n\t// Combine results\r\n\tvec3 finalDiffuse = light.colour * diff * diffuse;\r\n\tvec3 finalSpecular = light.colour * spec * specular;\r\n\tfinalDiffuse *= attenuation;\r\n\tfinalSpecular *= attenuation;\r\n\tlighting = finalDiffuse + finalSpecular;\r\n\t//lighting = finalSpecular;\r\n\treturn lighting;\r\n}\r\n\r\nfloat CalcShadow(vec4 lightSpaceFragPos, vec3 normal) {\r\n\t// perform perspective divide\r\n    vec3 projCoords = lightSpaceFragPos.xyz / lightSpaceFragPos.w;\r\n\r\n    // transform to [0,1] range\r\n    projCoords = projCoords * 0.5 + 0.5;\r\n\r\n\tif (projCoords.z > 1.0) {\r\n\t\treturn 0.0;\r\n\t}\r\n\r\n    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)\r\n    float closestDepth = texture(depthMap, projCoords.xy).r; \r\n\r\n    // get depth of current fragment from light's perspective\r\n    float currentDepth = projCoords.z;\r\n\r\n    // check whether current frag pos is in shadow\r\n\t// float bias = 0.001;\r\n\tfloat bias = max(0.002 * (1.0 - dot(normal, directionalLight.direction)), 0.002);\r\n\t\r\n\tfloat shadow = 0.0;\r\n\tivec2 textureSize = textureSize(depthMap, 0);\r\n\tvec2 texelSize = vec2(1.0 / float(textureSize.x), 1.0 / float(textureSize.y));\r\n\tfor(int x = -1; x <= 1; ++x)\r\n\t{\r\n\t\tfor(int y = -1; y <= 1; ++y)\r\n\t\t{\r\n\t\t\tfloat pcfDepth = texture(depthMap, projCoords.xy + vec2(x, y) * texelSize).r; \r\n\t\t\tshadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;        \r\n\t\t}    \r\n\t}\r\n\tshadow = shadow / 9.0;\r\n\r\n    return shadow;\r\n}`;\r\n\r\nclass LightingPass extends ShaderProgram {\r\n\tconstructor() {\r\n\t\tsuper(\"LightingPass\", screenQuadVertexSrc, lightingFragmentShaderSrc);\r\n\r\n\t\tthis.use();\r\n\r\n\t\tthis.setUniformLocation(\"gPositionEmission\");\r\n\t\tthis.setUniformLocation(\"gNormal\");\r\n\t\tthis.setUniformLocation(\"gColourSpec\");\r\n\t\tthis.setUniformLocation(\"depthMap\");\r\n\r\n\t\tgl.uniform1i(this.getUniformLocation(\"gPositionEmission\")[0], 0);\r\n\t\tgl.uniform1i(this.getUniformLocation(\"gNormal\")[0], 1);\r\n\t\tgl.uniform1i(this.getUniformLocation(\"gColourSpec\")[0], 2);\r\n\t\tgl.uniform1i(this.getUniformLocation(\"depthMap\")[0], 3);\r\n\r\n\t\tfor (let i = 0; i < pointLightsToAllocate; i++) {\r\n\t\t\tthis.setUniformLocation(\"pointLights[\" + i + \"].position\");\r\n\t\t\tthis.setUniformLocation(\"pointLights[\" + i + \"].colour\");\r\n\r\n\t\t\tthis.setUniformLocation(\"pointLights[\" + i + \"].constant\");\r\n\t\t\tthis.setUniformLocation(\"pointLights[\" + i + \"].linear\");\r\n\t\t\tthis.setUniformLocation(\"pointLights[\" + i + \"].quadratic\");\r\n\t\t}\r\n\r\n\t\tthis.setUniformLocation(\"directionalLight.direction\");\r\n\t\tthis.setUniformLocation(\"directionalLight.colour\");\r\n\t\tthis.setUniformLocation(\"directionalLight.ambientMultiplier\");\r\n\t\tthis.setUniformLocation(\"nrOfPointLights\");\r\n\t\tthis.setUniformLocation(\"camPos\");\r\n\t\tthis.setUniformLocation(\"lightSpaceMatrix\");\r\n\t}\r\n\r\n\tsetupVertexAttributePointers(): void {\r\n\t\t// Change if input layout changes in shaders\r\n\t\tconst stride = 4 * 4;\r\n\t\tgl.vertexAttribPointer(0, 2, gl.FLOAT, false, stride, 0);\r\n\t\tgl.enableVertexAttribArray(0);\r\n\r\n\t\tgl.vertexAttribPointer(1, 2, gl.FLOAT, false, stride, 2 * 4);\r\n\t\tgl.enableVertexAttribArray(1);\r\n\t}\r\n}\r\n\r\nexport let lightingPass = null;\r\n\r\nexport let createLightingPass = function () {\r\n\tlightingPass = new LightingPass();\r\n};\r\n","import { gl } from \"../../main\";\r\nimport { geometryFragmentShaderSrc } from \"./DeferredRendering/GeometryPass\";\r\nimport ShaderProgram from \"./ShaderProgram\";\r\n\r\nconst grassVertexShaderSrc: string = `#version 300 es\r\n\r\nlayout (location = 0) in vec2 inVertexPosition;\r\nlayout (location = 1) in vec2 inTexCoords;\r\n\r\n// Instanced attributes starts here\r\nlayout (location = 2) in vec3 inPos;\r\nlayout (location = 3) in float inSize;\r\nlayout (location = 4) in vec3 inTipOffset;\r\n\r\nuniform mat4 viewProjMatrix;\r\nuniform vec3 cameraPos;\r\nuniform float currentTime;\r\n\r\nout vec3 fragPos;\r\nout vec3 fragNormal;\r\nout vec2 texCoords;\r\n\r\nvoid main() {\r\n    // Billboarding\r\n    vec3 camDir = cameraPos - inPos;\r\n    vec3 rightVec = normalize(cross(vec3(0.0, 1.0, 0.0), camDir));\r\n\t// fragNormal = vec3(-rightVec.z, 0.0, rightVec.x);\r\n    vec3 upVec = vec3(0.0, 1.0, 0.0);\r\n\tfragNormal = upVec;\r\n\tfloat size = inSize + length(camDir) * 0.0;\r\n    rightVec = rightVec * inVertexPosition.x * size;\r\n    upVec = upVec * inVertexPosition.y * size;\r\n\tfragPos = vec3(rightVec + upVec + inPos + (inTipOffset + vec3(sin(currentTime + inPos.x) * 0.1, 0.0, 0.0)) * inVertexPosition.y);\r\n    gl_Position = viewProjMatrix * vec4(fragPos, 1.0);\r\n\r\n    // gl_Position = viewProjMatrix * vec4(vec3(inVertexPosition, 0.0) * size + currentPos, 1.0); // No billboarding\r\n    texCoords = inTexCoords;\r\n}`;\r\n\r\nclass GrassShaderProgram extends ShaderProgram {\r\n\tconstructor() {\r\n\t\tsuper(\r\n\t\t\t\"GrassShaderProgram\",\r\n\t\t\tgrassVertexShaderSrc,\r\n\t\t\tgeometryFragmentShaderSrc,\r\n\t\t\tfalse\r\n\t\t);\r\n\r\n\t\tthis.use();\r\n\r\n\t\tthis.setUniformLocation(\"texture0\");\r\n\t\tgl.uniform1i(this.getUniformLocation(\"texture0\")[0], 0);\r\n\r\n\t\tthis.setUniformLocation(\"viewProjMatrix\");\r\n\t\tthis.setUniformLocation(\"cameraPos\");\r\n\t\tthis.setUniformLocation(\"currentTime\");\r\n\r\n\t\tthis.setUniformLocation(\"material.diffuse\");\r\n\t\tthis.setUniformLocation(\"material.specular\");\r\n\t\tthis.setUniformLocation(\"material.emission\");\r\n\r\n\t\tgl.uniform1i(this.getUniformLocation(\"material.diffuse\")[0], 0);\r\n\t\tgl.uniform1i(this.getUniformLocation(\"material.specular\")[0], 1);\r\n\t\tgl.uniform1i(this.getUniformLocation(\"material.emission\")[0], 2);\r\n\t}\r\n\r\n\tsetupVertexAttributePointers(): void {\r\n\t\t// Change if input layout changes in shaders\r\n\t\tconst stride = 4 * 4;\r\n\t\tgl.vertexAttribPointer(0, 2, gl.FLOAT, false, stride, 0);\r\n\t\tgl.enableVertexAttribArray(0);\r\n\r\n\t\tgl.vertexAttribPointer(1, 2, gl.FLOAT, false, stride, 2 * 4);\r\n\t\tgl.enableVertexAttribArray(1);\r\n\t}\r\n\r\n\tsetupInstancedVertexAttributePointers(): void {\r\n\t\tconst stride = 7 * 4;\r\n\t\tgl.vertexAttribPointer(2, 3, gl.FLOAT, false, stride, 0);\r\n\t\tgl.enableVertexAttribArray(2);\r\n\t\tgl.vertexAttribDivisor(2, 1);\r\n\r\n\t\tgl.vertexAttribPointer(3, 1, gl.FLOAT, false, stride, 3 * 4);\r\n\t\tgl.enableVertexAttribArray(3);\r\n\t\tgl.vertexAttribDivisor(3, 1);\r\n\r\n\t\tgl.vertexAttribPointer(4, 3, gl.FLOAT, false, stride, 4 * 4);\r\n\t\tgl.enableVertexAttribArray(4);\r\n\t\tgl.vertexAttribDivisor(4, 1);\r\n\t}\r\n}\r\n\r\nexport let grassShaderProgram: GrassShaderProgram = null;\r\n\r\nexport let createGrassShaderProgram = function () {\r\n\tgrassShaderProgram = new GrassShaderProgram();\r\n};\r\n","import { gl } from \"../../main\";\r\nimport ShaderProgram from \"./ShaderProgram\";\r\n\r\nconst particleVertexShaderSrc: string = `#version 300 es\r\n\r\nlayout (location = 0) in vec2 inVertexPosition;\r\nlayout (location = 1) in vec2 inTexCoords;\r\n\r\n// Instanced attributes starts here\r\nlayout (location = 2) in vec3 inStartPosition;\r\nlayout (location = 3) in float inSize;\r\nlayout (location = 4) in vec3 inStartVel;\r\nlayout (location = 5) in float inStartTime;\r\nlayout (location = 6) in vec3 inConstantAcceleration;\r\n// layout (location = 7) in float padding;\r\n\r\nuniform mat4 viewProjMatrix;\r\nuniform vec3 cameraPos;\r\nuniform float currentTime;\r\nuniform float fadePerSecond;\r\nuniform float sizeChangePerSecond;\r\n\r\nout vec2 texCoords;\r\nout float alpha;\r\n\r\nvoid main() {\r\n    // Calculate how long this has been alive\r\n    float lifeTime = currentTime - inStartTime;\r\n\r\n    // Calculate current position\r\n    vec3 currentPos = inStartPosition + (inStartVel * lifeTime + (inConstantAcceleration * lifeTime) * lifeTime) / 2.0;\r\n\r\n    // Billboarding\r\n    vec3 camDir = cameraPos - currentPos;\r\n    vec3 rightVec = normalize(cross(vec3(0.0, 1.0, 0.0), camDir));\r\n    vec3 upVec = normalize(cross(camDir, rightVec));\r\n    rightVec = rightVec * inVertexPosition.x * (inSize + sizeChangePerSecond * lifeTime);\r\n    upVec = upVec * inVertexPosition.y * (inSize + sizeChangePerSecond * lifeTime);\r\n    gl_Position = viewProjMatrix * vec4(rightVec + upVec + currentPos, 1.0);\r\n\r\n    // gl_Position = viewProjMatrix * vec4(vec3(inVertexPosition, 0.0) * inSize + currentPos, 1.0); // No billboarding\r\n    texCoords = inTexCoords;\r\n    alpha = max(1.0 - lifeTime * fadePerSecond, 0.0);\r\n}`;\r\n\r\nconst particleFragmentShaderSrc: string = `#version 300 es\r\nprecision highp float;\r\n\r\nin vec2 texCoords;\r\nin float alpha;\r\n\r\nuniform sampler2D texture0;\r\n\r\nout vec4 FragColor;\r\n\r\nmat4 thresholdMatrix = mat4(\r\n    1.0, 9.0, 3.0, 11.0,\r\n    13.0, 5.0, 15.0, 7.0,\r\n    4.0, 12.0, 2.0, 10.0,\r\n    16.0, 8.0, 14.0, 6.0\r\n    );\r\n\r\nvoid main()\r\n{\r\n    FragColor = texture(texture0, texCoords);\r\n\r\n    FragColor.a = FragColor.a * alpha;\r\n    \r\n    float threshold = thresholdMatrix[int(floor(mod(gl_FragCoord.x, 4.0)))][int(floor(mod(gl_FragCoord.y, 4.0)))] / 17.0;\r\n    if (threshold >= FragColor.a) {\r\n        discard;\r\n    }\r\n\r\n    FragColor.a = 1.0f; // Since we use screen door transparency, do not use alpha value\r\n}`;\r\n\r\nclass ParticleShaderProgram extends ShaderProgram {\r\n\tconstructor() {\r\n\t\tsuper(\r\n\t\t\t\"ParticleShaderProgram\",\r\n\t\t\tparticleVertexShaderSrc,\r\n\t\t\tparticleFragmentShaderSrc,\r\n\t\t\tfalse\r\n\t\t);\r\n\r\n\t\tthis.use();\r\n\r\n\t\tthis.setUniformLocation(\"texture0\");\r\n\t\tgl.uniform1i(this.getUniformLocation(\"texture0\")[0], 0);\r\n\r\n\t\tthis.setUniformLocation(\"viewProjMatrix\");\r\n\t\tthis.setUniformLocation(\"cameraPos\");\r\n\t\tthis.setUniformLocation(\"currentTime\");\r\n\t\tthis.setUniformLocation(\"fadePerSecond\");\r\n\t\tthis.setUniformLocation(\"sizeChangePerSecond\");\r\n\t}\r\n\r\n\tsetupVertexAttributePointers(): void {\r\n\t\t// Change if input layout changes in shaders\r\n\t\tconst stride = 4 * 4;\r\n\t\tgl.vertexAttribPointer(0, 2, gl.FLOAT, false, stride, 0);\r\n\t\tgl.enableVertexAttribArray(0);\r\n\r\n\t\tgl.vertexAttribPointer(1, 2, gl.FLOAT, false, stride, 2 * 4);\r\n\t\tgl.enableVertexAttribArray(1);\r\n\t}\r\n\r\n\tsetupInstancedVertexAttributePointers(): void {\r\n\t\tconst stride = 11 * 4;\r\n\t\tgl.vertexAttribPointer(2, 3, gl.FLOAT, false, stride, 0);\r\n\t\tgl.enableVertexAttribArray(2);\r\n\t\tgl.vertexAttribDivisor(2, 1);\r\n\r\n\t\tgl.vertexAttribPointer(3, 1, gl.FLOAT, false, stride, 3 * 4);\r\n\t\tgl.enableVertexAttribArray(3);\r\n\t\tgl.vertexAttribDivisor(3, 1);\r\n\r\n\t\tgl.vertexAttribPointer(4, 3, gl.FLOAT, false, stride, 4 * 4);\r\n\t\tgl.enableVertexAttribArray(4);\r\n\t\tgl.vertexAttribDivisor(4, 1);\r\n\r\n\t\tgl.vertexAttribPointer(5, 1, gl.FLOAT, false, stride, 7 * 4);\r\n\t\tgl.enableVertexAttribArray(5);\r\n\t\tgl.vertexAttribDivisor(5, 1);\r\n\r\n\t\tgl.vertexAttribPointer(6, 3, gl.FLOAT, false, stride, 8 * 4);\r\n\t\tgl.enableVertexAttribArray(6);\r\n\t\tgl.vertexAttribDivisor(6, 1);\r\n\r\n\t\t// gl.vertexAttribPointer(7, 1, gl.FLOAT, false, stride, 11 * 4);\r\n\t\t// gl.enableVertexAttribArray(7);\r\n\t\t// gl.vertexAttribDivisor(7, 1);\r\n\t}\r\n}\r\n\r\nexport let particleShaderProgram: ParticleShaderProgram = null;\r\n\r\nexport let createParticleShaderProgram = function () {\r\n\tparticleShaderProgram = new ParticleShaderProgram();\r\n};\r\n","import ShaderProgram from \"./ShaderProgram\";\r\nimport { pointLightsToAllocate } from \"./DeferredRendering/LightingPass\";\r\nimport { gl } from \"../../main\";\r\n\r\nconst phongVertexShaderSrc: string = `#version 300 es\r\n// If inputs change, also update PhongShaderProgram::setupVertexAttributePointers to match\r\nlayout (location = 0) in vec3 inPosition;\r\nlayout (location = 1) in vec3 inNormal;\r\nlayout (location = 2) in vec2 inTexCoords;\r\n\r\n// If uniforms change, also update PhongShaderProgram to match\r\nuniform mat4 modelMatrix;\r\nuniform mat4 viewProjMatrix;\r\nuniform mat4 textureMatrix;\r\n\r\nout vec3 fragPos;\r\nout vec3 fragNormal;\r\nout vec2 texCoords;\r\n\r\nvoid main() {\r\n    vec4 worldPos = modelMatrix * vec4(inPosition, 1.0);\r\n\ttexCoords = vec2(textureMatrix * vec4(inTexCoords, 0.0, 1.0));\r\n\tfragPos = worldPos.xyz;\r\n\r\n\t// Calculate normal matrix, should be done on CPU but I can't be bothered with implementing inverse of a matrix and don't want to find a good lib atm\r\n\tmat3 normalMatrix = mat3(modelMatrix);\r\n\tnormalMatrix = inverse(normalMatrix);\r\n\tnormalMatrix = transpose(normalMatrix);\r\n\r\n\tfragNormal = normalize(normalMatrix * inNormal);\r\n\t\r\n    gl_Position = viewProjMatrix * worldPos;\r\n}`;\r\n\r\n// let pointLightsToAllocate: number = 100;\r\n\r\nconst phongFragmentShaderSrc: string =\r\n\t`#version 300 es\r\nprecision highp float;\r\n\r\nin vec3 fragPos;\r\nin vec3 fragNormal;\r\nin vec2 texCoords;\r\n\r\nout vec4 final_colour;\r\n\r\nstruct Material {\r\n\tsampler2D diffuse;\r\n\tsampler2D specular;\r\n};\r\n\r\nuniform Material material;\r\n\r\nstruct PointLight {\r\n\tvec3 position;\r\n\tvec3 colour;\r\n\r\n\tfloat constant;\r\n\tfloat linear;\r\n\tfloat quadratic;\r\n};\r\n\r\nstruct DirectionalLight {\r\n\tvec3 direction;\r\n\tvec3 colour;\r\n\tfloat ambientMultiplier;\r\n};\r\n\r\n#define NR_POINT_LIGHTS ` +\r\n\tpointLightsToAllocate +\r\n\t`\r\n\r\nuniform DirectionalLight directionalLight;\r\nuniform PointLight pointLights[NR_POINT_LIGHTS];\r\nuniform int nrOfPointLights;\r\nuniform vec3 camPos; //Used for specular lighting\r\n\r\nvec3 CalcDirectionalLight(DirectionalLight light, vec3 normal, vec3 cameraDir, vec3 diffuse, float specular, float shininess);\r\nvec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 cameraDir, vec3 diffuse, float specular, float shininess);\r\n\r\nmat4 thresholdMatrix = mat4(\r\n\t1.0, 9.0, 3.0, 11.0,\r\n\t13.0, 5.0, 15.0, 7.0,\r\n\t4.0, 12.0, 2.0, 10.0,\r\n\t16.0, 8.0, 14.0, 6.0\r\n\t);\r\n\r\nvoid main() {\r\n\tfloat opacity = texture(material.diffuse, texCoords).a;\r\n\r\n\tfloat threshold = thresholdMatrix[int(floor(mod(gl_FragCoord.x, 4.0)))][int(floor(mod(gl_FragCoord.y, 4.0)))] / 17.0;\r\n    if (threshold >= opacity) {\r\n        discard;\r\n    }\r\n\r\n\tvec3 result = vec3(0.0f, 0.0f, 0.0f);\r\n\r\n\tfloat shininess = 32.0f;\r\n\tvec3 diffuse = texture(material.diffuse, texCoords).xyz;\r\n\tfloat specular = texture(material.specular, texCoords).r;\r\n\t\r\n\tvec3 cameraDir = normalize(camPos - fragPos); //Direction vector from fragment to camera\r\n\t\r\n\tresult += CalcDirectionalLight(directionalLight, fragNormal, cameraDir, diffuse, specular, shininess);\r\n\t\r\n\tfor (int i = 0; i < nrOfPointLights; i++) {\r\n\t\tresult += CalcPointLight(pointLights[i], fragNormal, fragPos, cameraDir, diffuse, specular, shininess);\t\r\n\t}\r\n\r\n\tfinal_colour = vec4(result, 1.0f); // Set colour of fragment. Since we use screen door transparency, do not use alpha value\r\n}\r\n\r\n// Calculates the colour when using a directional light\r\nvec3 CalcDirectionalLight(DirectionalLight light, vec3 normal, vec3 cameraDir, vec3 diffuse, float specular, float shininess) {\r\n\tvec3 ambient = diffuse * light.ambientMultiplier; //Ambient lighting\r\n\tvec3 lightDir = normalize(-light.direction); //light direction from the fragment position\r\n\r\n\t// Diffuse shading\r\n\tfloat diff = max(dot(normal, lightDir), 0.0);\r\n\r\n\t// Specular shading\r\n\tvec3 reflectDir = reflect(-lightDir, normal);\r\n\tfloat spec = pow(max(dot(cameraDir, reflectDir), 0.0), shininess);\r\n\r\n\t// Combine results\r\n\tvec3 finalDiffuse = light.colour * diff * diffuse;\r\n\tvec3 finalSpecular = light.colour * spec * specular;\r\n\t\r\n\tvec3 lighting = (ambient + finalDiffuse + finalSpecular);\r\n\treturn lighting;\r\n}\r\n\r\n// Calculates the colour when using a point light.\r\nvec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 cameraDir, vec3 diffuse, float specular, float shininess) {\r\n\tvec3 lighting;\r\n\tvec3 lightDir = normalize(light.position - fragPos); //light direction from the fragment position\r\n\r\n\t// Diffuse shading\r\n\tfloat diff = max(dot(normal, lightDir), 0.0);\r\n\r\n\t// Specular shading\r\n\tvec3 reflectDir = reflect(-lightDir, normal);\r\n\tfloat spec = pow(max(dot(cameraDir, reflectDir), 0.0), shininess);\r\n\r\n\t// Attenuation\r\n\tfloat distance = length(light.position - fragPos);\r\n\tfloat attenuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * (distance * distance));\r\n\t\r\n\t// Combine results\r\n\tvec3 finalDiffuse = light.colour * diff * diffuse;\r\n\tvec3 finalSpecular = light.colour * spec * specular;\r\n\tfinalDiffuse *= attenuation;\r\n\tfinalSpecular *= attenuation;\r\n\tlighting = finalDiffuse + finalSpecular;\r\n\t//lighting = finalSpecular;\r\n\treturn lighting;\r\n}`;\r\n\r\nclass PhongShaderProgram extends ShaderProgram {\r\n\tconstructor() {\r\n\t\tsuper(\"PhongShaderProgram\", phongVertexShaderSrc, phongFragmentShaderSrc);\r\n\r\n\t\tthis.use();\r\n\r\n\t\tthis.setUniformLocation(\"modelMatrix\");\r\n\t\tthis.setUniformLocation(\"viewProjMatrix\");\r\n\t\tthis.setUniformLocation(\"textureMatrix\");\r\n\r\n\t\tthis.setUniformLocation(\"material.diffuse\");\r\n\t\tthis.setUniformLocation(\"material.specular\");\r\n\r\n\t\tgl.uniform1i(this.getUniformLocation(\"material.diffuse\")[0], 0);\r\n\t\tgl.uniform1i(this.getUniformLocation(\"material.specular\")[0], 1);\r\n\r\n\t\tfor (let i = 0; i < pointLightsToAllocate; i++) {\r\n\t\t\tthis.setUniformLocation(\"pointLights[\" + i + \"].position\");\r\n\t\t\tthis.setUniformLocation(\"pointLights[\" + i + \"].colour\");\r\n\r\n\t\t\tthis.setUniformLocation(\"pointLights[\" + i + \"].constant\");\r\n\t\t\tthis.setUniformLocation(\"pointLights[\" + i + \"].linear\");\r\n\t\t\tthis.setUniformLocation(\"pointLights[\" + i + \"].quadratic\");\r\n\t\t}\r\n\r\n\t\tthis.setUniformLocation(\"directionalLight.direction\");\r\n\t\tthis.setUniformLocation(\"directionalLight.colour\");\r\n\t\tthis.setUniformLocation(\"directionalLight.ambientMultiplier\");\r\n\t\tthis.setUniformLocation(\"nrOfPointLights\");\r\n\t\tthis.setUniformLocation(\"camPos\");\r\n\t}\r\n\r\n\tsetupVertexAttributePointers(): void {\r\n\t\t// Change if input layout changes in shaders\r\n\t\tconst stride = 8 * 4;\r\n\t\tgl.vertexAttribPointer(0, 3, gl.FLOAT, false, stride, 0);\r\n\t\tgl.enableVertexAttribArray(0);\r\n\r\n\t\tgl.vertexAttribPointer(1, 3, gl.FLOAT, false, stride, 3 * 4);\r\n\t\tgl.enableVertexAttribArray(1);\r\n\r\n\t\tgl.vertexAttribPointer(2, 2, gl.FLOAT, false, stride, 6 * 4);\r\n\t\tgl.enableVertexAttribArray(2);\r\n\t}\r\n}\r\n\r\nexport let phongShaderProgram = null;\r\n\r\nexport let createPhongShaderProgram = function () {\r\n\tphongShaderProgram = new PhongShaderProgram();\r\n};\r\n","import ShaderProgram from \"../ShaderProgram\";\r\nimport { screenQuadVertexSrc } from \"../ScreenQuadShaderProgram\";\r\nimport { gl } from \"../../../main\";\r\n\r\nconst bloomBlendingFragmentSrc: string = `#version 300 es\r\nprecision highp float;\r\n\r\nout vec4 fragColor;\r\n  \r\nin vec2 texCoords;\r\n\r\nuniform sampler2D scene;\r\nuniform sampler2D bloomBlur;\r\n\r\nvoid main()\r\n{\r\n    // const float gamma = 2.2;\r\n    // const float exposure = 1.0;\r\n    // vec3 hdrColor = texture(scene, texCoords).rgb;      \r\n    // vec3 bloomColor = texture(bloomBlur, texCoords).rgb;\r\n    // hdrColor += bloomColor; // additive blending\r\n    // // tone mapping\r\n    // vec3 result = vec3(1.0) - exp(-hdrColor * exposure);\r\n    // // also gamma correct while we're at it       \r\n    // result = pow(result, vec3(1.0 / gamma));\r\n    // fragColor = vec4(result, 1.0);\r\n\r\n    vec3 result = texture(scene, texCoords).rgb;      \r\n    vec3 bloomColor = texture(bloomBlur, texCoords).rgb;\r\n    result += bloomColor; // additive blending\r\n    fragColor = vec4(result, 1.0);\r\n}`;\r\n\r\nclass BloomBlending extends ShaderProgram {\r\n\tconstructor() {\r\n\t\tsuper(\"BloomBlending\", screenQuadVertexSrc, bloomBlendingFragmentSrc);\r\n\r\n\t\tthis.use();\r\n\r\n\t\tthis.setUniformLocation(\"scene\");\r\n\t\tthis.setUniformLocation(\"bloomBlur\");\r\n\r\n\t\tgl.uniform1i(this.getUniformLocation(\"scene\")[0], 0);\r\n\t\tgl.uniform1i(this.getUniformLocation(\"bloomBlur\")[0], 1);\r\n\r\n\t\tthis.setUniformLocation(\"horizontal\");\r\n\t}\r\n\r\n\tsetupVertexAttributePointers(): void {\r\n\t\t// Change if input layout changes in shaders\r\n\t\tconst stride = 4 * 4;\r\n\t\tgl.vertexAttribPointer(0, 2, gl.FLOAT, false, stride, 0);\r\n\t\tgl.enableVertexAttribArray(0);\r\n\r\n\t\tgl.vertexAttribPointer(1, 2, gl.FLOAT, false, stride, 2 * 4);\r\n\t\tgl.enableVertexAttribArray(1);\r\n\t}\r\n}\r\n\r\nexport let bloomBlending = null;\r\n\r\nexport let createBloomBlending = function () {\r\n\tbloomBlending = new BloomBlending();\r\n};\r\n","import ShaderProgram from \"../ShaderProgram\";\r\nimport { screenQuadVertexSrc } from \"../ScreenQuadShaderProgram\";\r\nimport { gl } from \"../../../main\";\r\n\r\nconst bloomExtractionFragmentSrc: string = `#version 300 es\r\nprecision highp float;\r\n\r\nin vec2 texCoords;\r\n\r\nlayout (location = 0) out vec4 normalShaded;\r\nlayout (location = 1) out vec4 brightOnly;\r\n\r\nuniform sampler2D inputTexture;\r\n\r\nvoid main() {\r\n\tnormalShaded = texture(inputTexture, texCoords);\r\n    \r\n    // check whether fragment output is higher than threshold, if so output as brightness color\r\n    float brightness = normalShaded.r + normalShaded.g + normalShaded.b;\r\n    if(brightness > 1.0) {\r\n        brightOnly = normalShaded;\r\n    }\r\n    else {\r\n        brightOnly = vec4(0.0, 0.0, 0.0, 1.0);\r\n    }\r\n}`;\r\n\r\nclass BloomExtraction extends ShaderProgram {\r\n\tconstructor() {\r\n\t\tsuper(\"BloomExtraction\", screenQuadVertexSrc, bloomExtractionFragmentSrc);\r\n\r\n\t\tthis.use();\r\n\r\n\t\tthis.setUniformLocation(\"inputTexture\");\r\n\r\n\t\tgl.uniform1i(this.getUniformLocation(\"inputTexture\")[0], 0);\r\n\t}\r\n\r\n\tsetupVertexAttributePointers(): void {\r\n\t\t// Change if input layout changes in shaders\r\n\t\tconst stride = 4 * 4;\r\n\t\tgl.vertexAttribPointer(0, 2, gl.FLOAT, false, stride, 0);\r\n\t\tgl.enableVertexAttribArray(0);\r\n\r\n\t\tgl.vertexAttribPointer(1, 2, gl.FLOAT, false, stride, 2 * 4);\r\n\t\tgl.enableVertexAttribArray(1);\r\n\t}\r\n}\r\n\r\nexport let bloomExtraction = null;\r\n\r\nexport let createBloomExtraction = function () {\r\n\tbloomExtraction = new BloomExtraction();\r\n};\r\n","import ShaderProgram from \"../ShaderProgram\";\r\nimport { screenQuadVertexSrc } from \"../ScreenQuadShaderProgram\";\r\nimport { gl } from \"../../../main\";\r\n\r\nconst crtFragmentShaderSrc: string = `#version 300 es\r\nprecision highp float;\r\n//\r\n// PUBLIC DOMAIN CRT STYLED SCAN-LINE SHADER\r\n//\r\n//   by Timothy Lottes\r\n//\r\n// This is more along the style of a really good CGA arcade monitor.\r\n// With RGB inputs instead of NTSC.\r\n// The shadow mask example has the mask rotated 90 degrees for less chromatic aberration.\r\n//\r\n// Left it unoptimized to show the theory behind the algorithm.\r\n//\r\n// It is an example what I personally would want as a display option for pixel art games.\r\n// Please take and use, change, or whatever.\r\n//\r\n\r\nout vec4 fragColor;\r\nin vec2 texCoords;\r\n\r\nuniform bool horizontal;\r\nfloat weight[5] = float[] (0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);\r\n\r\n\r\nuniform sampler2D screenTexture;\r\n\r\n//#define res (textureSize(screenTexture, 0).xy /6.0)\r\n#define res (vec2(640, 360))\r\n\r\n// Hardness of scanline.\r\n//  -8.0 = soft\r\n// -16.0 = medium\r\nfloat hardScan=-8.0;\r\n\r\n// Hardness of pixels in scanline.\r\n// -2.0 = soft\r\n// -4.0 = hard\r\nfloat hardPix=-3.0;\r\n\r\n// Display warp.\r\n// 0.0 = none\r\n// 1.0/8.0 = extreme\r\nvec2 warp=vec2(1.0/32.0,1.0/24.0); \r\n\r\n// Amount of shadow mask.\r\nfloat maskDark=0.5;\r\nfloat maskLight=1.5;\r\n\r\n//------------------------------------------------------------------------\r\n\r\n// sRGB to Linear.\r\n// Assuing using sRGB typed textures this should not be needed.\r\nfloat ToLinear1(float c){return(c<=0.04045)?c/12.92:pow((c+0.055)/1.055,2.4);}\r\nvec3 ToLinear(vec3 c){return vec3(ToLinear1(c.r),ToLinear1(c.g),ToLinear1(c.b));}\r\n\r\n// Linear to sRGB.\r\n// Assuing using sRGB typed textures this should not be needed.\r\nfloat ToSrgb1(float c){return(c<0.0031308?c*12.92:1.055*pow(c,0.41666)-0.055);}\r\nvec3 ToSrgb(vec3 c){return vec3(ToSrgb1(c.r),ToSrgb1(c.g),ToSrgb1(c.b));}\r\n\r\n// Nearest emulated sample given floating point position and texel offset.\r\n// Also zero's off screen.\r\nvec3 Fetch(vec2 pos,vec2 off){\r\n  pos=floor(pos*res+off)/res;\r\n  if(max(abs(pos.x-0.5),abs(pos.y-0.5))>0.5)return vec3(0.0,0.0,0.0);\r\n  return ToLinear(texture(screenTexture,pos.xy,-16.0).rgb);}\r\n\r\n// Distance in emulated pixels to nearest texel.\r\nvec2 Dist(vec2 pos){pos=pos*res;return -((pos-floor(pos))-vec2(0.5));}\r\n    \r\n// 1D Gaussian.\r\nfloat Gaus(float pos,float scale){return exp2(scale*pos*pos);}\r\n\r\n// 3-tap Gaussian filter along horz line.\r\nvec3 Horz3(vec2 pos,float off){\r\n  vec3 b=Fetch(pos,vec2(-1.0,off));\r\n  vec3 c=Fetch(pos,vec2( 0.0,off));\r\n  vec3 d=Fetch(pos,vec2( 1.0,off));\r\n  float dst=Dist(pos).x;\r\n  // Convert distance to weight.\r\n  float scale=hardPix;\r\n  float wb=Gaus(dst-1.0,scale);\r\n  float wc=Gaus(dst+0.0,scale);\r\n  float wd=Gaus(dst+1.0,scale);\r\n  // Return filtered sample.\r\n  return (b*wb+c*wc+d*wd)/(wb+wc+wd);}\r\n\r\n// 5-tap Gaussian filter along horz line.\r\nvec3 Horz5(vec2 pos,float off){\r\n  vec3 a=Fetch(pos,vec2(-2.0,off));\r\n  vec3 b=Fetch(pos,vec2(-1.0,off));\r\n  vec3 c=Fetch(pos,vec2( 0.0,off));\r\n  vec3 d=Fetch(pos,vec2( 1.0,off));\r\n  vec3 e=Fetch(pos,vec2( 2.0,off));\r\n  float dst=Dist(pos).x;\r\n  // Convert distance to weight.\r\n  float scale=hardPix;\r\n  float wa=Gaus(dst-2.0,scale);\r\n  float wb=Gaus(dst-1.0,scale);\r\n  float wc=Gaus(dst+0.0,scale);\r\n  float wd=Gaus(dst+1.0,scale);\r\n  float we=Gaus(dst+2.0,scale);\r\n  // Return filtered sample.\r\n  return (a*wa+b*wb+c*wc+d*wd+e*we)/(wa+wb+wc+wd+we);}\r\n\r\n// Return scanline weight.\r\nfloat Scan(vec2 pos,float off){\r\n  float dst=Dist(pos).y;\r\n  return Gaus(dst+off,hardScan);}\r\n\r\n// Allow nearest three lines to effect pixel.\r\nvec3 Tri(vec2 pos){\r\n  vec3 a=Horz3(pos,-1.0);\r\n  vec3 b=Horz5(pos, 0.0);\r\n  vec3 c=Horz3(pos, 1.0);\r\n  float wa=Scan(pos,-1.0);\r\n  float wb=Scan(pos, 0.0);\r\n  float wc=Scan(pos, 1.0);\r\n  return a*wa+b*wb+c*wc;}\r\n\r\n// Distortion of scanlines, and end of screen alpha.\r\nvec2 Warp(vec2 pos){\r\n  pos=pos*2.0-1.0;    \r\n  pos*=vec2(1.0+(pos.y*pos.y)*warp.x,1.0+(pos.x*pos.x)*warp.y);\r\n  return pos*0.5+0.5;}\r\n\r\n// Shadow mask.\r\nvec3 Mask(vec2 pos){\r\n  pos.x+=pos.y*3.0;\r\n  vec3 mask=vec3(maskDark,maskDark,maskDark);\r\n  pos.x=fract(pos.x/6.0);\r\n  if(pos.x<0.333)mask.r=maskLight;\r\n  else if(pos.x<0.666)mask.g=maskLight;\r\n  else mask.b=maskLight;\r\n  return mask;}    \r\n\r\n// Draw dividing bars.\r\nfloat Bar(float pos,float bar){pos-=bar;return pos*pos<4.0?0.0:1.0;}\r\n\r\n\r\nvoid main() {\r\n    vec2 resolution = vec2(textureSize(screenTexture, 0));\r\n    vec2 pos=Warp(gl_FragCoord.xy/resolution.xy+vec2(-0.333,0.0));\r\n    hardScan=-4.0;\r\n    maskDark=maskLight=1.0;\r\n    pos=Warp(gl_FragCoord.xy/resolution.xy);\r\n    fragColor.rgb=Tri(pos)*Mask(gl_FragCoord.xy);\r\n        \r\n    fragColor.a=1.0;  \r\n    fragColor.rgb=ToSrgb(fragColor.rgb);\r\n}\r\n`;\r\n\r\nclass CrtShaderProgram extends ShaderProgram {\r\n\tconstructor() {\r\n\t\tsuper(\"CrtShaderProgram\", screenQuadVertexSrc, crtFragmentShaderSrc);\r\n\r\n\t\tthis.setUniformLocation(\"screenTexture\");\r\n\t}\r\n\r\n\tsetupVertexAttributePointers() {\r\n\t\t// Change if input layout changes in shaders\r\n\t\tconst stride = 4 * 4;\r\n\t\tgl.vertexAttribPointer(0, 2, gl.FLOAT, false, stride, 0);\r\n\t\tgl.enableVertexAttribArray(0);\r\n\r\n\t\tgl.vertexAttribPointer(1, 2, gl.FLOAT, false, stride, 2 * 4);\r\n\t\tgl.enableVertexAttribArray(1);\r\n\t}\r\n}\r\n\r\nexport let crtShaderProgram = null;\r\n\r\nexport let createCrtShaderProgram = function () {\r\n\tcrtShaderProgram = new CrtShaderProgram();\r\n};\r\n","import ShaderProgram from \"../ShaderProgram\";\r\nimport { screenQuadVertexSrc } from \"../ScreenQuadShaderProgram\";\r\nimport { gl } from \"../../../main\";\r\n\r\nconst gaussianBlurFragmentSrc: string = `#version 300 es\r\nprecision highp float;\r\n\r\nout vec4 fragColor;\r\n  \r\nin vec2 texCoords;\r\n\r\nuniform sampler2D image;\r\n  \r\nuniform bool horizontal;\r\nfloat weight[5] = float[] (0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);\r\n\r\nvoid main()\r\n{             \r\n    vec2 texOffset = vec2(1.0 / float(textureSize(image, 0).x), 1.0 / float(textureSize(image, 0).y)); // gets size of single texel\r\n    vec3 result = texture(image, texCoords).rgb * weight[0]; // current fragment's contribution\r\n    if(horizontal)\r\n    {\r\n        for(int i = 1; i < 5; ++i)\r\n        {\r\n            result += texture(image, texCoords + vec2(texOffset.x * float(i), 0.0)).rgb * weight[i];\r\n            result += texture(image, texCoords - vec2(texOffset.x * float(i), 0.0)).rgb * weight[i];\r\n        }\r\n    }\r\n    else\r\n    {\r\n        for(int i = 1; i < 5; ++i)\r\n        {\r\n            result += texture(image, texCoords + vec2(0.0, texOffset.y * float(i))).rgb * weight[i];\r\n            result += texture(image, texCoords - vec2(0.0, texOffset.y * float(i))).rgb * weight[i];\r\n        }\r\n    }\r\n    fragColor = vec4(result, 1.0);\r\n}`;\r\n\r\nclass GaussianBlur extends ShaderProgram {\r\n\tconstructor() {\r\n\t\tsuper(\"GaussianBlur\", screenQuadVertexSrc, gaussianBlurFragmentSrc);\r\n\r\n\t\tthis.use();\r\n\r\n\t\tthis.setUniformLocation(\"image\");\r\n\r\n\t\tgl.uniform1i(this.getUniformLocation(\"image\")[0], 0);\r\n\r\n\t\tthis.setUniformLocation(\"horizontal\");\r\n\t}\r\n\r\n\tsetupVertexAttributePointers(): void {\r\n\t\t// Change if input layout changes in shaders\r\n\t\tconst stride = 4 * 4;\r\n\t\tgl.vertexAttribPointer(0, 2, gl.FLOAT, false, stride, 0);\r\n\t\tgl.enableVertexAttribArray(0);\r\n\r\n\t\tgl.vertexAttribPointer(1, 2, gl.FLOAT, false, stride, 2 * 4);\r\n\t\tgl.enableVertexAttribArray(1);\r\n\t}\r\n}\r\n\r\nexport let gaussianBlur = null;\r\n\r\nexport let createGaussianBlur = function () {\r\n\tgaussianBlur = new GaussianBlur();\r\n};\r\n","import { gl } from \"../../main\";\r\nimport ShaderProgram from \"./ShaderProgram\";\r\n\r\nexport const screenQuadVertexSrc: string = `#version 300 es\r\n\r\nlayout (location = 0) in vec2 inPos;\r\nlayout (location = 1) in vec2 inTexCoords;\r\n\r\nout vec2 texCoords;\r\n\r\nvoid main()\r\n{\r\n    texCoords = inTexCoords;\r\n    gl_Position = vec4(inPos, 0.0, 1.0); \r\n}  \r\n`;\r\n\r\nconst screenQuadFragmentSrc: string = `#version 300 es\r\nprecision highp float;\r\n\r\nout vec4 FragColor;\r\nin vec2 texCoords;\r\n\r\nuniform sampler2D screenTexture;\r\n\r\nvoid main() {\r\n    FragColor = texture(screenTexture, texCoords).rgba;\r\n}\r\n`;\r\n\r\nclass ScreenQuadShaderProgram extends ShaderProgram {\r\n\tconstructor() {\r\n\t\tsuper(\r\n\t\t\t\"ScreenQuadShaderProgram\",\r\n\t\t\tscreenQuadVertexSrc,\r\n\t\t\tscreenQuadFragmentSrc\r\n\t\t);\r\n\r\n\t\tthis.setUniformLocation(\"screenTexture\");\r\n\r\n\t\tgl.uniform1i(this.uniformBindings[\"screenTexture\"], 0);\r\n\t}\r\n\r\n\tsetupVertexAttributePointers() {\r\n\t\t// Change if input layout changes in shaders\r\n\t\tconst stride = 4 * 4;\r\n\t\tgl.vertexAttribPointer(0, 2, gl.FLOAT, false, stride, 0);\r\n\t\tgl.enableVertexAttribArray(0);\r\n\r\n\t\tgl.vertexAttribPointer(1, 2, gl.FLOAT, false, stride, 2 * 4);\r\n\t\tgl.enableVertexAttribArray(1);\r\n\t}\r\n}\r\n\r\nexport let screenQuadShaderProgram = null;\r\n\r\nexport let createScreenQuadShaderProgram = function () {\r\n\tscreenQuadShaderProgram = new ScreenQuadShaderProgram();\r\n};\r\n","import { gl } from \"../../main\";\r\n\r\nexport default class ShaderProgram {\r\n\t// Protected\r\n\tprotected shaderProgram: WebGLProgram;\r\n\tprotected uniformBindings: Map<string, WebGLUniformLocation>;\r\n\r\n\tconstructor(\r\n\t\tshaderProgramName: string,\r\n\t\tvertexShaderName: string,\r\n\t\tfragmentShaderName: string,\r\n\t\tdebugShaderCompilation: boolean = false\r\n\t) {\r\n\t\tthis.shaderProgram = null;\r\n\t\tthis.loadShaders(\r\n\t\t\tshaderProgramName,\r\n\t\t\tvertexShaderName,\r\n\t\t\tfragmentShaderName,\r\n\t\t\tdebugShaderCompilation\r\n\t\t);\r\n\t\tthis.uniformBindings = new Map<string, WebGLUniformLocation>();\r\n\t}\r\n\r\n\tloadShaders(\r\n\t\tshaderProgramName: string,\r\n\t\tvertexShaderString: string,\r\n\t\tfragmentShaderString: string,\r\n\t\tdebugShaderCompilation: boolean\r\n\t) {\r\n\t\t// link shaders\r\n\t\tif (this.shaderProgram != null) {\r\n\t\t\tgl.deleteProgram(this.shaderProgram); // Delete in case this is not the first time this shader is created.\r\n\t\t}\r\n\r\n\t\tconsole.log(\"Compiling shader program: \" + shaderProgramName);\r\n\r\n\t\t// vertex shader\r\n\t\tconst vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n\t\tgl.shaderSource(vertexShader, vertexShaderString);\r\n\t\tgl.compileShader(vertexShader);\r\n\r\n\t\t// Check for shader compile errors\r\n\t\tif (\r\n\t\t\t!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) ||\r\n\t\t\tdebugShaderCompilation\r\n\t\t) {\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"Vertex shader compiled successfully: \" +\r\n\t\t\t\t\tgl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)\r\n\t\t\t);\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"Vertex shader compiler log: \\n\" + gl.getShaderInfoLog(vertexShader)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// fragment shader\r\n\t\tconst fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n\t\tgl.shaderSource(fragmentShader, fragmentShaderString);\r\n\t\tgl.compileShader(fragmentShader);\r\n\r\n\t\t// Check for shader compile errors\r\n\t\tif (\r\n\t\t\t!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) ||\r\n\t\t\tdebugShaderCompilation\r\n\t\t) {\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"Fragment shader compiled successfully: \" +\r\n\t\t\t\t\tgl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)\r\n\t\t\t);\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"Fragment shader compiler log: \\n\" + gl.getShaderInfoLog(fragmentShader)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tthis.shaderProgram = gl.createProgram();\r\n\r\n\t\tgl.attachShader(this.shaderProgram, vertexShader);\r\n\t\tgl.attachShader(this.shaderProgram, fragmentShader);\r\n\t\tgl.linkProgram(this.shaderProgram);\r\n\r\n\t\t// Check for linking errors?\r\n\t\tlet linkedShaders = gl.getProgramParameter(\r\n\t\t\tthis.shaderProgram,\r\n\t\t\tgl.LINK_STATUS\r\n\t\t);\r\n\t\tif (!linkedShaders || debugShaderCompilation) {\r\n\t\t\tconsole.log(\"Linked shaders successfully: \" + linkedShaders);\r\n\t\t\tconsole.log(\r\n\t\t\t\t\"Linking shaders log: \\n\" + gl.getProgramInfoLog(this.shaderProgram)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// Delete shaders now that they have been made into a program\r\n\t\tgl.deleteShader(vertexShader);\r\n\t\tgl.deleteShader(fragmentShader);\r\n\t}\r\n\r\n\tuse() {\r\n\t\tgl.useProgram(this.shaderProgram);\r\n\t}\r\n\r\n\tsetupVertexAttributePointers() {\r\n\t\t// TODO: Pure virtual possible?\r\n\t}\r\n\r\n\tsetupInstancedVertexAttributePointers() {}\r\n\r\n\tsetUniformLocation(uniformName: string) {\r\n\t\tthis.uniformBindings.set(\r\n\t\t\tuniformName,\r\n\t\t\tgl.getUniformLocation(this.shaderProgram, uniformName)\r\n\t\t);\r\n\t}\r\n\r\n\tgetUniformLocation(uniformName: string): [WebGLUniformLocation, boolean] {\r\n\t\tif (this.uniformBindings.has(uniformName)) {\r\n\t\t\treturn [this.uniformBindings.get(uniformName), true];\r\n\t\t}\r\n\r\n\t\t// console.log(\"No uniform with name \" + uniformName + \"\\n\");\r\n\t\treturn [0, false];\r\n\t}\r\n}\r\n\r\n// ShaderProgram::~ShaderProgram() {\r\n//     glDeleteProgram(p_shaderProgram);\r\n// }\r\n","import { gl } from \"../../../main\";\r\nimport ShaderProgram from \"../ShaderProgram\";\r\nimport { shadowFragmentShaderSrc } from \"./ShadowPass\";\r\n\r\nconst grassShadowVertexShaderSrc: string = `#version 300 es\r\n\r\nlayout (location = 0) in vec2 inVertexPosition;\r\nlayout (location = 1) in vec2 inTexCoords;\r\n\r\n// Instanced attributes starts here\r\nlayout (location = 2) in vec3 inPos;\r\nlayout (location = 3) in float inSize;\r\nlayout (location = 4) in vec3 inTipOffset;\r\n\r\nuniform mat4 lightSpaceMatrix;\r\nuniform vec3 cameraPos;\r\nuniform float currentTime;\r\n\r\nout vec2 texCoords;\r\n\r\nvoid main() {\r\n    // Billboarding\r\n    vec3 camDir = cameraPos - inPos;\r\n    vec3 rightVec = normalize(cross(vec3(0.0, 1.0, 0.0), camDir));\r\n    vec3 upVec = vec3(0.0, 1.0, 0.0);\r\n\tfloat size = inSize + length(camDir) * 0.0;\r\n    rightVec = rightVec * inVertexPosition.x * size;\r\n    upVec = upVec * inVertexPosition.y * size;\r\n\tvec3 fragPos = vec3(rightVec + upVec + inPos + (inTipOffset + vec3(sin(currentTime + inPos.x) * 0.1, 0.0, 0.0)) * inVertexPosition.y);\r\n    gl_Position = lightSpaceMatrix * vec4(fragPos, 1.0);\r\n\r\n    // gl_Position = viewProjMatrix * vec4(vec3(inVertexPosition, 0.0) * size + currentPos, 1.0); // No billboarding\r\n    texCoords = inTexCoords;\r\n}`;\r\n\r\nclass GrassShadowPass extends ShaderProgram {\r\n\tconstructor() {\r\n\t\tsuper(\r\n\t\t\t\"GrassShadowPass\",\r\n\t\t\tgrassShadowVertexShaderSrc,\r\n\t\t\tshadowFragmentShaderSrc,\r\n\t\t\tfalse\r\n\t\t);\r\n\r\n\t\tthis.use();\r\n\r\n\t\tthis.setUniformLocation(\"texture0\");\r\n\t\tgl.uniform1i(this.getUniformLocation(\"texture0\")[0], 0);\r\n\r\n\t\tthis.setUniformLocation(\"lightSpaceMatrix\");\r\n\t\tthis.setUniformLocation(\"cameraPos\");\r\n\t\tthis.setUniformLocation(\"currentTime\");\r\n\t}\r\n\r\n\tsetupVertexAttributePointers(): void {\r\n\t\t// Change if input layout changes in shaders\r\n\t\tconst stride = 4 * 4;\r\n\t\tgl.vertexAttribPointer(0, 2, gl.FLOAT, false, stride, 0);\r\n\t\tgl.enableVertexAttribArray(0);\r\n\r\n\t\tgl.vertexAttribPointer(1, 2, gl.FLOAT, false, stride, 2 * 4);\r\n\t\tgl.enableVertexAttribArray(1);\r\n\t}\r\n\r\n\tsetupInstancedVertexAttributePointers(): void {\r\n\t\tconst stride = 7 * 4;\r\n\t\tgl.vertexAttribPointer(2, 3, gl.FLOAT, false, stride, 0);\r\n\t\tgl.enableVertexAttribArray(2);\r\n\t\tgl.vertexAttribDivisor(2, 1);\r\n\r\n\t\tgl.vertexAttribPointer(3, 1, gl.FLOAT, false, stride, 3 * 4);\r\n\t\tgl.enableVertexAttribArray(3);\r\n\t\tgl.vertexAttribDivisor(3, 1);\r\n\r\n\t\tgl.vertexAttribPointer(4, 3, gl.FLOAT, false, stride, 4 * 4);\r\n\t\tgl.enableVertexAttribArray(4);\r\n\t\tgl.vertexAttribDivisor(4, 1);\r\n\t}\r\n}\r\n\r\nexport let grassShadowPass: GrassShadowPass = null;\r\n\r\nexport let createGrassShadowPass = function () {\r\n\tgrassShadowPass = new GrassShadowPass();\r\n};\r\n","import { gl } from \"../../../main\";\r\nimport ShaderProgram from \"../ShaderProgram\";\r\n\r\nconst shadowVertexShaderSrc: string = `#version 300 es\r\n// If inputs change, also update ShadowPass::setupVertexAttributePointers to match\r\nlayout (location = 0) in vec3 inPosition;\r\nlayout (location = 1) in vec3 inNormal;\r\nlayout (location = 2) in vec2 inTexCoords;\r\n\r\nuniform mat4 lightSpaceMatrix;\r\nuniform mat4 modelMatrix;\r\nuniform mat4 textureMatrix;\r\n\r\nout vec2 texCoords;\r\n\r\nvoid main()\r\n{\r\n    gl_Position = lightSpaceMatrix * modelMatrix * vec4(inPosition, 1.0);\r\n\ttexCoords = vec2(textureMatrix * vec4(inTexCoords, 0.0, 1.0));\r\n}`;\r\n\r\nexport const shadowFragmentShaderSrc: string = `#version 300 es\r\nprecision highp float;\r\n\r\nin vec2 texCoords;\r\n\r\nuniform sampler2D diffuse;\r\n\r\nmat4 thresholdMatrix = mat4(\r\n\t1.0, 9.0, 3.0, 11.0,\r\n\t13.0, 5.0, 15.0, 7.0,\r\n\t4.0, 12.0, 2.0, 10.0,\r\n\t16.0, 8.0, 14.0, 6.0\r\n);\r\n\r\n//out vec4 final_colour;\r\n\r\nvoid main()\r\n{\r\n    float opacity = texture(diffuse, texCoords).a;\r\n\r\n\tfloat threshold = thresholdMatrix[int(floor(mod(gl_FragCoord.x, 4.0)))][int(floor(mod(gl_FragCoord.y, 4.0)))] / 17.0;\r\n    if (threshold >= opacity) {\r\n        discard;\r\n    }\r\n\r\n    //final_colour = vec4(1.0, 1.0, 1.0, 1.0);\r\n}`;\r\n\r\nclass ShadowPass extends ShaderProgram {\r\n\tconstructor() {\r\n\t\tsuper(\"ShadowPass\", shadowVertexShaderSrc, shadowFragmentShaderSrc);\r\n\r\n\t\tthis.use();\r\n\r\n\t\tthis.setUniformLocation(\"lightSpaceMatrix\");\r\n\t\tthis.setUniformLocation(\"modelMatrix\");\r\n\t\tthis.setUniformLocation(\"textureMatrix\");\r\n\t}\r\n\r\n\tsetupVertexAttributePointers(): void {\r\n\t\t// Change if input layout changes in shaders\r\n\t\tconst stride = 8 * 4;\r\n\t\tgl.vertexAttribPointer(0, 3, gl.FLOAT, false, stride, 0);\r\n\t\tgl.enableVertexAttribArray(0);\r\n\r\n\t\tgl.vertexAttribPointer(1, 3, gl.FLOAT, false, stride, 3 * 4);\r\n\t\tgl.enableVertexAttribArray(1);\r\n\r\n\t\tgl.vertexAttribPointer(2, 2, gl.FLOAT, false, stride, 6 * 4);\r\n\t\tgl.enableVertexAttribArray(2);\r\n\t}\r\n}\r\n\r\nexport let shadowPass = null;\r\n\r\nexport let createShadowPass = function () {\r\n\tshadowPass = new ShadowPass();\r\n};\r\n","import { gl } from \"../../main\";\r\nimport ShaderProgram from \"./ShaderProgram\";\r\n\r\nconst simpleVertexShaderSrc: string = `#version 300 es\r\n// If inputs change, also update SimpleShaderProgram::setupVertexAttributePointers to match\r\nlayout (location = 0) in vec3 inPosition;\r\nlayout (location = 1) in vec4 inColor;\r\nlayout (location = 2) in vec2 inTexCoords;\r\n\r\n// If uniforms change, also update SimpleShaderProgram to match\r\nuniform mat4 modelMatrix;\r\nuniform mat4 viewProjMatrix;\r\nuniform mat4 textureMatrix;\r\n\r\nout vec4 color;\r\nout vec2 texCoords;\r\n\r\nvoid main() {\r\n    gl_Position = viewProjMatrix * modelMatrix * vec4(inPosition, 1.0);\r\n    color = inColor;\r\n    texCoords = vec2(textureMatrix * vec4(inTexCoords, 0.0, 1.0));\r\n}`;\r\n\r\nconst simpleFragmentShaderSrc: string = `#version 300 es\r\nprecision highp float;\r\n\r\nin vec4 color;\r\nin vec2 texCoords;\r\n\r\n// If uniforms change, also update SimpleShaderProgram to match\r\nuniform sampler2D texture0;\r\nuniform int useTexture;\r\n\r\nout vec4 FragColor;\r\n\r\nmat4 thresholdMatrix = mat4(\r\n    1.0, 9.0, 3.0, 11.0,\r\n    13.0, 5.0, 15.0, 7.0,\r\n    4.0, 12.0, 2.0, 10.0,\r\n    16.0, 8.0, 14.0, 6.0\r\n    );\r\n\r\nvoid main()\r\n{\r\n    if (useTexture == 1) {\r\n        FragColor = texture(texture0, texCoords);\r\n    }\r\n    else {\r\n        FragColor = color;\r\n    }\r\n\r\n    float threshold = thresholdMatrix[int(floor(mod(gl_FragCoord.x, 4.0)))][int(floor(mod(gl_FragCoord.y, 4.0)))] / 17.0;\r\n    if (threshold >= FragColor.a) {\r\n        discard;\r\n    }\r\n\r\n    FragColor.a = 1.0f; // Since we use screen door transparency, do not use alpha value\r\n}`;\r\n\r\nclass SimpleShaderProgram extends ShaderProgram {\r\n\tconstructor() {\r\n\t\tsuper(\r\n\t\t\t\"SimpleShaderProgram\",\r\n\t\t\tsimpleVertexShaderSrc,\r\n\t\t\tsimpleFragmentShaderSrc\r\n\t\t);\r\n\r\n\t\tthis.use();\r\n\r\n\t\tthis.setUniformLocation(\"modelMatrix\");\r\n\t\tthis.setUniformLocation(\"viewProjMatrix\");\r\n\t\tthis.setUniformLocation(\"textureMatrix\");\r\n\t\tthis.setUniformLocation(\"texture0\");\r\n\t\tthis.setUniformLocation(\"useTexture\");\r\n\r\n\t\tgl.uniform1i(this.uniformBindings[\"texture0\"], 0);\r\n\t}\r\n\r\n\tsetupVertexAttributePointers(): void {\r\n\t\t// Change if input layout changes in shaders\r\n\t\tconst stride = 9 * 4;\r\n\t\tgl.vertexAttribPointer(0, 3, gl.FLOAT, false, stride, 0);\r\n\t\tgl.enableVertexAttribArray(0);\r\n\r\n\t\tgl.vertexAttribPointer(1, 4, gl.FLOAT, false, stride, 3 * 4);\r\n\t\tgl.enableVertexAttribArray(1);\r\n\r\n\t\tgl.vertexAttribPointer(2, 2, gl.FLOAT, false, stride, 7 * 4);\r\n\t\tgl.enableVertexAttribArray(2);\r\n\t}\r\n}\r\n\r\nexport let simpleShaderProgram = null;\r\n\r\nexport let createSimpleShaderProgram = function () {\r\n\tsimpleShaderProgram = new SimpleShaderProgram();\r\n};\r\n","import { gl } from \"../../../main\";\r\nimport ShaderProgram from \"../ShaderProgram\";\r\n\r\nexport const skyboxVertexSrc: string = `#version 300 es\r\n\r\nlayout (location = 0) in vec3 inPos;\r\n\r\nout vec3 texCoords;\r\n\r\nuniform mat4 viewProjMatrix;\r\n\r\nvoid main()\r\n{\r\n    texCoords = inPos;\r\n\ttexCoords.y *= -1.0;\r\n    vec4 pos = viewProjMatrix * vec4(inPos, 1.0);\r\n    gl_Position = pos.xyww; \r\n}  \r\n`;\r\n\r\nconst skyboxFragmentSrc: string = `#version 300 es\r\nprecision highp float;\r\n\r\nout vec4 FragColor;\r\nin vec3 texCoords;\r\n\r\nuniform samplerCube skybox;\r\n\r\nvoid main() {\r\n    FragColor = texture(skybox, texCoords).rgba;\r\n}\r\n`;\r\n\r\nclass SkyboxShaderProgram extends ShaderProgram {\r\n\tconstructor() {\r\n\t\tsuper(\"SkyboxShaderProgram\", skyboxVertexSrc, skyboxFragmentSrc);\r\n\r\n\t\tthis.setUniformLocation(\"skybox\");\r\n\t\tgl.uniform1i(this.uniformBindings[\"skybox\"], 0);\r\n\r\n\t\tthis.setUniformLocation(\"viewProjMatrix\");\r\n\t}\r\n\r\n\tsetupVertexAttributePointers() {\r\n\t\t// Change if input layout changes in shaders\r\n\t\tconst stride = 3 * 4;\r\n\t\tgl.vertexAttribPointer(0, 3, gl.FLOAT, false, stride, 0);\r\n\t\tgl.enableVertexAttribArray(0);\r\n\t}\r\n}\r\n\r\nexport let skyboxShaderProgram = null;\r\n\r\nexport let createSkyboxShaderProgram = function () {\r\n\tskyboxShaderProgram = new SkyboxShaderProgram();\r\n};\r\n","export enum StatesEnum {\r\n\tSTAY,\r\n\tLOADINGSCREEN,\r\n\tMAINMENU,\r\n\tOPTIONS,\r\n\tCONTROLS,\r\n\tGAME,\r\n\tENDSCREEN,\r\n\tDEBUGMODE,\r\n}\r\n\r\nexport default class State {\r\n\t/*\r\n\t * Set this to the enum for the state you want the state machine to move to.\r\n\t * Leave it at STAY to keep running the current state.\r\n\t */\r\n\tgotoState: StatesEnum;\r\n\tinitialized: boolean;\r\n\r\n\tconstructor() {\r\n\t\tthis.gotoState = StatesEnum.STAY;\r\n\t\tthis.initialized = false;\r\n\t}\r\n\r\n\tasync init() {\r\n\t\tthis.initialized = true;\r\n\t}\r\n\r\n\treset() {\r\n\t\tthis.initialized = false;\r\n\t}\r\n\r\n\tonExit(e: BeforeUnloadEvent) {}\r\n\r\n\tupdate(dt: number) {}\r\n\r\n\tprepareDraw(dt: number) {}\r\n\r\n\tdraw() {}\r\n}\r\n","import State, { StatesEnum } from \"./State\";\r\n\r\nexport default class StateMachine {\r\n\tstates: Map<\r\n\t\tStatesEnum,\r\n\t\t{ stateType: any; minUpdateRate: number; state: State }\r\n\t>;\r\n\r\n\tprotected fps: number = 0;\r\n\tprotected currentState: StatesEnum;\r\n\r\n\tprivate firstLoop: boolean;\r\n\r\n\t// Frame timer variables\r\n\tprivate lastTick = null;\r\n\tprivate updateTimer = 0.0;\r\n\tprivate fpsUpdateTimer = 0.0;\r\n\tprivate frameCounter = 0;\r\n\tprivate dt = 0.0;\r\n\r\n\tconstructor(startState: StatesEnum) {\r\n\t\tthis.states = new Map<\r\n\t\t\tStatesEnum,\r\n\t\t\t{ stateType: any; minUpdateRate: number; state: State }\r\n\t\t>();\r\n\t\tthis.currentState = startState;\r\n\r\n\t\tthis.firstLoop = true;\r\n\t}\r\n\r\n\taddState(\r\n\t\tstateEnum: StatesEnum,\r\n\t\tstateType: any,\r\n\t\tminUpdateRate: number,\r\n\t\tstate: State\r\n\t) {\r\n\t\tthis.states.set(stateEnum, {\r\n\t\t\tstateType: stateType,\r\n\t\t\tminUpdateRate: minUpdateRate,\r\n\t\t\tstate: state,\r\n\t\t});\r\n\t\tthis.states.get(stateEnum).state.reset();\r\n\t}\r\n\r\n\tupdateFrameTimers() {\r\n\t\tlet now = Date.now();\r\n\t\tthis.dt = (now - (this.lastTick || now)) * 0.001;\r\n\t\tthis.lastTick = now;\r\n\r\n\t\tthis.frameCounter++;\r\n\t\tthis.fpsUpdateTimer += this.dt;\r\n\r\n\t\tif (this.fpsUpdateTimer > 0.5) {\r\n\t\t\tthis.fps = this.frameCounter / this.fpsUpdateTimer;\r\n\t\t\tthis.fpsUpdateTimer -= 0.5;\r\n\t\t\tthis.frameCounter = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tupdateState(state: State, minUpdateRate?: number) {\r\n\t\tthis.updateFrameTimers();\r\n\r\n\t\t// Constant update rate\r\n\t\tthis.updateTimer += this.dt;\r\n\t\tlet updatesSinceRender = 0;\r\n\r\n\t\tif (minUpdateRate != undefined) {\r\n\t\t\t//Only update if update timer goes over update rate\r\n\t\t\twhile (this.updateTimer >= minUpdateRate) {\r\n\t\t\t\tif (updatesSinceRender >= 20) {\r\n\t\t\t\t\t// Too many updates, throw away the rest of dt (makes the game run in slow-motion)\r\n\t\t\t\t\tthis.updateTimer = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstate.update(minUpdateRate);\r\n\t\t\t\tthis.updateTimer -= minUpdateRate;\r\n\t\t\t\tupdatesSinceRender++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (updatesSinceRender == 0) {\r\n\t\t\t// dt is faster than min update rate, or no min update rate is set\r\n\t\t\tstate.update(this.updateTimer);\r\n\t\t\tthis.updateTimer = 0.0;\r\n\t\t}\r\n\r\n\t\tstate.prepareDraw(this.dt);\r\n\r\n\t\tif (!this.firstLoop) {\r\n\t\t\tstate.draw();\r\n\t\t}\r\n\r\n\t\tthis.firstLoop = false;\r\n\t}\r\n\r\n\tasync runCurrentState() {\r\n\t\tif (!this.states.get(this.currentState).state.initialized) {\r\n\t\t\tawait this.states.get(this.currentState).state.init();\r\n\t\t}\r\n\r\n\t\t// Update the state\r\n\t\tthis.updateState(\r\n\t\t\tthis.states.get(this.currentState).state,\r\n\t\t\tthis.states.get(this.currentState).minUpdateRate\r\n\t\t);\r\n\r\n\t\t// Check if we should change state\r\n\t\tif (this.states.get(this.currentState).state.gotoState != StatesEnum.STAY) {\r\n\t\t\tlet oldState = this.currentState;\r\n\t\t\tthis.currentState = this.states.get(this.currentState).state.gotoState;\r\n\r\n\t\t\tthis.states.get(oldState).state.reset();\r\n\t\t\tthis.states.get(oldState).state.gotoState = StatesEnum.STAY;\r\n\r\n\t\t\t// TODO: Add different ways to switch states, like for example, maybe we want to just have a state overlayed on top of another (pause menu).\r\n\t\t}\r\n\r\n\t\trequestAnimationFrame(this.runCurrentState.bind(this));\r\n\t}\r\n\r\n\tstart() {\r\n\t\trequestAnimationFrame(this.runCurrentState.bind(this));\r\n\t}\r\n}\r\n","import { gl } from \"../../main\";\r\nimport Texture from \"./Texture\";\r\n\r\nexport default class CubeMap extends Texture {\r\n\tprivate sidesLoaded: number;\r\n\r\n\tconstructor(\r\n\t\tuseMipMap: boolean = true,\r\n\t\tinternalFormat: number = gl.RGBA,\r\n\t\tformat: number = gl.RGBA,\r\n\t\tdataStorageType: number = gl.UNSIGNED_BYTE,\r\n\t\ttextureTarget: number = gl.TEXTURE_CUBE_MAP\r\n\t) {\r\n\t\tsuper(useMipMap, internalFormat, format, dataStorageType, textureTarget);\r\n\r\n\t\tthis.setTexParameterI(gl.TEXTURE_WRAP_R, gl.REPEAT);\r\n\t\tthis.sidesLoaded = 0;\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * @param data - the data to set for the texture\r\n\t * @param width - width of the texture\r\n\t * @param height - height of the texture\r\n\t * @param face - cubemap face to set, leave empty to set data for all faces\r\n\t */\r\n\tsetTextureData(\r\n\t\tdata: Uint8Array,\r\n\t\twidth: number,\r\n\t\theight: number,\r\n\t\tface?: number\r\n\t) {\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t\tgl.bindTexture(this.textureTarget, this.texture);\r\n\r\n\t\tif (face == undefined) {\r\n\t\t\t// Face not specified, set the data for all sides\r\n\t\t\tfor (let i = 0; i < 6; i++) {\r\n\t\t\t\tgl.texImage2D(\r\n\t\t\t\t\tgl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\r\n\t\t\t\t\t0,\r\n\t\t\t\t\tthis.internalFormat,\r\n\t\t\t\t\tthis.width,\r\n\t\t\t\t\tthis.height,\r\n\t\t\t\t\t0,\r\n\t\t\t\t\tthis.format,\r\n\t\t\t\t\tthis.dataStorageType,\r\n\t\t\t\t\tdata\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// Face specified, set data for the specified face\r\n\t\t\tgl.texImage2D(\r\n\t\t\t\tface,\r\n\t\t\t\t0,\r\n\t\t\t\tthis.internalFormat,\r\n\t\t\t\tthis.width,\r\n\t\t\t\tthis.height,\r\n\t\t\t\t0,\r\n\t\t\t\tthis.format,\r\n\t\t\t\tthis.dataStorageType,\r\n\t\t\t\tdata\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\t// Unbind texture\r\n\t\tgl.bindTexture(this.textureTarget, null);\r\n\t}\r\n\r\n\tloadCubemap(URLs: [string, string, string, string, string, string]) {\r\n\t\tfor (let i = 0; i < URLs.length; i++) {\r\n\t\t\tlet image = new Image();\r\n\t\t\timage.crossOrigin = \"\";\r\n\t\t\timage.src = URLs[i];\r\n\t\t\tlet self = this;\r\n\t\t\timage.addEventListener(\"load\", function () {\r\n\t\t\t\t// Now that the image has loaded copy it to the texture and save the width/height.\r\n\t\t\t\tself.width = image.width;\r\n\t\t\t\tself.height = image.height;\r\n\t\t\t\tgl.bindTexture(self.textureTarget, self.texture);\r\n\t\t\t\tgl.texImage2D(\r\n\t\t\t\t\tgl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\r\n\t\t\t\t\t0,\r\n\t\t\t\t\tself.internalFormat,\r\n\t\t\t\t\tself.format,\r\n\t\t\t\t\tself.dataStorageType,\r\n\t\t\t\t\timage\r\n\t\t\t\t);\r\n\t\t\t\tif (self.useMipMap) {\r\n\t\t\t\t\tgl.generateMipmap(self.textureTarget);\r\n\t\t\t\t\tgl.texParameteri(\r\n\t\t\t\t\t\tself.textureTarget,\r\n\t\t\t\t\t\tgl.TEXTURE_MIN_FILTER,\r\n\t\t\t\t\t\tgl.LINEAR_MIPMAP_LINEAR\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t\tself.sidesLoaded++;\r\n\t\t\t\tif (self.sidesLoaded >= 6) {\r\n\t\t\t\t\tself.loadedFromFile = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n}\r\n","import { gl } from \"../../main\";\r\n\r\nexport default class Texture {\r\n\t// Public\r\n\twidth: number;\r\n\theight: number;\r\n\ttexture: WebGLTexture;\r\n\r\n\tloadedFromFile: boolean;\r\n\r\n\tprotected useMipMap: boolean;\r\n\r\n\tprotected internalFormat: number;\r\n\tprotected format: number;\r\n\tprotected dataStorageType: number;\r\n\tprotected textureTarget: number;\r\n\r\n\tconstructor(\r\n\t\tuseMipMap: boolean = true,\r\n\t\tinternalFormat: number = gl.RGBA,\r\n\t\tformat: number = gl.RGBA,\r\n\t\tdataStorageType: number = gl.UNSIGNED_BYTE,\r\n\t\ttextureTarget: number = gl.TEXTURE_2D\r\n\t) {\r\n\t\t// this.missingTextureData = new Uint8Array([\r\n\t\t//     255, 255, 255, 255, 0, 0, 0, 255,\r\n\t\t//     0, 0, 0, 255, 255, 255, 255, 255\r\n\t\t// ]);\r\n\r\n\t\tthis.useMipMap = useMipMap;\r\n\r\n\t\tthis.internalFormat = internalFormat;\r\n\t\tthis.format = format;\r\n\t\tthis.dataStorageType = dataStorageType;\r\n\t\tthis.textureTarget = textureTarget;\r\n\r\n\t\t// Generate texture\r\n\t\tthis.texture = gl.createTexture();\r\n\t\tgl.bindTexture(this.textureTarget, this.texture);\r\n\r\n\t\t// Set texture parameters\r\n\t\tgl.texParameteri(this.textureTarget, gl.TEXTURE_WRAP_S, gl.REPEAT);\r\n\t\tgl.texParameteri(this.textureTarget, gl.TEXTURE_WRAP_T, gl.REPEAT);\r\n\t\tgl.texParameteri(this.textureTarget, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\t\tgl.texParameteri(this.textureTarget, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n\t\tgl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\r\n\r\n\t\t// Make a 1 by 1 empty texture\r\n\t\tthis.setTextureData(null, 1, 1);\r\n\r\n\t\tgl.bindTexture(this.textureTarget, null);\r\n\t}\r\n\r\n\tsetTextureData(data: Uint8Array, width: number, height: number) {\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t\tgl.bindTexture(this.textureTarget, this.texture);\r\n\t\tgl.texImage2D(\r\n\t\t\tthis.textureTarget,\r\n\t\t\t0,\r\n\t\t\tthis.internalFormat,\r\n\t\t\twidth,\r\n\t\t\theight,\r\n\t\t\t0,\r\n\t\t\tthis.format,\r\n\t\t\tthis.dataStorageType,\r\n\t\t\tdata\r\n\t\t);\r\n\t\tif (this.useMipMap) {\r\n\t\t\tgl.generateMipmap(this.textureTarget);\r\n\t\t\tgl.texParameteri(\r\n\t\t\t\tthis.textureTarget,\r\n\t\t\t\tgl.TEXTURE_MIN_FILTER,\r\n\t\t\t\tgl.LINEAR_MIPMAP_LINEAR\r\n\t\t\t);\r\n\t\t}\r\n\t\tgl.bindTexture(this.textureTarget, null);\r\n\r\n\t\tthis.loadedFromFile = false;\r\n\t}\r\n\r\n\tbind(textureIndex: number = 0) {\r\n\t\tgl.activeTexture(gl.TEXTURE0 + textureIndex);\r\n\t\tgl.bindTexture(this.textureTarget, this.texture);\r\n\t}\r\n\r\n\tloadFromFile(URL: string) {\r\n\t\tlet image = new Image();\r\n\t\timage.crossOrigin = \"\";\r\n\t\timage.src = URL;\r\n\t\tlet self = this;\r\n\t\timage.addEventListener(\"load\", function () {\r\n\t\t\t// Now that the image has loaded copy it to the texture and save the width/height.\r\n\t\t\tself.width = image.width;\r\n\t\t\tself.height = image.height;\r\n\t\t\tgl.bindTexture(self.textureTarget, self.texture);\r\n\t\t\tgl.texImage2D(\r\n\t\t\t\tself.textureTarget,\r\n\t\t\t\t0,\r\n\t\t\t\tself.internalFormat,\r\n\t\t\t\tself.format,\r\n\t\t\t\tself.dataStorageType,\r\n\t\t\t\timage\r\n\t\t\t);\r\n\t\t\tif (self.useMipMap) {\r\n\t\t\t\tgl.generateMipmap(self.textureTarget);\r\n\t\t\t\tgl.texParameteri(\r\n\t\t\t\t\tself.textureTarget,\r\n\t\t\t\t\tgl.TEXTURE_MIN_FILTER,\r\n\t\t\t\t\tgl.LINEAR_MIPMAP_LINEAR\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tself.loadedFromFile = true;\r\n\t\t});\r\n\t}\r\n\r\n\tsetTexParameterI(a: number, b: number) {\r\n\t\tgl.bindTexture(this.textureTarget, this.texture);\r\n\t\tgl.texParameteri(this.textureTarget, a, b);\r\n\t\tgl.bindTexture(this.textureTarget, null);\r\n\t}\r\n}\r\n\r\n// Texture::~Texture() {\r\n// \tglDeleteTextures(1, &m_texture);\r\n// }\r\n","export module WebUtils {\r\n\texport function GetCookie(cookieName: string): string {\r\n\t\tlet name = cookieName + \"=\";\r\n\t\tlet decodedCookie = decodeURIComponent(document.cookie);\r\n\t\tlet ca = decodedCookie.split(\";\");\r\n\r\n\t\tfor (let i = 0; i < ca.length; i++) {\r\n\t\t\tlet c = ca[i];\r\n\t\t\twhile (c.charAt(0) == \" \") {\r\n\t\t\t\tc = c.substring(1);\r\n\t\t\t}\r\n\t\t\tif (c.indexOf(name) == 0) {\r\n\t\t\t\treturn c.substring(name.length, c.length);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn \"\";\r\n\t}\r\n\r\n\texport function SetCookie(\r\n\t\tcookieName: string,\r\n\t\tcookieValue: string,\r\n\t\tdaysToLast: number = 365\r\n\t) {\r\n\t\tconst d = new Date();\r\n\t\td.setTime(d.getTime() + daysToLast * 24 * 60 * 60 * 1000);\r\n\t\tlet expires = \"expires=\" + d.toUTCString();\r\n\t\tdocument.cookie = cookieName + \"=\" + cookieValue + \";\" + expires;\r\n\t}\r\n\r\n\texport function DeleteCookie(cookieName: string) {\r\n\t\tdocument.cookie = cookieName + \"=;expires=Thu, 01 Jan 1970 00:00:00 UTC\";\r\n\t}\r\n\r\n\texport function DownloadFile(filename, text) {\r\n\t\tlet element = document.createElement(\"a\");\r\n\t\telement.setAttribute(\r\n\t\t\t\"href\",\r\n\t\t\t\"data:text/plain;charset=utf-8,\" + encodeURIComponent(text)\r\n\t\t);\r\n\t\telement.setAttribute(\"download\", filename);\r\n\r\n\t\telement.style.display = \"none\";\r\n\t\tdocument.body.appendChild(element);\r\n\r\n\t\telement.click();\r\n\r\n\t\tdocument.body.removeChild(element);\r\n\t}\r\n}\r\n","import {\r\n\tComponent,\r\n\tComponentTypeEnum,\r\n} from \"../../../Engine/ECS/Components/Component\";\r\nimport Vec3 from \"../../../Engine/Maths/Vec3\";\r\n\r\nexport default class DeiliveryZoneComponent extends Component {\r\n\tpos: Vec3;\r\n\tradius: number;\r\n\ttriggerd: boolean;\r\n\r\n\tconstructor(componentType?: ComponentTypeEnum) {\r\n\t\tsuper(componentType ? componentType : ComponentTypeEnum.DELIVERYZONE);\r\n\t\tthis.pos = new Vec3();\r\n\t\tthis.radius = 0;\r\n\t\tthis.triggerd = false;\r\n\t}\r\n}\r\n","import { ComponentTypeEnum } from \"../../../Engine/ECS/Components/Component\";\r\nimport GraphicsComponent from \"../../../Engine/ECS/Components/GraphicsComponent\";\r\nimport PositionComponent from \"../../../Engine/ECS/Components/PositionComponent\";\r\nimport System from \"../../../Engine/ECS/Systems/System\";\r\nimport { StatesEnum } from \"../../../Engine/State\";\r\nimport Game from \"../../States/Game\";\r\nimport DeiliveryZoneComponent from \"../Components/DeliveryZoneComponent\";\r\n\r\nexport default class DeliveryZoneSystem extends System {\r\n\tprivate game: Game;\r\n\tconstructor() {\r\n\t\tsuper([ComponentTypeEnum.DELIVERYZONE, ComponentTypeEnum.POSITION]);\r\n\t\tthis.game = Game.getInstanceNoSa();\r\n\t}\r\n\r\n\tupdate(dt: number): void {\r\n\t\tfor (const e of this.entities) {\r\n\t\t\tfor (let i = 0; i < this.game.newspapersStopped.length; i++) {\r\n\t\t\t\tlet paperPosComp = <PositionComponent>(\r\n\t\t\t\t\tthis.game.newspapersStopped[i].entity.getComponent(\r\n\t\t\t\t\t\tComponentTypeEnum.POSITION\r\n\t\t\t\t\t)\r\n\t\t\t\t);\r\n\t\t\t\tlet zoneComp = (<DeiliveryZoneComponent>(e.getComponent(ComponentTypeEnum.DELIVERYZONE)));\r\n\t\t\t\tlet posComp = (<PositionComponent>(e.getComponent(ComponentTypeEnum.POSITION)));\r\n\t\t\t\tlet graComp = (<GraphicsComponent>(e.getComponent(ComponentTypeEnum.GRAPHICS)));\r\n\r\n\t\t\t\tzoneComp.pos.deepAssign(posComp.position);\r\n\t\t\t\tzoneComp.radius = posComp.scale.x;\r\n\r\n\t\t\t\tif (!zoneComp.triggerd &&\r\n\t\t\t\t\tMath.pow(paperPosComp.position.x - zoneComp.pos.x, 2) +\r\n\t\t\t\t\tMath.pow(paperPosComp.position.y - zoneComp.pos.y, 2) +\r\n\t\t\t\t\tMath.pow(paperPosComp.position.z - zoneComp.pos.z, 2) <\r\n\t\t\t\t\tMath.pow(zoneComp.radius, 2)\r\n\t\t\t\t) {\r\n\t\t\t\t\tzoneComp.triggerd = true;\r\n\t\t\t\t\tgraComp.object.baseColor = new Vector3([0, 1, 0]);\r\n\t\t\t\t\tthis.game.score -= 1;\r\n\t\t\t\t\tthis.game.newspapersStopped.splice(i, 1);\r\n\t\t\t\t\tthis.game.ecsManager.removeEntity(e.id);\r\n\t\t\t\t\ti--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","import AudioPlayer from \"../Engine/Audio/AudioPlayer\";\r\nimport TextObject2D from \"../Engine/GUI/Text/TextObject2D\";\r\nimport Input from \"../Engine/Input/Input\";\r\nimport MeshStore from \"../Engine/AssetHandling/MeshStore\";\r\nimport { StatesEnum } from \"../Engine/State\";\r\nimport StateMachine from \"../Engine/StateMachine\";\r\nimport TextureStore from \"../Engine/AssetHandling/TextureStore\";\r\nimport ControlsMenu from \"./States/ControlsMenu\";\r\nimport DebugMode from \"./States/DebugMode\";\r\nimport Game from \"./States/Game\";\r\nimport LoadingScreen from \"./States/LoadingScreen\";\r\nimport Menu from \"./States/Menu\";\r\nimport OptionsMenu from \"./States/OptionsMenu\";\r\nimport { WebUtils } from \"../Engine/Utils/WebUtils\";\r\nimport { OverlayRendering } from \"../Engine/Rendering/OverlayRendering\";\r\nimport EndScreen from \"./States/EndScreen\";\r\n\r\n// Globals\r\nexport let input = new Input();\r\nexport let options = {\r\n\tuseCrt: false,\r\n\tuseBloom: false,\r\n\tfoldableGrass: false,\r\n\tshowFps: true,\r\n\tgrassDensity: 10000,\r\n\tvolume: 0.05,\r\n};\r\n\r\n/**\r\n * These are the variables available to all the states\r\n */\r\nexport class StateAccessible {\r\n\ttextureStore: TextureStore;\r\n\tmeshStore: MeshStore;\r\n\t// fpsDisplay: TextObject2D;\r\n\taudioPlayer: AudioPlayer;\r\n\trestartGame: boolean;\r\n}\r\n\r\nexport default class GameMachine extends StateMachine {\r\n\tstateAccessible: StateAccessible;\r\n\r\n\tprivate overlayRendering: OverlayRendering;\r\n\tprivate fpsDisplay: TextObject2D;\r\n\r\n\tconstructor() {\r\n\t\tsuper(StatesEnum.LOADINGSCREEN);\r\n\t\tthis.initializeOptions();\r\n\t\tthis.stateAccessible = {\r\n\t\t\ttextureStore: new TextureStore(),\r\n\t\t\tmeshStore: new MeshStore(),\r\n\t\t\t// fpsDisplay: null,\r\n\t\t\taudioPlayer: new AudioPlayer(),\r\n\t\t\trestartGame: false,\r\n\t\t};\r\n\r\n\t\t// Add states\r\n\t\tthis.addState(\r\n\t\t\tStatesEnum.LOADINGSCREEN,\r\n\t\t\tLoadingScreen,\r\n\t\t\t1 / 60.0,\r\n\t\t\tnew LoadingScreen(this.stateAccessible)\r\n\t\t);\r\n\t\tthis.addState(\r\n\t\t\tStatesEnum.MAINMENU,\r\n\t\t\tMenu,\r\n\t\t\t1.0 / 60.0,\r\n\t\t\tnew Menu(this.stateAccessible)\r\n\t\t);\r\n\t\tthis.addState(\r\n\t\t\tStatesEnum.OPTIONS,\r\n\t\t\tOptionsMenu,\r\n\t\t\t1.0 / 60.0,\r\n\t\t\tnew OptionsMenu(this.stateAccessible)\r\n\t\t);\r\n\t\tthis.addState(\r\n\t\t\tStatesEnum.CONTROLS,\r\n\t\t\tControlsMenu,\r\n\t\t\t1.0 / 60.0,\r\n\t\t\tnew ControlsMenu(this.stateAccessible)\r\n\t\t);\r\n\t\tthis.addState(\r\n\t\t\tStatesEnum.ENDSCREEN,\r\n\t\t\tEndScreen,\r\n\t\t\t1.0 / 60.0,\r\n\t\t\tnew EndScreen(this.stateAccessible)\r\n\t\t);\r\n\t\tlet game = Game.getInstance(this.stateAccessible);\r\n\t\tthis.addState(StatesEnum.GAME, Game, 1.0 / 144.0, game);\r\n\t\tthis.stateAccessible.restartGame = true;\r\n\r\n\t\t// game.load();\r\n\t\tthis.addState(\r\n\t\t\tStatesEnum.DEBUGMODE,\r\n\t\t\tDebugMode,\r\n\t\t\t1.0 / 144.0,\r\n\t\t\tnew DebugMode(this.stateAccessible, game)\r\n\t\t);\r\n\r\n\t\tthis.overlayRendering = new OverlayRendering();\r\n\t\tthis.fpsDisplay = this.overlayRendering.getNew2DText();\r\n\t\tthis.fpsDisplay.position.x = 0.01;\r\n\t\tthis.fpsDisplay.position.y = 0.01;\r\n\t\tthis.fpsDisplay.size = 18;\r\n\t\tthis.fpsDisplay.scaleWithWindow = false;\r\n\t\tthis.fpsDisplay.getElement().style.color = \"lime\";\r\n\t}\r\n\r\n\tonExit(e: BeforeUnloadEvent) {\r\n\t\tWebUtils.SetCookie(\"showFps\", options.showFps.valueOf().toString());\r\n\t\tWebUtils.SetCookie(\"useCrt\", options.useCrt.valueOf().toString());\r\n\t\tWebUtils.SetCookie(\"useBloom\", options.useBloom.valueOf().toString());\r\n\t\tWebUtils.SetCookie(\r\n\t\t\t\"foldableGrass\",\r\n\t\t\toptions.foldableGrass.valueOf().toString()\r\n\t\t);\r\n\t\tWebUtils.SetCookie(\"volume\", options.volume.toString());\r\n\t\tWebUtils.SetCookie(\"grassDensity\", options.grassDensity.toString());\r\n\r\n\t\tfor (let s of this.states) {\r\n\t\t\ts[1].state.onExit(e);\r\n\t\t}\r\n\t}\r\n\r\n\tinitializeOptions() {\r\n\t\toptions.showFps = !(WebUtils.GetCookie(\"showFps\") == \"false\");\r\n\t\toptions.useCrt = WebUtils.GetCookie(\"useCrt\") == \"true\";\r\n\t\toptions.useBloom = WebUtils.GetCookie(\"useBloom\") == \"true\";\r\n\t\toptions.foldableGrass = WebUtils.GetCookie(\"foldableGrass\") == \"true\";\r\n\t\tlet volumeCookie = WebUtils.GetCookie(\"volume\");\r\n\t\tif (volumeCookie != \"\") {\r\n\t\t\toptions.volume = parseFloat(volumeCookie);\r\n\t\t}\r\n\t\tlet grassDensityCookie = WebUtils.GetCookie(\"grassDensity\");\r\n\t\tif (grassDensityCookie != \"\") {\r\n\t\t\toptions.grassDensity = parseFloat(grassDensityCookie);\r\n\t\t}\r\n\t}\r\n\r\n\tasync runCurrentState() {\r\n\t\tthis.fpsDisplay.setHidden(!options.showFps);\r\n\t\tthis.fpsDisplay.textString = Math.round(this.fps) + \"\";\r\n\t\tthis.overlayRendering.draw();\r\n\t\tsuper.runCurrentState();\r\n\t}\r\n}\r\n","import Vec2 from \"../Engine/Maths/Vec2\";\r\nimport Vec3 from \"../Engine/Maths/Vec3\";\r\nimport GraphicsBundle from \"../Engine/Objects/GraphicsBundle\";\r\nimport GrassSpawner from \"../Engine/Objects/GrassSpawner\";\r\nimport Heightmap from \"../Engine/Objects/Heightmap\";\r\nimport Scene from \"../Engine/Rendering/Scene\";\r\nimport Doggo from \"./Player\";\r\nimport { options } from \"./GameMachine\";\r\n\r\nexport default class GrassHandler {\r\n\tprivate grassSpawners: Array<{ spawner: GrassSpawner; offset: Vec2 }>;\r\n\tprivate grassStrawsPerSpawner: number;\r\n\tprivate grassStrawsSpawned: number;\r\n\tprivate grassSpawnerSide: number;\r\n\tprivate grassElevationCutoff: number;\r\n\r\n\tprivate scene: Scene;\r\n\tprivate mapBundle: GraphicsBundle;\r\n\tprivate doggo: Doggo;\r\n\r\n\tconstructor(scene: Scene, mapBundle: GraphicsBundle, doggo: Doggo) {\r\n\t\tthis.scene = scene;\r\n\t\tthis.mapBundle = mapBundle;\r\n\t\tthis.doggo = doggo;\r\n\r\n\t\tthis.grassSpawners = new Array<{ spawner: GrassSpawner; offset: Vec2 }>();\r\n\t\tthis.grassStrawsPerSpawner = options.grassDensity;\r\n\t\tthis.grassStrawsSpawned = 0;\r\n\t\tthis.grassSpawnerSide = 25;\r\n\t\tthis.grassElevationCutoff = -3.7;\r\n\r\n\t\tfor (let i = 0; i < 4; i++) {\r\n\t\t\tfor (let j = 0; j < 4; j++) {\r\n\t\t\t\tthis.createGrass(\r\n\t\t\t\t\t-10.0 + i * this.grassSpawnerSide,\r\n\t\t\t\t\t-10.0 + j * this.grassSpawnerSide\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcreateGrass(offsetX, offsetY) {\r\n\t\tlet texturePathColour = \"Assets/textures/GrassStraw.png\";\r\n\t\tlet texturePathSpec = \"Assets/textures/GrassStraw_Spec.png\";\r\n\r\n\t\tlet bundle = this.scene.getNewGrassSpawner(\r\n\t\t\ttexturePathColour,\r\n\t\t\ttexturePathSpec,\r\n\t\t\tthis.grassStrawsPerSpawner\r\n\t\t);\r\n\t\t// if (Math.random() > 0.5) {\r\n\t\t// \tbundle.emission = this.stateAccessible.textureStore.getTexture(\r\n\t\t// \t\t\"Assets/textures/GrassStraw_Spec.png\"\r\n\t\t// \t);\r\n\t\t// }\r\n\r\n\t\tthis.grassSpawners.push({\r\n\t\t\tspawner: bundle.graphicsObject as GrassSpawner,\r\n\t\t\toffset: new Vec2([offsetX, offsetY]),\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Spawn as much grass as possible within 20 milliseconds or until all grass straws have been spawned\r\n\t */\r\n\tfillGrass() {\r\n\t\tlet startTime = Date.now();\r\n\r\n\t\tlet sqrt = Math.pow(this.grassStrawsPerSpawner, 0.5);\r\n\t\tlet strawDist = this.grassSpawnerSide / sqrt;\r\n\r\n\t\tlet invertedMatrix = new Matrix4(this.mapBundle.modelMatrix).invert(); // Invert the transform matrix used for the heightmap\r\n\r\n\t\tlet data = new Array<number>();\r\n\t\tlet firstIndex = this.grassStrawsSpawned % this.grassStrawsPerSpawner;\r\n\t\tlet lastSpawnerIndex = Math.floor(\r\n\t\t\tthis.grassStrawsSpawned / this.grassStrawsPerSpawner\r\n\t\t);\r\n\r\n\t\t// Spawn as much grass as possible within 20 milliseconds every frame until all grass straws have been spawned\r\n\t\twhile (\r\n\t\t\tDate.now() - startTime < 20 &&\r\n\t\t\tthis.grassStrawsSpawned <\r\n\t\t\t\tthis.grassSpawners.length * this.grassStrawsPerSpawner\r\n\t\t) {\r\n\t\t\tlet spawnerIndex = Math.floor(\r\n\t\t\t\tthis.grassStrawsSpawned / this.grassStrawsPerSpawner\r\n\t\t\t);\r\n\t\t\tlet i = this.grassStrawsSpawned % this.grassStrawsPerSpawner;\r\n\r\n\t\t\tif (lastSpawnerIndex != spawnerIndex) {\r\n\t\t\t\t// Switching spawner, update the data for the previous one\r\n\t\t\t\tthis.grassSpawners[lastSpawnerIndex].spawner.bufferSubDataUpdate(\r\n\t\t\t\t\tfirstIndex * 7,\r\n\t\t\t\t\tnew Float32Array(data)\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// Clear data and reset index\r\n\t\t\t\tdata.length = 0;\r\n\t\t\t\tfirstIndex = 0;\r\n\t\t\t}\r\n\r\n\t\t\tlastSpawnerIndex = spawnerIndex;\r\n\r\n\t\t\tlet offset = this.grassSpawners[spawnerIndex].offset;\r\n\t\t\tlet grassStrawPosition = new Vec3([\r\n\t\t\t\t// Grass position (x and z)\r\n\t\t\t\toffset.x + (i % sqrt) * strawDist + strawDist * (Math.random() - 0.5),\r\n\t\t\t\t0.0,\r\n\t\t\t\toffset.y +\r\n\t\t\t\t\tMath.floor(i / sqrt) * strawDist +\r\n\t\t\t\t\tstrawDist * (Math.random() - 0.5),\r\n\t\t\t]);\r\n\r\n\t\t\t// Get the height of the heightmap at the corresponding position\r\n\t\t\tlet height = (<Heightmap>(\r\n\t\t\t\tthis.mapBundle.graphicsObject\r\n\t\t\t)).getHeightFromWorldPosition(\r\n\t\t\t\tthis.mapBundle.modelMatrix,\r\n\t\t\t\tgrassStrawPosition,\r\n\t\t\t\tinvertedMatrix\r\n\t\t\t);\r\n\t\t\tlet size = 0.0;\r\n\r\n\t\t\tif (height != null) {\r\n\t\t\t\tlet normal = (<Heightmap>(\r\n\t\t\t\t\tthis.mapBundle.graphicsObject\r\n\t\t\t\t)).getNormalFromWorldPosition(\r\n\t\t\t\t\tthis.mapBundle.modelMatrix,\r\n\t\t\t\t\tgrassStrawPosition,\r\n\t\t\t\t\tinvertedMatrix\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif (normal != null) {\r\n\t\t\t\t\tif (normal.y < 0.999999999 || height < this.grassElevationCutoff) {\r\n\t\t\t\t\t\t// Given that the x and z coords of the position are on the heightmap\r\n\t\t\t\t\t\tgrassStrawPosition.y = height;\r\n\t\t\t\t\t\tsize = Math.random() * 0.4 + 0.1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tdata.push(...grassStrawPosition); // Position of straw\r\n\t\t\tdata.push(size); // Size of straw\r\n\t\t\tdata.push(\r\n\t\t\t\t...[\r\n\t\t\t\t\t(Math.random() - 0.5) * 0.1,\r\n\t\t\t\t\t(Math.random() - 0.5) * 0.1,\r\n\t\t\t\t\t(Math.random() - 0.5) * 0.1,\r\n\t\t\t\t]\r\n\t\t\t); // TipOffset\r\n\r\n\t\t\tthis.grassStrawsSpawned++;\r\n\t\t}\r\n\r\n\t\tthis.grassSpawners[lastSpawnerIndex].spawner.bufferSubDataUpdate(\r\n\t\t\tfirstIndex * 7,\r\n\t\t\tnew Float32Array(data)\r\n\t\t);\r\n\t}\r\n\r\n\tupdateGrass() {\r\n\t\tconst doggoPosition = this.doggo.getPosition();\r\n\t\tconst doggoVelocity = this.doggo.getVelocity();\r\n\r\n\t\tlet sqrt = Math.pow(this.grassStrawsPerSpawner, 0.5);\r\n\t\tlet strawDist = this.grassSpawnerSide / sqrt;\r\n\r\n\t\tlet invertedMatrix = new Matrix4(this.mapBundle.modelMatrix).invert(); // Invert the transform matrix used for the heightmap\r\n\r\n\t\tfor (let grassSpawner of this.grassSpawners) {\r\n\t\t\tif (\r\n\t\t\t\tgrassSpawner.offset.x > doggoPosition.x - this.grassSpawnerSide &&\r\n\t\t\t\tgrassSpawner.offset.x < doggoPosition.x &&\r\n\t\t\t\tgrassSpawner.offset.y > doggoPosition.z - this.grassSpawnerSide &&\r\n\t\t\t\tgrassSpawner.offset.y < doggoPosition.z\r\n\t\t\t) {\r\n\t\t\t\tif (\r\n\t\t\t\t\tdoggoPosition.y -\r\n\t\t\t\t\t\t(<Heightmap>(\r\n\t\t\t\t\t\t\tthis.mapBundle.graphicsObject\r\n\t\t\t\t\t\t)).getHeightFromWorldPosition(\r\n\t\t\t\t\t\t\tthis.mapBundle.modelMatrix,\r\n\t\t\t\t\t\t\tdoggoPosition,\r\n\t\t\t\t\t\t\tinvertedMatrix\r\n\t\t\t\t\t\t) <\r\n\t\t\t\t\t1.0\r\n\t\t\t\t) {\r\n\t\t\t\t\tlet diffX = doggoPosition.x - grassSpawner.offset.x;\r\n\t\t\t\t\tlet diffY = doggoPosition.z - grassSpawner.offset.y;\r\n\r\n\t\t\t\t\tlet middleX = Math.floor(diffX / strawDist);\r\n\t\t\t\t\tlet middleY = Math.floor(diffY / strawDist);\r\n\r\n\t\t\t\t\tfor (let x = middleX - 10; x < middleX + 11; x++) {\r\n\t\t\t\t\t\tfor (let y = middleY - 10; y < middleY + 11; y++) {\r\n\t\t\t\t\t\t\tlet dist = new Vec2([\r\n\t\t\t\t\t\t\t\tx * strawDist - diffX,\r\n\t\t\t\t\t\t\t\ty * strawDist - diffY,\r\n\t\t\t\t\t\t\t]);\r\n\t\t\t\t\t\t\tif (dist.len() < 0.3) {\r\n\t\t\t\t\t\t\t\tlet index = Math.floor(x + y * sqrt);\r\n\t\t\t\t\t\t\t\tif (index > 0 && index < this.grassStrawsPerSpawner) {\r\n\t\t\t\t\t\t\t\t\tlet offset = new Vec3([doggoVelocity.x, 0.0, doggoVelocity.z])\r\n\t\t\t\t\t\t\t\t\t\t.normalize()\r\n\t\t\t\t\t\t\t\t\t\t.multiply(0.2);\r\n\t\t\t\t\t\t\t\t\toffset.y = -0.2;\r\n\t\t\t\t\t\t\t\t\tgrassSpawner.spawner.setGrassTipOffset(index, offset);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tupdate(dt: number) {\r\n\t\tif (\r\n\t\t\tthis.grassStrawsSpawned <\r\n\t\t\tthis.grassSpawners.length * this.grassStrawsPerSpawner\r\n\t\t) {\r\n\t\t\tthis.fillGrass();\r\n\t\t}\r\n\r\n\t\tif (options.foldableGrass) {\r\n\t\t\tthis.updateGrass();\r\n\t\t}\r\n\t}\r\n}\r\n","import BoundingBoxComponent from \"../Engine/ECS/Components/BoundingBoxComponent\";\r\nimport CollisionComponent from \"../Engine/ECS/Components/CollisionComponent\";\r\nimport { ComponentTypeEnum } from \"../Engine/ECS/Components/Component\";\r\nimport GraphicsComponent from \"../Engine/ECS/Components/GraphicsComponent\";\r\nimport MovementComponent from \"../Engine/ECS/Components/MovementComponent\";\r\nimport PositionComponent from \"../Engine/ECS/Components/PositionComponent\";\r\nimport ECSManager from \"../Engine/ECS/ECSManager\";\r\nimport Entity from \"../Engine/ECS/Entity\";\r\nimport Vec3 from \"../Engine/Maths/Vec3\";\r\nimport Scene from \"../Engine/Rendering/Scene\";\r\n\r\nexport default class Newspaper {\r\n\tprivate ecsManager;\r\n\tprivate scene;\r\n\tentity: Entity;\r\n\r\n\tconstructor(\r\n\t\tstartingPos: Vec3,\r\n\t\tstartingVel: Vec3,\r\n\t\tstartingRot: Vec3,\r\n\t\tecsManager: ECSManager,\r\n\t\tscene: Scene\r\n\t) {\r\n\t\tthis.ecsManager = ecsManager;\r\n\t\tthis.scene = scene;\r\n\t\tthis.entity = this.ecsManager.createEntity();\r\n\r\n\t\tlet posComp = new PositionComponent();\r\n\t\tposComp.position = new Vec3(startingPos);\r\n\t\tposComp.rotation = new Vec3(startingRot);\r\n\t\tposComp.scale.setValues(0.2, 0.2, 0.2);\r\n\t\tthis.ecsManager.addComponent(this.entity, posComp);\r\n\r\n\t\tlet moveComp = new MovementComponent();\r\n\t\tmoveComp.velocity = startingVel;\r\n\t\tthis.ecsManager.addComponent(this.entity, moveComp);\r\n\r\n\t\tlet paperMesh = this.scene.getNewMesh(\r\n\t\t\t\"Assets/objs/newspaper.obj\",\r\n\t\t\t\"Assets/textures/news.png\",\r\n\t\t\t\"Assets/textures/black.png\"\r\n\t\t);\r\n\t\tlet boundingBoxComp = new BoundingBoxComponent();\r\n\t\tboundingBoxComp.setup(paperMesh.graphicsObject);\r\n\t\tboundingBoxComp.updateTransformMatrix(paperMesh.modelMatrix);\r\n\t\tthis.ecsManager.addComponent(this.entity, boundingBoxComp);\r\n\r\n\t\tlet graComp = new GraphicsComponent(paperMesh);\r\n\t\tthis.ecsManager.addComponent(this.entity, graComp);\r\n\t\tthis.ecsManager.addComponent(this.entity, new CollisionComponent());\r\n\t}\r\n\r\n\tupdate(dt: number): boolean {\r\n\t\tlet moveComp = <MovementComponent>(\r\n\t\t\tthis.entity.getComponent(ComponentTypeEnum.MOVEMENT)\r\n\t\t);\r\n\t\tif (moveComp.onGround) {\r\n\t\t\tmoveComp.drag = 18;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tmoveComp.drag = 1;\r\n\t\t}\r\n\t\tlet posComp = <PositionComponent>(\r\n\t\t\tthis.entity.getComponent(ComponentTypeEnum.POSITION)\r\n\t\t);\r\n\t\tif ((moveComp.velocity.length2() <= 0.01 && moveComp.onGround) || (posComp != undefined && posComp.position.y < -10.0)) {\r\n\t\t\tthis.ecsManager.removeComponent(this.entity, ComponentTypeEnum.MOVEMENT);\r\n\t\t\tthis.ecsManager.removeComponent(this.entity, ComponentTypeEnum.COLLISION);\r\n\t\t\tthis.ecsManager.removeComponent(\r\n\t\t\t\tthis.entity,\r\n\t\t\t\tComponentTypeEnum.BOUNDINGBOX\r\n\t\t\t);\r\n\t\t\treturn false;\r\n\t\t} else {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n}\r\n","import MeshStore from \"../Engine/AssetHandling/MeshStore\";\r\nimport BoundingBoxComponent from \"../Engine/ECS/Components/BoundingBoxComponent\";\r\nimport CollisionComponent from \"../Engine/ECS/Components/CollisionComponent\";\r\nimport { ComponentTypeEnum } from \"../Engine/ECS/Components/Component\";\r\nimport GraphicsComponent from \"../Engine/ECS/Components/GraphicsComponent\";\r\nimport MeshCollisionComponent from \"../Engine/ECS/Components/MeshCollisionComponent\";\r\nimport PositionComponent from \"../Engine/ECS/Components/PositionComponent\";\r\nimport ECSManager from \"../Engine/ECS/ECSManager\";\r\nimport Entity from \"../Engine/ECS/Entity\";\r\nimport Vec3 from \"../Engine/Maths/Vec3\";\r\nimport { IntersectionTester } from \"../Engine/Physics/IntersectionTester\";\r\nimport Ray from \"../Engine/Physics/Shapes/Ray\";\r\nimport Triangle from \"../Engine/Physics/Shapes/Triangle\";\r\nimport Scene from \"../Engine/Rendering/Scene\";\r\nimport { WebUtils } from \"../Engine/Utils/WebUtils\";\r\nimport DeiliveryZoneComponent from \"./ECS/Components/DeliveryZoneComponent\";\r\nimport Game from \"./States/Game\";\r\n\r\nclass Transform {\r\n\tpos: Vec3;\r\n\tsize: number;\r\n\trot: Vec3;\r\n\tentity: Entity;\r\n\r\n\tconstructor(pos: Vec3, size: number, rot: Vec3) {\r\n\t\tthis.pos = pos;\r\n\t\tthis.size = size;\r\n\t\tthis.rot = rot;\r\n\t\tthis.entity = null;\r\n\t}\r\n}\r\n\r\nclass Placement {\r\n\tmodelPath: string;\r\n\tplacementsPath: string;\r\n\tdiffuseTexturePath: string;\r\n\tspecularTexturePath: string;\r\n\tsizeMultiplier: number;\r\n\taddCollision: boolean;\r\n\ttransforms: Array<Transform>;\r\n\ttransformAdded: boolean;\r\n\r\n\tconstructor(\r\n\t\tmodelPath: string,\r\n\t\tplacementPath: string,\r\n\t\tdiffuseTexturePath: string,\r\n\t\tspecularTexturePath: string,\r\n\t\taddCollision: boolean = true\r\n\t) {\r\n\t\tthis.modelPath = modelPath;\r\n\t\tthis.placementsPath = placementPath;\r\n\t\tthis.diffuseTexturePath = diffuseTexturePath;\r\n\t\tthis.specularTexturePath = specularTexturePath;\r\n\t\tthis.transforms = new Array<Transform>();\r\n\t\tthis.addCollision = addCollision;\r\n\t\tthis.transformAdded = false;\r\n\t}\r\n\r\n\tasync loadFromFile() {\r\n\t\tconst response = await fetch(\"Assets/placements/\" + this.placementsPath);\r\n\t\tif (response.ok) {\r\n\t\t\tconst transforms = await response.text();\r\n\r\n\t\t\tif (transforms != \"\") {\r\n\t\t\t\tfor (let t of transforms.split(\"\\n\")) {\r\n\t\t\t\t\tt = t.trim();\r\n\t\t\t\t\tif (t == \"\") {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlet [p, s, r] = t.split(\"|\");\r\n\t\t\t\t\tlet temp = new Transform(\r\n\t\t\t\t\t\tnew Vec3(p.split(\",\").map((n) => parseFloat(n))),\r\n\t\t\t\t\t\tparseFloat(s),\r\n\t\t\t\t\t\tnew Vec3(r.split(\",\").map((n) => parseFloat(n))),\r\n\t\t\t\t\t);\r\n\t\t\t\t\tthis.transforms.push(temp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default class ObjectPlacer {\r\n\tprivate placements: Map<string, Placement>;\r\n\tprivate transformsAdded: boolean;\r\n\tprivate scene: Scene;\r\n\tprivate ecsManager: ECSManager;\r\n\tprivate meshStore: MeshStore;\r\n\r\n\tprivate currentlyEditingTransform: Transform;\r\n\tprivate currentlyEditingPlacement: Placement;\r\n\tgame: Game;\r\n\r\n\tconstructor(meshStore: MeshStore) {\r\n\t\tthis.meshStore = meshStore;\r\n\t\tthis.transformsAdded = false;\r\n\t\tthis.placements = new Map<string, Placement>();\r\n\r\n\t\tthis.placements.set(\r\n\t\t\t\"Assets/objs/mailbox.obj\",\r\n\t\t\tnew Placement(\r\n\t\t\t\t\"Assets/objs/mailbox.obj\",\r\n\t\t\t\t\"MailboxTransforms.txt\",\r\n\t\t\t\t\"Assets/textures/mailbox.png\",\r\n\t\t\t\t\"Assets/textures/mailbox.png\"\r\n\t\t\t)\r\n\t\t);\r\n\t\tthis.placements.set(\r\n\t\t\t\"Assets/objs/tree_1.obj\",\r\n\t\t\tnew Placement(\r\n\t\t\t\t\"Assets/objs/tree_1.obj\",\r\n\t\t\t\t\"Tree1Transforms.txt\",\r\n\t\t\t\t\"Assets/textures/tree_1.png\",\r\n\t\t\t\t\"Assets/textures/tree_1.png\"\r\n\t\t\t)\r\n\t\t);\r\n\t\tthis.placements.set(\r\n\t\t\t\"Assets/objs/tree_2.obj\",\r\n\t\t\tnew Placement(\r\n\t\t\t\t\"Assets/objs/tree_2.obj\",\r\n\t\t\t\t\"Tree2Transforms.txt\",\r\n\t\t\t\t\"Assets/textures/tree_2.png\",\r\n\t\t\t\t\"Assets/textures/tree_2.png\"\r\n\t\t\t)\r\n\t\t);\r\n\t\tthis.placements.set(\r\n\t\t\t\"Assets/objs/tree_3.obj\",\r\n\t\t\tnew Placement(\r\n\t\t\t\t\"Assets/objs/tree_3.obj\",\r\n\t\t\t\t\"Tree3Transforms.txt\",\r\n\t\t\t\t\"Assets/textures/tree_3.png\",\r\n\t\t\t\t\"Assets/textures/tree_3.png\"\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\tthis.placements.set(\r\n\t\t\t\"Assets/objs/house.obj\",\r\n\t\t\tnew Placement(\r\n\t\t\t\t\"Assets/objs/house.obj\",\r\n\t\t\t\t\"HouseTransforms.txt\",\r\n\t\t\t\t\"Assets/textures/houseTex_bright.png\",\r\n\t\t\t\t\"Assets/textures/houseTex_bright.png\"\r\n\t\t\t)\r\n\t\t);\r\n\t\tthis.placements.set(\r\n\t\t\t\"Assets/objs/newspaper.obj\",\r\n\t\t\tnew Placement(\r\n\t\t\t\t\"Assets/objs/newspaper.obj\",\r\n\t\t\t\t\"NewspaperTransforms.txt\",\r\n\t\t\t\t\"Assets/textures/news.png\",\r\n\t\t\t\t\"Assets/textures/news.png\",\r\n\t\t\t\tfalse\r\n\t\t\t)\r\n\t\t);\r\n\t\tthis.placements.set(\r\n\t\t\t\"Assets/objs/fence.obj\",\r\n\t\t\tnew Placement(\r\n\t\t\t\t\"Assets/objs/fence.obj\",\r\n\t\t\t\t\"FenceTransforms.txt\",\r\n\t\t\t\t\"Assets/textures/white.png\",\r\n\t\t\t\t\"Assets/textures/white.png\"\r\n\t\t\t)\r\n\t\t);\r\n\t\tthis.placements.set(\r\n\t\t\t\"Assets/objs/BigBuske.obj\",\r\n\t\t\tnew Placement(\r\n\t\t\t\t\"Assets/objs/BigBuske.obj\",\r\n\t\t\t\t\"BigBuskeTransforms.txt\",\r\n\t\t\t\t\"Assets/textures/BushTexture.png\",\r\n\t\t\t\t\"Assets/textures/BushTexture.png\"\r\n\t\t\t)\r\n\t\t);\r\n\t\tthis.placements.set(\r\n\t\t\t\"Assets/objs/Solros.obj\",\r\n\t\t\tnew Placement(\r\n\t\t\t\t\"Assets/objs/Solros.obj\",\r\n\t\t\t\t\"SolrosTransforms.txt\",\r\n\t\t\t\t\"Assets/textures/Solros.png\",\r\n\t\t\t\t\"Assets/textures/Solros.png\",\r\n\t\t\t\tfalse\r\n\t\t\t)\r\n\t\t);\r\n\t\tthis.placements.set(\r\n\t\t\t\"Assets/objs/Plant.obj\",\r\n\t\t\tnew Placement(\r\n\t\t\t\t\"Assets/objs/Plant.obj\",\r\n\t\t\t\t\"PlantTransforms.txt\",\r\n\t\t\t\t\"Assets/textures/LeafTexture.png\",\r\n\t\t\t\t\"Assets/textures/LeafTexture.png\",\r\n\t\t\t\tfalse\r\n\t\t\t)\r\n\t\t);\r\n\t\tthis.placements.set(\r\n\t\t\t\"Assets/objs/SmolBuske.obj\",\r\n\t\t\tnew Placement(\r\n\t\t\t\t\"Assets/objs/SmolBuske.obj\",\r\n\t\t\t\t\"SmolBuskeTransforms.txt\",\r\n\t\t\t\t\"Assets/textures/BushTexture.png\",\r\n\t\t\t\t\"Assets/textures/BushTexture.png\"\r\n\t\t\t)\r\n\t\t);\r\n\t\tthis.placements.set(\r\n\t\t\t\"Assets/objs/DeliveryZone.obj\",\r\n\t\t\tnew Placement(\r\n\t\t\t\t\"Assets/objs/DeliveryZone.obj\",\r\n\t\t\t\t\"DeliveryZoneTransforms.txt\",\r\n\t\t\t\t\"Assets/textures/DZ.png\",\r\n\t\t\t\t\"Assets/textures/DZ.png\",\r\n\t\t\t\tfalse\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\tthis.currentlyEditingTransform = null;\r\n\t\tthis.currentlyEditingPlacement = null;\r\n\t}\r\n\r\n\tasync load(scene: Scene, ecsManager: ECSManager) {\r\n\t\tthis.scene = scene;\r\n\t\tthis.ecsManager = ecsManager;\r\n\t\tthis.game = Game.getInstanceNoSa();\r\n\r\n\t\tfor (let placement of this.placements) {\r\n\t\t\tif (placement[1].transforms.length == 0) {\r\n\t\t\t\tawait placement[1].loadFromFile();\r\n\t\t\t}\r\n\r\n\t\t\tfor (let transform of placement[1].transforms) {\r\n\t\t\t\tlet entity = this.placeObject(\r\n\t\t\t\t\tplacement[0],\r\n\t\t\t\t\ttransform.pos,\r\n\t\t\t\t\ttransform.size,\r\n\t\t\t\t\ttransform.rot,\r\n\t\t\t\t\tfalse\r\n\t\t\t\t);\r\n\r\n\t\t\t\tif (entity != undefined) {\r\n\t\t\t\t\ttransform.entity = entity;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tplaceObject(\r\n\t\ttype: string,\r\n\t\tposition: Vec3,\r\n\t\tsize: number,\r\n\t\trotation: Vec3,\r\n\t\tsaveToTransforms: boolean = true\r\n\t): Entity {\r\n\t\tlet placement = this.placements.get(type);\r\n\t\tif (placement == undefined) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t\r\n\t\tlet entity = this.ecsManager.createEntity();\r\n\t\tlet mesh = this.scene.getNewMesh(\r\n\t\t\tplacement.modelPath,\r\n\t\t\tplacement.diffuseTexturePath,\r\n\t\t\tplacement.specularTexturePath\r\n\t\t);\r\n\r\n\t\tlet graComp = new GraphicsComponent(mesh);\r\n\t\tthis.ecsManager.addComponent(entity, graComp);\r\n\t\tlet posComp = new PositionComponent();\r\n\t\tposComp.position.deepAssign(position);\r\n\t\tposComp.scale.deepAssign([size, size, size]);\r\n\t\tposComp.rotation.deepAssign(rotation);\r\n\t\tthis.ecsManager.addComponent(entity, posComp);\r\n\r\n\t\tif (saveToTransforms) {\r\n\t\t\tlet length = placement.transforms.push(new Transform(\r\n\t\t\t\tposition,\r\n\t\t\t\tsize,\r\n\t\t\t\trotation\r\n\t\t\t));\r\n\t\t\tplacement.transformAdded = true;\r\n\t\t\tthis.transformsAdded = true;\r\n\t\t\tplacement.transforms[length - 1].entity = entity;\r\n\r\n\t\t\tthis.currentlyEditingTransform = placement.transforms[length - 1];\r\n\t\t\tthis.currentlyEditingPlacement = placement;\r\n\t\t}\r\n\r\n\t\tif (placement.modelPath == \"Assets/objs/DeliveryZone.obj\") {\r\n\t\t\tlet zoneComp = new DeiliveryZoneComponent();\r\n\t\t\tthis.ecsManager.addComponent(entity, zoneComp);\r\n\t\t\tgraComp.object.baseColor = new Vector3([1, 0, 0]);\r\n\t\t\tthis.game.score += 1;\r\n\t\t}\r\n\r\n\t\tlet boundingBoxComp = new BoundingBoxComponent();\r\n\t\tboundingBoxComp.setup(mesh.graphicsObject);\r\n\t\tboundingBoxComp.updateTransformMatrix(mesh.modelMatrix);\r\n\t\tthis.ecsManager.addComponent(entity, boundingBoxComp);\r\n\r\n\t\tif (!placement.addCollision) {\r\n\t\t\treturn entity;\r\n\t\t}\r\n\r\n\t\t// Collision stuff\r\n\t\tlet collisionComp = new CollisionComponent();\r\n\t\tcollisionComp.isStatic = true;\r\n\t\tthis.ecsManager.addComponent(entity, collisionComp);\r\n\r\n\t\tlet octree = this.meshStore.getOctree(placement.modelPath, false);\r\n\t\tif (octree == undefined) {\r\n\t\t\treturn entity;\r\n\t\t}\r\n\t\tlet meshColComp = new MeshCollisionComponent(\r\n\t\t\toctree\r\n\t\t);\r\n\t\tmeshColComp.octree.setModelMatrix(mesh.modelMatrix);\r\n\t\tthis.ecsManager.addComponent(entity, meshColComp);\r\n\r\n\t\treturn entity;\r\n\t}\r\n\r\n\trayCastToSelectNewObject(ray: Ray) {\r\n\t\tlet closest = Infinity;\r\n\t\tfor (let placement of this.placements) {\r\n\t\t\tfor (let transform of placement[1].transforms) {\r\n\t\t\t\tlet bbComp = transform.entity.getComponent(ComponentTypeEnum.BOUNDINGBOX) as BoundingBoxComponent;\r\n\t\t\t\tif (bbComp == undefined) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbbComp.boundingBox.setUpdateNeeded();\r\n\r\n\t\t\t\tlet dist = IntersectionTester.doRayCast(ray, [bbComp.boundingBox], closest); // Ray cast against bounding box, only caring about hits closer than the previous closest\r\n\t\t\t\tif (dist > 0 && dist < closest) { // Boundingbox is closer than current closest hit\r\n\r\n\t\t\t\t\t// Ray cast against mesh if there is one, only caring about hits closer than the previous closest\r\n\t\t\t\t\tlet meshColComp = transform.entity.getComponent(ComponentTypeEnum.MESHCOLLISION) as MeshCollisionComponent;\r\n\t\t\t\t\tif (meshColComp != undefined) {\r\n\t\t\t\t\t\t// TODO: This is ugly but works\r\n\t\t\t\t\t\tmeshColComp.octree.setModelMatrix(bbComp.boundingBox.getTransformMatrix());\r\n\t\t\t\t\t\tmeshColComp.octree.setModelMatrix();\r\n\t\t\t\t\t\tlet shapeArray = new Array<Triangle>();\r\n\t\t\t\t\t\tmeshColComp.octree.getShapesForRayCast(ray, shapeArray, closest);\r\n\t\t\t\t\t\tdist = IntersectionTester.doRayCast(ray, shapeArray, closest);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (dist > 0 && dist < closest) { // Hit is still closer than current closest\r\n\t\t\t\t\t\t// Update the closest information and save the object for editing\r\n\t\t\t\t\t\tclosest = dist;\r\n\t\t\t\t\t\tthis.currentlyEditingPlacement = placement[1];\r\n\t\t\t\t\t\tthis.currentlyEditingTransform = transform;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tupdateCurrentlyEditingObject(rotationChange: number, scaleChange: number, newPosition?: Vec3) {\r\n\t\tif (this.currentlyEditingTransform != null) {\r\n\t\t\tthis.currentlyEditingTransform.rot.y += rotationChange;\r\n\t\t\tthis.currentlyEditingTransform.size += scaleChange;\r\n\t\t\tif (newPosition != undefined) {\r\n\t\t\t\tthis.currentlyEditingTransform.pos.deepAssign(newPosition);\r\n\t\t\t}\r\n\r\n\t\t\tlet currentlyEditingEntity = this.currentlyEditingTransform.entity;\r\n\r\n\t\t\tif (currentlyEditingEntity != null) {\r\n\t\t\t\tlet posComp = currentlyEditingEntity.getComponent(\r\n\t\t\t\t\tComponentTypeEnum.POSITION\r\n\t\t\t\t) as PositionComponent;\r\n\t\r\n\t\t\t\tposComp.rotation.deepAssign(this.currentlyEditingTransform.rot);\r\n\t\t\t\tposComp.scale.deepAssign([\r\n\t\t\t\t\tthis.currentlyEditingTransform.size,\r\n\t\t\t\t\tthis.currentlyEditingTransform.size,\r\n\t\t\t\t\tthis.currentlyEditingTransform.size,\r\n\t\t\t\t]);\r\n\t\t\t\tposComp.position.deepAssign(this.currentlyEditingTransform.pos);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.currentlyEditingPlacement != null) {\r\n\t\t\tthis.currentlyEditingPlacement.transformAdded = true;\r\n\t\t\tthis.transformsAdded = true;\r\n\t\t}\r\n\t}\r\n\r\n\tdownloadTransforms() {\r\n\t\tfor (let placement of this.placements) {\r\n\t\t\tif (!placement[1].transformAdded) {\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tlet transformsData = \"\";\r\n\r\n\t\t\tfor (let transform of placement[1].transforms) {\r\n\t\t\t\ttransformsData +=\r\n\t\t\t\t\ttransform.pos + \"|\" + transform.size + \"|\" + transform.rot + \"\\n\";\r\n\t\t\t}\r\n\r\n\t\t\tWebUtils.DownloadFile(placement[1].placementsPath, transformsData);\r\n\t\t\tplacement[1].transformAdded = false;\r\n\t\t}\r\n\r\n\t\tthis.transformsAdded = false;\r\n\t}\r\n\r\n\tonExit(e: BeforeUnloadEvent) {\r\n\t\tif (this.transformsAdded) {\r\n\t\t\tthis.downloadTransforms();\r\n\r\n\t\t\te.preventDefault();\r\n\t\t\te.returnValue = \"\";\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tdelete e[\"returnValue\"];\r\n\t}\r\n}\r\n","import BoundingBoxComponent from \"../Engine/ECS/Components/BoundingBoxComponent\";\r\nimport CollisionComponent from \"../Engine/ECS/Components/CollisionComponent\";\r\nimport MovementComponent from \"../Engine/ECS/Components/MovementComponent\";\r\nimport ParticleSpawnerComponent from \"../Engine/ECS/Components/ParticleSpawnerComponent\";\r\nimport PositionComponent from \"../Engine/ECS/Components/PositionComponent\";\r\nimport ECSManager from \"../Engine/ECS/ECSManager\";\r\nimport Vec2 from \"../Engine/Maths/Vec2\";\r\nimport Vec3 from \"../Engine/Maths/Vec3\";\r\nimport ParticleSpawner from \"../Engine/Objects/ParticleSpawner\";\r\nimport Rendering from \"../Engine/Rendering/Rendering\";\r\nimport Scene from \"../Engine/Rendering/Scene\";\r\nimport { input } from \"./GameMachine\";\r\nimport Newspaper from \"./Newspaper\";\r\nimport Game from \"./States/Game\";\r\n\r\nexport default class Player {\r\n\tprivate scene: Scene;\r\n\tprivate rendering: Rendering;\r\n\tprivate ecsManager: ECSManager;\r\n\r\n\tprivate positionComp: PositionComponent;\r\n\tprivate movComp: MovementComponent;\r\n\r\n\tprivate newspapers: Array<Newspaper>;\r\n\tprivate rotation: Vec3;\r\n\tprivate game: Game;\r\n\r\n\t//Projectile prediction\r\n\tprivate throwStrength: number;\r\n\tprivate throwPos: Vec3;\r\n\tprivate throwVel: Vec3;\r\n\tprivate throwCooldown: number;\r\n\tprivate throwTimer: number;\r\n\tprivate particleComp: ParticleSpawnerComponent;\r\n\tprivate particleSpawner: ParticleSpawner;\r\n\tprivate prepThrow: boolean;\r\n\tprivate throwRelease: boolean;\r\n\r\n\tconstructor(\r\n\t\tscene: Scene,\r\n\t\trendering: Rendering,\r\n\t\tecsManager: ECSManager,\r\n\t) {\r\n\t\tthis.scene = scene;\r\n\t\tthis.rendering = rendering;\r\n\t\tthis.ecsManager = ecsManager;\r\n\r\n\t\tthis.throwCooldown = 0.5;\r\n\t\tthis.throwTimer = 0.0;\r\n\t\tthis.newspapers = new Array<Newspaper>();\r\n\t\tthis.rotation = new Vec3();\r\n\r\n\t\tthis.throwStrength = 10.0;\r\n\t\tthis.throwPos = new Vec3();\r\n\t\tthis.throwVel = new Vec3();\r\n\r\n\t\tthis.game = Game.getInstanceNoSa()\r\n\r\n\t\tthis.prepThrow = false;\r\n\t}\r\n\r\n\tasync init() {\r\n\t\tlet entity = this.ecsManager.createEntity();\r\n\t\tthis.positionComp = new PositionComponent();\r\n\t\tlet boundingBoxComp = new BoundingBoxComponent();\r\n\t\tboundingBoxComp.boundingBox.setMinAndMaxVectors(\r\n\t\t\tnew Vec3([-0.5, 0.0, -0.5]),\r\n\t\t\tnew Vec3([0.5, 1.8, 0.5])\r\n\t\t);\r\n\t\tboundingBoxComp.updateTransformMatrix(this.positionComp.matrix);\r\n\t\tthis.movComp = new MovementComponent();\r\n\t\t// this.movComp.velocity.z = 3.0;\r\n\t\tthis.movComp.acceleration = 20.0;\r\n\t\tthis.movComp.drag = 10.0;\r\n\r\n\r\n\t\tthis.particleSpawner = this.scene.getNewParticleSpawner(\"Assets/textures/AimingBlob.png\");\r\n\t\tthis.particleSpawner.sizeChangePerSecond = 0.0;\r\n\t\tthis.particleComp = new ParticleSpawnerComponent(this.particleSpawner);\r\n\t\tthis.particleSpawner.setNumParticles(9);\r\n\r\n\t\tthis.ecsManager.addComponent(entity, this.positionComp);\r\n\t\tthis.ecsManager.addComponent(entity, boundingBoxComp);\r\n\t\tthis.ecsManager.addComponent(entity, this.movComp);\r\n\t\tthis.ecsManager.addComponent(entity, this.particleComp);\r\n\t\tthis.ecsManager.addComponent(entity, new CollisionComponent());\r\n\r\n\t\tthis.respawn();\r\n\t}\r\n\r\n\r\n\trespawn() {\r\n\t\tthis.positionComp.position.setValues(0.0, 0.0, 0.0);\r\n\t\tthis.movComp.velocity.setValues(0.0, 0.0, 0.0);\r\n\t\tthis.movComp.accelerationDirection.setValues(0.0, 0.0, 0.0);\r\n\t\tthis.game.rendering.camera.setDir(0.0, 0.0, 1.0);\r\n\t}\r\n\r\n\tgetPosition(): Vec3 {\r\n\t\treturn this.positionComp.position;\r\n\t}\r\n\r\n\tgetVelocity(): Vec3 {\r\n\t\treturn this.movComp.velocity;\r\n\t}\r\n\r\n\tthrowPaper() {\r\n\t\tif (this.throwTimer > this.throwCooldown) {\r\n\t\t\tthis.throwTimer = 0.0;\r\n\r\n\t\t\tthis.newspapers.push(\r\n\t\t\t\tnew Newspaper(\r\n\t\t\t\t\tthis.throwPos,\r\n\t\t\t\t\tthis.throwVel,\r\n\t\t\t\t\tnew Vec3([0.0, this.rotation.y, 0.0]),\r\n\t\t\t\t\tthis.ecsManager,\r\n\t\t\t\t\tthis.scene\r\n\t\t\t\t)\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tupdate(dt: number) {\r\n\t\tthis.throwTimer += dt;\r\n\r\n\t\tfor (let i = 0; i < this.newspapers.length; i++) {\r\n\t\t\tlet paper = this.newspapers[i];\r\n\t\t\t// Newspaper is not moving so remove from array\r\n\t\t\tif (!paper.update(dt)) {\r\n\t\t\t\tthis.game.newspapersStopped.push(this.newspapers[i]);\r\n\t\t\t\tthis.newspapers.splice(i, 1);\r\n\t\t\t\ti--;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Update camera\r\n\t\tthis.rendering.camera.setPosition(\r\n\t\t\tthis.positionComp.position.x,\r\n\t\t\tthis.positionComp.position.y + 1.7,\r\n\t\t\tthis.positionComp.position.z\r\n\t\t);\r\n\r\n\t\tlet rotVec: Vec2 = new Vec3([0.0, 0.0, 0.0]);\r\n\t\tlet rotate = false;\r\n\r\n\t\tlet mouseMovement = input.getMouseMovement();\r\n\t\tif (mouseMovement.length2() > 0.0) {\r\n\t\t\trotVec.setValues(-mouseMovement.y * 0.2, -mouseMovement.x * 0.2);\r\n\t\t\trotate = true;\r\n\t\t}\r\n\r\n\t\tif (input.keys[\"ARROWUP\"]) {\r\n\t\t\trotVec.x += 210 * dt;\r\n\t\t\trotate = true;\r\n\t\t}\r\n\r\n\t\tif (input.keys[\"ARROWDOWN\"]) {\r\n\t\t\trotVec.x -= 210 * dt;\r\n\t\t\trotate = true;\r\n\t\t}\r\n\r\n\t\tif (input.keys[\"ARROWLEFT\"]) {\r\n\t\t\trotVec.y += 210 * dt;\r\n\t\t\trotate = true;\r\n\t\t}\r\n\r\n\t\tif (input.keys[\"ARROWRIGHT\"]) {\r\n\t\t\trotVec.y -= 210 * dt;\r\n\t\t\trotate = true;\r\n\t\t}\r\n\r\n\t\t// Touch / joystick control\r\n\t\tinput.updateGamepad();\r\n\t\tif (input.joystickRightDirection.length2() > 0.01) {\r\n\t\t\trotVec = new Vec2([\r\n\t\t\t\tinput.joystickRightDirection.y,\r\n\t\t\t\tinput.joystickRightDirection.x,\r\n\t\t\t]).multiply(-210 * dt);\r\n\t\t\trotate = true;\r\n\t\t}\r\n\r\n\t\tthis.rotation.add(new Vec3([rotVec.x, rotVec.y, 0.0]).multiply(90.0 * dt));\r\n\r\n\t\tif (rotate) {\r\n\t\t\tlet rotMatrix = new Matrix4(null);\r\n\t\t\tlet rotAmount: number = 90.0;\r\n\t\t\tlet rightVec: Vec3 = new Vec3(this.rendering.camera.getRight());\r\n\t\t\tif (rotVec.y) {\r\n\t\t\t\trotMatrix.rotate(rotAmount * rotVec.y * dt, 0.0, 1.0, 0.0);\r\n\t\t\t}\r\n\t\t\tif (rotVec.x) {\r\n\t\t\t\trotMatrix.rotate(\r\n\t\t\t\t\trotAmount * rotVec.x * dt,\r\n\t\t\t\t\trightVec.x,\r\n\t\t\t\t\trightVec.y,\r\n\t\t\t\t\trightVec.z\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tlet oldDir = new Vector3(this.rendering.camera.getDir());\r\n\t\t\tlet newDir = rotMatrix.multiplyVector3(oldDir);\r\n\t\t\tthis.rendering.camera.setDir(\r\n\t\t\t\tnewDir.elements[0],\r\n\t\t\t\tMath.max(-0.65, Math.min(0.65, newDir.elements[1])),\r\n\t\t\t\tnewDir.elements[2]\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tlet accVec = new Vec3();\r\n\r\n\t\t// Movement input\r\n\t\tlet forward = new Vec3(this.rendering.camera.getDir());\r\n\t\tforward.y = 0.0;\r\n\t\tforward.normalize();\r\n\r\n\t\tlet right = new Vec3(this.rendering.camera.getRight());\r\n\t\tright.y = 0.0;\r\n\t\tright.normalize();\r\n\r\n\t\t// Touch / joystick control\r\n\t\tinput.updateGamepad();\r\n\t\tif (input.joystickLeftDirection.length2() > 0.001) {\r\n\t\t\taccVec.add(new Vec3(right).multiply(input.joystickLeftDirection.x * 2.0));\r\n\t\t\taccVec.subtract(\r\n\t\t\t\tnew Vec3(forward).multiply(input.joystickLeftDirection.y * 2.0)\r\n\t\t\t);\r\n\t\t}\r\n\t\t// Keyboard control\r\n\t\telse {\r\n\t\t\tif (input.keys[\"W\"]) {\r\n\t\t\t\taccVec.add(forward);\r\n\t\t\t}\r\n\r\n\t\t\tif (input.keys[\"S\"]) {\r\n\t\t\t\taccVec.subtract(forward);\r\n\t\t\t}\r\n\r\n\t\t\tif (input.keys[\"A\"]) {\r\n\t\t\t\taccVec.subtract(right);\r\n\t\t\t}\r\n\r\n\t\t\tif (input.keys[\"D\"]) {\r\n\t\t\t\taccVec.add(right);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (accVec.length2() > 1.0) {\r\n\t\t\taccVec.normalize();\r\n\t\t}\r\n\t\tthis.movComp.accelerationDirection.deepAssign(accVec);\r\n\r\n\t\t// Update throw data\r\n\t\tthis.throwPos = new Vec3(this.positionComp.position)\r\n\t\t\t.add(forward.multiply(1.0))\r\n\t\t\t.add([0.0, 1.4, 0.0]);\r\n\t\tthis.throwVel = new Vec3(this.rendering.camera.getDir())\r\n\t\t\t.normalize()\r\n\t\t\t.multiply(this.throwStrength)\r\n\t\t\t.add(this.movComp.velocity);\r\n\r\n\t\tthis.prepThrow = false;\r\n\t\tif (input.keys[\"E\"] || input.mouseClicked || input.buttons.get(\"B\")) {\r\n\t\t\tthis.prepThrow = true;\r\n\t\t}\r\n\r\n\t\tif (this.prepThrow) {\r\n\t\t\tfor (var i = 0; i < 9; ++i) {\r\n\t\t\t\tlet idt = i * 0.1;\r\n\t\t\t\tlet vel = new Vec3([\r\n\t\t\t\t\tthis.throwPos.x + new Vec3(this.throwVel).x * idt,\r\n\t\t\t\t\tthis.throwPos.y + new Vec3(this.throwVel).y * idt + 0.5 * -9.8 * idt * idt,\r\n\t\t\t\t\tthis.throwPos.z + new Vec3(this.throwVel).z * idt\r\n\t\t\t\t]);\r\n\t\t\t\tthis.particleSpawner.setParticleData(\r\n\t\t\t\t\ti,\r\n\t\t\t\t\tvel,\r\n\t\t\t\t\t0.1,\r\n\t\t\t\t\tnew Vec3([0, 0, 0]),\r\n\t\t\t\t\tnew Vec3([0, 0, 0]));\r\n\t\t\t}\r\n\t\t\tthis.throwRelease = true;\r\n\t\t} else {\r\n\t\t\tfor (var i = 0; i < 9; ++i) {\r\n\t\t\t\tthis.particleSpawner.setParticleData(\r\n\t\t\t\t\ti,\r\n\t\t\t\t\tnew Vec3([-10, -10, -10]),\r\n\t\t\t\t\t0.1,\r\n\t\t\t\t\tnew Vec3([0, 0, 0]),\r\n\t\t\t\t\tnew Vec3([0, 0, 0]));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.throwRelease && !this.prepThrow) {\r\n\t\t\tthis.throwPaper();\r\n\t\t\tthis.throwRelease = false;\r\n\t\t}\r\n\r\n\t\t// Jumping\r\n\t\tif (input.keys[\" \"] || input.buttons.get(\"A\")) {\r\n\t\t\tthis.movComp.jumpRequested = true;\r\n\t\t} else {\r\n\t\t\tthis.movComp.jumpRequested = false;\r\n\t\t}\r\n\r\n\t\t// Update drag based on velocity\r\n\t\tlet xzVelocity = new Vec3(this.movComp.velocity);\r\n\t\txzVelocity.y = 0.0;\r\n\t\tthis.movComp.drag = 10.0 + xzVelocity.len();\r\n\t}\r\n}\r\n","import Button from \"../../Engine/GUI/Button\";\r\nimport State, { StatesEnum } from \"../../Engine/State\";\r\nimport { input, StateAccessible } from \"../GameMachine\";\r\nimport { OverlayRendering } from \"../../Engine/Rendering/OverlayRendering\";\r\n\r\nexport default class ControlsMenu extends State {\r\n\tprivate overlayRendering: OverlayRendering;\r\n\r\n\tprivate backButton: Button;\r\n\r\n\tconstructor(sa: StateAccessible) {\r\n\t\tsuper();\r\n\t\tthis.overlayRendering = new OverlayRendering();\r\n\r\n\t\tthis.backButton = this.overlayRendering.getNewButton();\r\n\t\tthis.backButton.position.x = 0.5;\r\n\t\tthis.backButton.position.y = 0.1;\r\n\t\tthis.backButton.center = true;\r\n\t\tthis.backButton.textSize = 30;\r\n\t\tthis.backButton.textString = \"Back\";\r\n\r\n\t\tlet self = this;\r\n\t\tthis.backButton.onClick(function () {\r\n\t\t\tself.gotoState = StatesEnum.OPTIONS;\r\n\t\t});\r\n\t}\r\n\r\n\tasync init() {\r\n\t\tsuper.init();\r\n\t\tthis.overlayRendering.show();\r\n\t\tinput.touchUsed = true;\r\n\t\tinput.simulateTouchBasedOnMouse = true;\r\n\t\tinput.repositionTouchControls = true;\r\n\t}\r\n\r\n\treset() {\r\n\t\tsuper.reset();\r\n\t\tthis.overlayRendering.hide();\r\n\t\tinput.touchUsed = false;\r\n\t\tinput.simulateTouchBasedOnMouse = false;\r\n\t\tinput.repositionTouchControls = false;\r\n\t\tinput.drawTouchControls();\r\n\t}\r\n\r\n\tupdate(dt: number) {}\r\n\r\n\tdraw() {\r\n\t\tthis.overlayRendering.draw();\r\n\t\tinput.drawTouchControls();\r\n\t}\r\n}\r\n","import Button from \"../../Engine/GUI/Button\";\r\nimport TextObject2D from \"../../Engine/GUI/Text/TextObject2D\";\r\nimport { OverlayRendering } from \"../../Engine/Rendering/OverlayRendering\";\r\nimport { StateAccessible } from \"../GameMachine\";\r\nimport Game from \"./Game\";\r\n\r\nexport default class DebugMenu {\r\n\tprivate overlay: OverlayRendering;\r\n\tprivate stateAccessible: StateAccessible;\r\n\tprivate game: Game;\r\n\r\n\tprivate downloadOctreesButton: Button;\r\n\tprivate downloadTransformsButton: Button;\r\n\r\n\tplacementMenuText: TextObject2D;\r\n\tactionText: TextObject2D;\r\n\r\n\tconstructor(stateAccessible: StateAccessible, game: Game) {\r\n\t\tthis.overlay = new OverlayRendering();\r\n\t\tthis.stateAccessible = stateAccessible;\r\n\t\tthis.game = game;\r\n\r\n\t\tthis.downloadOctreesButton = this.overlay.getNewButton();\r\n\t\tthis.downloadOctreesButton.position.x = 0.8;\r\n\t\tthis.downloadOctreesButton.position.y = 0.1;\r\n\t\tthis.downloadOctreesButton.center = true;\r\n\t\tthis.downloadOctreesButton.textSize = 40;\r\n\t\tthis.downloadOctreesButton.getInputElement().style.backgroundColor =\r\n\t\t\t\"purple\";\r\n\t\tthis.downloadOctreesButton.getInputElement().style.color = \"white\";\r\n\t\tthis.downloadOctreesButton.getInputElement().style.borderRadius = \"4px\";\r\n\t\tthis.downloadOctreesButton.getInputElement().style.padding = \"10px\";\r\n\t\tthis.downloadOctreesButton.textString = \"Download \\nOctrees\";\r\n\r\n\t\tlet self = this;\r\n\t\tthis.downloadOctreesButton.onClick(function () {\r\n\t\t\tself.stateAccessible.meshStore.downloadOctrees();\r\n\t\t});\r\n\r\n\t\tthis.downloadTransformsButton = this.overlay.getNewButton();\r\n\t\tthis.downloadTransformsButton.position.x = 0.6;\r\n\t\tthis.downloadTransformsButton.position.y = 0.1;\r\n\t\tthis.downloadTransformsButton.center = true;\r\n\t\tthis.downloadTransformsButton.textSize = 40;\r\n\t\tthis.downloadTransformsButton.getInputElement().style.backgroundColor =\r\n\t\t\t\"purple\";\r\n\t\tthis.downloadTransformsButton.getInputElement().style.color = \"white\";\r\n\t\tthis.downloadTransformsButton.getInputElement().style.borderRadius = \"4px\";\r\n\t\tthis.downloadTransformsButton.getInputElement().style.padding = \"10px\";\r\n\t\tthis.downloadTransformsButton.textString = \"Download \\nTransforms\";\r\n\r\n\t\tthis.downloadTransformsButton.onClick(function () {\r\n\t\t\tself.game.objectPlacer.downloadTransforms();\r\n\t\t});\r\n\r\n\t\tthis.placementMenuText = this.overlay.getNew2DText();\r\n\t\tthis.placementMenuText.position.x = 0.05;\r\n\t\tthis.placementMenuText.position.y = 0.01;\r\n\t\tthis.placementMenuText.size = 20;\r\n\t\tthis.placementMenuText.getElement().style.color = \"white\";\r\n\t\tthis.placementMenuText.getElement().style.textShadow =\r\n\t\t\t\"-1px 0 black, 0 1px black, 1px 0 black, 0 -1px black\";\r\n\r\n\t\tthis.actionText = this.overlay.getNew2DText();\r\n\t\tthis.actionText.position.x = 0.2;\r\n\t\tthis.actionText.position.y = 0.01;\r\n\t\tthis.actionText.size = 20;\r\n\t\tthis.actionText.getElement().style.color = \"white\";\r\n\t\tthis.actionText.getElement().style.textShadow =\r\n\t\t\t\"-1px 0 black, 0 1px black, 1px 0 black, 0 -1px black\";\r\n\t}\r\n\r\n\tasync init() {\r\n\t\tthis.overlay.show();\r\n\t}\r\n\r\n\treset() {\r\n\t\tthis.overlay.hide();\r\n\t}\r\n\r\n\tdraw() {\r\n\t\tthis.overlay.draw();\r\n\t}\r\n}\r\n","import State, { StatesEnum } from \"../../Engine/State\";\r\nimport { input, options, StateAccessible } from \"../GameMachine\";\r\nimport Game from \"./Game\";\r\nimport Vec2 from \"../../Engine/Maths/Vec2\";\r\nimport Vec3 from \"../../Engine/Maths/Vec3\";\r\nimport { MousePicking } from \"../../Engine/Maths/MousePicking\";\r\nimport DebugMenu from \"./DebugMenu\";\r\nimport { WebUtils } from \"../../Engine/Utils/WebUtils\";\r\n\r\nexport default class DebugMode extends State {\r\n\tprivate game: Game;\r\n\tprivate stateAccessible: StateAccessible;\r\n\tprivate debugMenu: DebugMenu;\r\n\tprivate mouseWasPressed: boolean;\r\n\tprivate currentlyPlacing: number;\r\n\tprivate placementOptions: Array<string>;\r\n\tprivate lastMousePos: Vec2;\r\n\r\n\tconstructor(sa: StateAccessible, game: Game) {\r\n\t\tsuper();\r\n\t\tthis.stateAccessible = sa;\r\n\t\tthis.game = game;\r\n\t\tthis.debugMenu = new DebugMenu(this.stateAccessible, this.game);\r\n\t\tthis.currentlyPlacing = 0;\r\n\t\tthis.placementOptions = [\r\n\t\t\t\"Assets/objs/mailbox.obj\",\r\n\t\t\t\"Assets/objs/house.obj\",\r\n\t\t\t\"Assets/objs/fence.obj\",\r\n\t\t\t\"Assets/objs/BigBuske.obj\",\r\n\t\t\t\"Assets/objs/SmolBuske.obj\",\r\n\t\t\t\"Assets/objs/DeliveryZone.obj\",\r\n\t\t\t\"Assets/objs/tree_1.obj\",\r\n\t\t\t\"Assets/objs/tree_2.obj\",\r\n\t\t\t\"Assets/objs/tree_3.obj\",\r\n\t\t];\r\n\r\n\t\tlet textString = \"\";\r\n\t\tfor (let i = 0; i < this.placementOptions.length; i++) {\r\n\t\t\ttextString += (i + 1) + \": \" + this.placementOptions[i].split(\"/\")[2] + \" \\r\\n\";\r\n\t\t}\r\n\t\tthis.debugMenu.placementMenuText.textString = textString;\r\n\r\n\t\tthis.lastMousePos = new Vec2([\r\n\t\t\tinput.mousePosition.x,\r\n\t\t\tinput.mousePosition.y,\r\n\t\t]);\r\n\r\n\t\tthis.mouseWasPressed = false;\r\n\t}\r\n\r\n\tasync init() {\r\n\t\tsuper.init();\r\n\t\tthis.debugMenu.init();\r\n\t\tlet posCookie = WebUtils.GetCookie(\"debugPos\");\r\n\t\tif (posCookie != \"\") {\r\n\t\t\tlet coords = posCookie.split(\",\");\r\n\t\t\tif (coords.length == 3) {\r\n\t\t\t\tthis.game.rendering.camera.setPosition(parseFloat(coords[0]), parseFloat(coords[1]), parseFloat(coords[2]));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet dirCookie = WebUtils.GetCookie(\"debugDir\");\r\n\t\tif (dirCookie != \"\") {\r\n\t\t\tlet coords = dirCookie.split(\",\");\r\n\t\t\tif (coords.length == 3) {\r\n\t\t\t\tthis.game.rendering.camera.setDir(parseFloat(coords[0]), parseFloat(coords[1]), parseFloat(coords[2]));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treset() {\r\n\t\tsuper.reset();\r\n\t\tthis.debugMenu.reset();\r\n\t}\r\n\r\n\tupdate(dt: number) {\r\n\t\tif (input.keys[\"P\"]) {\r\n\t\t\tthis.gotoState = StatesEnum.MAINMENU;\r\n\t\t}\r\n\r\n\t\tlet moveVec: Vec3 = new Vec3();\r\n\t\tlet move = false;\r\n\t\tif (input.keys[\"W\"]) {\r\n\t\t\tmoveVec.add(this.game.rendering.camera.getDir());\r\n\t\t\tmove = true;\r\n\t\t}\r\n\r\n\t\tif (input.keys[\"S\"]) {\r\n\t\t\tmoveVec.subtract(this.game.rendering.camera.getDir());\r\n\t\t\tmove = true;\r\n\t\t}\r\n\r\n\t\tif (input.keys[\"A\"]) {\r\n\t\t\tmoveVec.subtract(this.game.rendering.camera.getRight());\r\n\t\t\tmove = true;\r\n\t\t}\r\n\r\n\t\tif (input.keys[\"D\"]) {\r\n\t\t\tmoveVec.add(this.game.rendering.camera.getRight());\r\n\t\t\tmove = true;\r\n\t\t}\r\n\r\n\t\tif (input.keys[\" \"]) {\r\n\t\t\tmoveVec.add(new Vec3([0.0, 1.0, 0.0]));\r\n\t\t\tmove = true;\r\n\t\t}\r\n\r\n\t\tif (input.keys[\"SHIFT\"]) {\r\n\t\t\tmoveVec.subtract(new Vec3([0.0, 1.0, 0.0]));\r\n\t\t\tmove = true;\r\n\t\t}\r\n\r\n\t\tif (move) {\r\n\t\t\tmoveVec.normalize();\r\n\t\t\tmoveVec.multiply(15.0 * dt); // Speed\r\n\r\n\t\t\tthis.game.rendering.camera.translate(moveVec.x, moveVec.y, moveVec.z);\r\n\t\t}\r\n\r\n\t\tlet rotVec: Vec2 = new Vec2([0.0, 0.0]);\r\n\t\tlet rotate = false;\r\n\r\n\t\t// if (!input.keys[\"O\"] && (input.mousePosition.x != input.mousePosition.previousX || input.mousePosition.y != input.mousePosition.previousY)) {\r\n\t\t// \trotVec.setValues(\r\n\t\t// \t\t(input.mousePosition.previousY - input.mousePosition.y) * 0.2,\r\n\t\t// \t\t(input.mousePosition.previousX - input.mousePosition.x) * 0.2\r\n\t\t// \t);\r\n\r\n\t\t// \trotate = true;\r\n\r\n\t\t// }\r\n\r\n\t\tif (input.keys[\"ARROWUP\"]) {\r\n\t\t\trotVec.x += 210 * dt;\r\n\t\t\trotate = true;\r\n\t\t}\r\n\r\n\t\tif (input.keys[\"ARROWDOWN\"]) {\r\n\t\t\trotVec.x -= 210 * dt;\r\n\t\t\trotate = true;\r\n\t\t}\r\n\r\n\t\tif (input.keys[\"ARROWLEFT\"]) {\r\n\t\t\trotVec.y += 210 * dt;\r\n\t\t\trotate = true;\r\n\t\t}\r\n\r\n\t\tif (input.keys[\"ARROWRIGHT\"]) {\r\n\t\t\trotVec.y -= 210 * dt;\r\n\t\t\trotate = true;\r\n\t\t}\r\n\r\n\t\tif (rotate) {\r\n\t\t\tlet rotMatrix = new Matrix4(null);\r\n\t\t\tlet rotAmount: number = 90.0;\r\n\t\t\tlet rightVec: Vec3 = new Vec3(this.game.rendering.camera.getRight());\r\n\t\t\tif (rotVec.y) {\r\n\t\t\t\trotMatrix.rotate(rotAmount * rotVec.y * dt, 0.0, 1.0, 0.0);\r\n\t\t\t}\r\n\t\t\tif (rotVec.x) {\r\n\t\t\t\trotMatrix.rotate(\r\n\t\t\t\t\trotAmount * rotVec.x * dt,\r\n\t\t\t\t\trightVec.x,\r\n\t\t\t\t\trightVec.y,\r\n\t\t\t\t\trightVec.z\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tlet oldDir = new Vector3(this.game.rendering.camera.getDir());\r\n\t\t\tlet newDir = rotMatrix.multiplyVector3(oldDir);\r\n\t\t\tthis.game.rendering.camera.setDir(\r\n\t\t\t\tnewDir.elements[0],\r\n\t\t\t\tnewDir.elements[1],\r\n\t\t\t\tnewDir.elements[2]\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tthis.currentlyPlacing = -1;\r\n\t\tfor (let i = 1; i < this.placementOptions.length + 1; i++) {\r\n\t\t\tif (input.keys[i]) {\r\n\t\t\t\tthis.currentlyPlacing = i - 1;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (input.mouseClicked) {\r\n\t\t\t// Holding mousebutton\r\n\t\t\tlet rotChange = 0.0;\r\n\t\t\tlet newPosition = null;\r\n\t\t\tlet scaleChange = 0.0;\r\n\t\t\tlet edited = false;\r\n\t\t\tif (input.keys[\"R\"]) {\r\n\t\t\t\trotChange = input.mousePosition.x - this.lastMousePos.x;\r\n\t\t\t\tedited = true;\r\n\t\t\t\tthis.debugMenu.actionText.textString = \"Rotating\";\r\n\t\t\t}\r\n\t\t\tif (input.keys[\"T\"]) {\r\n\t\t\t\tlet ray = MousePicking.GetRay(this.game.rendering.camera);\r\n\t\t\t\tlet dist = this.game.doRayCast(ray);\r\n\r\n\t\t\t\tif (dist >= 0.0) {\r\n\t\t\t\t\tnewPosition = new Vec3(this.game.rendering.camera.getPosition()).add(\r\n\t\t\t\t\t\tnew Vec3(ray.getDir()).multiply(dist));\r\n\t\t\t\t\tedited = true;\r\n\t\t\t\t}\r\n\t\t\t\tthis.debugMenu.actionText.textString = \"Moving\";\r\n\t\t\t}\r\n\t\t\tif (input.keys[\"Y\"]) {\r\n\t\t\t\tscaleChange =\r\n\t\t\t\t(this.lastMousePos.y - input.mousePosition.y) * 0.001;\r\n\t\t\t\tedited = true;\r\n\t\t\t\tthis.debugMenu.actionText.textString = \"Scaling\";\r\n\t\t\t}\r\n\r\n\t\t\tif (edited) {\r\n\t\t\t\tthis.game.objectPlacer.updateCurrentlyEditingObject(\r\n\t\t\t\t\trotChange,\r\n\t\t\t\t\tscaleChange,\r\n\t\t\t\t\tnewPosition\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\telse if (!this.mouseWasPressed) { // If we clicked the mouse button this frame\r\n\t\t\t\tlet ray = MousePicking.GetRay(this.game.rendering.camera);\r\n\t\t\t\tif (this.currentlyPlacing >= 0) {\r\n\t\t\t\t\t// Place a new object\r\n\t\t\t\t\tlet dist = this.game.doRayCast(ray);\r\n\r\n\t\t\t\t\tif (dist >= 0.0) {\r\n\t\t\t\t\t\tthis.game.objectPlacer.placeObject(\r\n\t\t\t\t\t\t\tthis.placementOptions[this.currentlyPlacing],\r\n\t\t\t\t\t\t\tnew Vec3(this.game.rendering.camera.getPosition()).add(\r\n\t\t\t\t\t\t\t\tnew Vec3(ray.getDir()).multiply(dist)\r\n\t\t\t\t\t\t\t),\r\n\t\t\t\t\t\t\t1.0,\r\n\t\t\t\t\t\t\tnew Vec3([0.0, 0.0, 0.0])\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.debugMenu.actionText.textString = \"Placing new\";\r\n\t\t\t\t}\r\n\t\t\t\telse { // Try to select a new object to edit\r\n\t\t\t\t\tthis.game.objectPlacer.rayCastToSelectNewObject(ray);\r\n\t\t\t\t\tthis.debugMenu.actionText.textString = \"Picking\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.mouseWasPressed = true;\r\n\t\t} else {\r\n\t\t\tthis.mouseWasPressed = false;\r\n\t\t}\r\n\r\n\t\tthis.lastMousePos.deepAssign([\r\n\t\t\tinput.mousePosition.x,\r\n\t\t\tinput.mousePosition.y,\r\n\t\t]);\r\n\t\tthis.game.ecsManager.update(0.0);\r\n\r\n\t\tlet camPos = this.game.rendering.camera.getPosition();\r\n\t\tWebUtils.SetCookie(\"debugPos\", camPos.x + \",\" + camPos.y + \",\" + camPos.z);\r\n\t\tlet camDir = this.game.rendering.camera.getDir();\r\n\t\tWebUtils.SetCookie(\"debugDir\", camDir.x + \",\" + camDir.y + \",\" + camDir.z);\r\n\r\n\t\tthis.game.grassHandler.update(dt);\r\n\t}\r\n\r\n\tprepareDraw(dt: number): void {}\r\n\r\n\tdraw() {\r\n\t\tthis.game.rendering.draw();\r\n\t\tthis.debugMenu.draw();\r\n\t\tinput.drawTouchControls();\r\n\t}\r\n}\r\n","import TextObject2D from \"../../Engine/GUI/Text/TextObject2D\";\r\nimport { OverlayRendering } from \"../../Engine/Rendering/OverlayRendering\";\r\nimport State, { StatesEnum } from \"../../Engine/State\";\r\nimport { StateAccessible } from \"../GameMachine\";\r\nimport Game from \"./Game\";\r\n\r\nexport default class EndScreen extends State {\r\n\tprivate game: Game;\r\n\tprivate overlayRendering: OverlayRendering;\r\n\tprivate endText: TextObject2D;\r\n\tprivate scoreText: TextObject2D;\r\n\tprivate scoreTextNumber: TextObject2D;\r\n\r\n\tconstructor(sa: StateAccessible) {\r\n\t\tsuper();\r\n\t\tthis.overlayRendering = new OverlayRendering();\r\n\t\tthis.endText = this.overlayRendering.getNew2DText();\r\n\t\tthis.endText.position.x = 0.5;\r\n\t\tthis.endText.position.y = 0.2;\r\n\t\tthis.endText.center = true;\r\n\t\tthis.endText.textString = \"Game End!\";\r\n\t\tthis.endText.getElement().style.borderColor = \"white\";\r\n\r\n\t\tthis.scoreText = this.overlayRendering.getNew2DText();\r\n\t\tthis.scoreText.position.x = 0.5;\r\n\t\tthis.scoreText.position.y = 0.3;\r\n\t\tthis.scoreText.center = true;\r\n\t\tthis.scoreText.textString = \"Completion time:\";\r\n\r\n\t\tthis.scoreTextNumber = this.overlayRendering.getNew2DText();\r\n\t\tthis.scoreTextNumber.position.x = 0.5;\r\n\t\tthis.scoreTextNumber.position.y = 0.35;\r\n\t\tthis.scoreTextNumber.center = true;\r\n\t\tthis.scoreTextNumber.textString = \"0\";\r\n\r\n\t\tlet restartButton = this.overlayRendering.getNewButton();\r\n\t\trestartButton.position.x = 0.5;\r\n\t\trestartButton.position.y = 0.45;\r\n\t\trestartButton.center = true;\r\n\t\trestartButton.textString = \"Restart\";\r\n\r\n\t\trestartButton.onClick(function () {\r\n\t\t\tthis.gotoState = StatesEnum.GAME;\r\n\t\t\tsa.restartGame = true;\r\n\t\t}.bind(this));\r\n\t}\r\n\r\n\tasync init() {\r\n\t\tsuper.init();\r\n\t\tthis.overlayRendering.show();\r\n\t\tthis.game = Game.getInstanceNoSa();\r\n\t}\r\n\r\n\treset() {\r\n\t\tsuper.reset();\r\n\t\tthis.overlayRendering.hide();\r\n\t}\r\n\r\n\tupdate(dt: number) {}\r\n\r\n\tdraw() {\r\n\t\tthis.overlayRendering.draw();\r\n\t\tthis.scoreTextNumber.textString = Math.floor(this.game.gameTimer).toString();\r\n\t}\r\n}\r\n","import ECSManager from \"../../Engine/ECS/ECSManager\";\r\nimport GraphicsComponent from \"../../Engine/ECS/Components/GraphicsComponent\";\r\nimport PositionComponent from \"../../Engine/ECS/Components/PositionComponent\";\r\nimport CollisionComponent from \"../../Engine/ECS/Components/CollisionComponent\";\r\nimport BoundingBoxComponent from \"../../Engine/ECS/Components/BoundingBoxComponent\";\r\nimport State, { StatesEnum } from \"../../Engine/State\";\r\nimport Rendering from \"../../Engine/Rendering/Rendering\";\r\nimport { input, options, StateAccessible } from \"../GameMachine\";\r\nimport Player from \"../Player\";\r\nimport Button from \"../../Engine/GUI/Button\";\r\nimport MeshCollisionComponent from \"../../Engine/ECS/Components/MeshCollisionComponent\";\r\nimport GraphicsBundle from \"../../Engine/Objects/GraphicsBundle\";\r\nimport Heightmap from \"../../Engine/Objects/Heightmap\";\r\nimport { IntersectionTester } from \"../../Engine/Physics/IntersectionTester\";\r\nimport Ray from \"../../Engine/Physics/Shapes/Ray\";\r\nimport Triangle from \"../../Engine/Physics/Shapes/Triangle\";\r\nimport { OverlayRendering } from \"../../Engine/Rendering/OverlayRendering\";\r\nimport { gl } from \"../../main\";\r\nimport Scene from \"../../Engine/Rendering/Scene\";\r\nimport GrassHandler from \"../GrassHandler\";\r\nimport ObjectPlacer from \"../ObjectPlacer\";\r\nimport TextObject2D from \"../../Engine/GUI/Text/TextObject2D\";\r\nimport Newspaper from \"../Newspaper\";\r\nimport { WebUtils } from \"../../Engine/Utils/WebUtils\";\r\n\r\nexport default class Game extends State {\r\n\trendering: Rendering;\r\n\tecsManager: ECSManager;\r\n\tprivate stateAccessible: StateAccessible;\r\n\r\n\tprivate overlayRendering: OverlayRendering;\r\n\tprivate menuButton: Button;\r\n\tprivate scoreText: TextObject2D;\r\n\tprivate gameTimeText: TextObject2D;\r\n\tprivate player: Player;\r\n\tprivate mapBundle: GraphicsBundle;\r\n\tgrassHandler: GrassHandler;\r\n\tgameTimer: number;\r\n\r\n\tscore: number;\r\n\tnewspapersStopped: Array<Newspaper>;\r\n\tobjectPlacer: ObjectPlacer;\r\n\r\n\tprivate scene: Scene;\r\n\tprivate static instance: Game;\r\n\r\n\tpublic static getInstance(sa: StateAccessible): Game {\r\n\t\tif (!Game.instance) {\r\n\t\t\tGame.instance = new Game(sa);\r\n\t\t}\r\n\t\treturn Game.instance;\r\n\t}\r\n\r\n\tpublic static getInstanceNoSa(): Game {\r\n\t\treturn Game.instance;\r\n\t}\r\n\r\n\tprivate constructor(sa: StateAccessible) {\r\n\t\tsuper();\r\n\t\tthis.stateAccessible = sa;\r\n\t\tthis.objectPlacer = new ObjectPlacer(this.stateAccessible.meshStore);\r\n\t\tthis.newspapersStopped = new Array<Newspaper>();\r\n\t\tthis.score = 0;\r\n\t}\r\n\r\n\tasync load() {\r\n\t\tthis.scene = new Scene(\r\n\t\t\tthis.stateAccessible.textureStore,\r\n\t\t\tthis.stateAccessible.meshStore\r\n\t\t);\r\n\t\tthis.rendering = new Rendering(\r\n\t\t\tthis.stateAccessible.textureStore,\r\n\t\t\tthis.scene\r\n\t\t);\r\n\t\tthis.ecsManager = new ECSManager(this.rendering);\r\n\t\tthis.overlayRendering = new OverlayRendering(this.rendering.camera);\r\n\r\n\t\tthis.createMapEntity();\r\n\t\tthis.createSurroundingArea();\r\n\r\n\t\tlet dirLight = this.scene.getDirectionalLight();\r\n\t\tdirLight.ambientMultiplier = 0.5;\r\n\t\tdirLight.direction.setValues(0.05, -0.4, -0.7);\r\n\t\tdirLight.colour.setValues(0.3, 0.25, 0.2);\r\n\r\n\t\tthis.player = new Player(\r\n\t\t\tthis.scene,\r\n\t\t\tthis.rendering,\r\n\t\t\tthis.ecsManager,\r\n\t\t);\r\n\r\n\t\tthis.grassHandler = new GrassHandler(\r\n\t\t\tthis.scene,\r\n\t\t\tthis.mapBundle,\r\n\t\t\tthis.player\r\n\t\t);\r\n\r\n\t\tthis.gameTimer = 0.0;\r\n\t\tthis.score = 0;\r\n\r\n\t\tthis.menuButton = this.overlayRendering.getNewButton();\r\n\t\tthis.menuButton.position.x = 0.9;\r\n\t\tthis.menuButton.position.y = 0.0;\r\n\t\tthis.menuButton.textSize = 40;\r\n\t\tthis.menuButton.getInputElement().style.backgroundColor = \"transparent\";\r\n\t\tthis.menuButton.getInputElement().style.borderColor = \"transparent\";\r\n\t\tthis.menuButton.getInputElement().style.color = \"white\";\r\n\t\tthis.menuButton.getInputElement().style.textShadow =\r\n\t\t\t\"-1px 0 black, 0 1px black, 1px 0 black, 0 -1px black\";\r\n\t\tthis.menuButton.textString = \"Menu\";\r\n\r\n\t\tthis.scoreText = this.overlayRendering.getNew2DText();\r\n\t\tthis.scoreText.position.x = 0.05;\r\n\t\tthis.scoreText.position.y = 0.1;\r\n\t\tthis.scoreText.textString = \"0\";\r\n\t\tthis.scoreText.getElement().style.color = \"white\";\r\n\t\tthis.scoreText.getElement().style.textShadow =\r\n\t\t\t\"-1px 0 black, 0 1px black, 1px 0 black, 0 -1px black\";\r\n\r\n\t\tthis.gameTimeText = this.overlayRendering.getNew2DText();\r\n\t\tthis.gameTimeText.position.x = 0.05;\r\n\t\tthis.gameTimeText.position.y = 0.05;\r\n\t\tthis.gameTimeText.textString = \"0\";\r\n\t\tthis.gameTimeText.getElement().style.color = \"white\";\r\n\t\tthis.gameTimeText.getElement().style.textShadow =\r\n\t\t\t\"-1px 0 black, 0 1px black, 1px 0 black, 0 -1px black\";\r\n\r\n\t\tlet self = this;\r\n\t\tthis.menuButton.onClick(function () {\r\n\t\t\tself.gotoState = StatesEnum.MAINMENU;\r\n\t\t});\r\n\r\n\t\tthis.rendering.setSkybox(\"Assets/textures/skyboxes/LordKitty\");\r\n\r\n\t\tawait this.objectPlacer.load(this.scene, this.ecsManager);\r\n\r\n\t\tawait this.player.init();\r\n\t}\r\n\r\n\tasync init() {\r\n\t\tsuper.init();\r\n\t\tif (this.stateAccessible.restartGame) {\r\n\t\t\tif (this.menuButton) {\r\n\t\t\t\tthis.menuButton.remove();\r\n\t\t\t}\r\n\t\t\tawait this.load();\r\n\t\t\tthis.stateAccessible.restartGame = false;\r\n\t\t}\r\n\r\n\t\tthis.overlayRendering.show();\r\n\t\tthis.rendering.useCrt = options.useCrt;\r\n\t\tthis.rendering.useBloom = options.useBloom;\r\n\t\tif (WebUtils.GetCookie(\"debug\") == \"true\") {\r\n\t\t\tthis.gotoState = StatesEnum.DEBUGMODE;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tdocument.getElementById(\"gameDiv\").requestPointerLock();\r\n\t\t}\r\n\t}\r\n\r\n\treset() {\r\n\t\tsuper.reset();\r\n\t\tif (this.overlayRendering) {\r\n\t\t\tthis.overlayRendering.hide();\r\n\t\t}\r\n\t\tgl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n\t\tgl.clear(gl.COLOR_BUFFER_BIT);\r\n\t\tinput.touchUsed = false;\r\n\t\tinput.drawTouchControls();\r\n\t}\r\n\r\n\tonExit(e: BeforeUnloadEvent) {\r\n\t\tthis.objectPlacer.onExit(e);\r\n\t}\r\n\r\n\tcreateMapEntity() {\r\n\t\tlet texturePath = \"Assets/heightmaps/heightmap.png\";\r\n\t\tlet texturePathColour = \"Assets/textures/HeightmapTexture.png\";\r\n\t\tlet texturePathSpec = \"Assets/textures/HeightmapTexture.png\";\r\n\t\tlet entity = this.ecsManager.createEntity();\r\n\t\tthis.mapBundle = this.scene.getNewHeightMap(\r\n\t\t\ttexturePath,\r\n\t\t\ttexturePathColour,\r\n\t\t\ttexturePathSpec\r\n\t\t);\r\n\r\n\t\tlet heightmap = this.mapBundle.graphicsObject as Heightmap;\r\n\t\tlet vertices = heightmap.getVertices();\r\n\r\n\t\tfor (let i = 0; i < heightmap.xResolution * heightmap.zResolution; i++) {\r\n\t\t\tif (vertices[i * 8 + 4] > 0.999999999 && vertices[i * 8 + 1] > 0.001) {\r\n\t\t\t\t// Normal is pointing upwards and height is not 0 (ditches)\r\n\t\t\t\t// Set uvs to be tarmac\r\n\t\t\t\tvertices[i * 8 + 6] = 0.75;\r\n\t\t\t} else {\r\n\t\t\t\t// Set uvs to be grass\r\n\t\t\t\tvertices[i * 8 + 6] = 0.25;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\theightmap.setVertexData(vertices);\r\n\r\n\t\tthis.ecsManager.addComponent(entity, new GraphicsComponent(this.mapBundle));\r\n\t\tlet posComp = new PositionComponent();\r\n\t\tposComp.position.setValues(-10.0, -4.0, -10.0);\r\n\t\tposComp.scale.setValues(0.5, 2.0, 0.5);\r\n\t\tthis.ecsManager.addComponent(entity, posComp);\r\n\r\n\t\t// Collision stuff\r\n\t\tlet boundingBoxComp = new BoundingBoxComponent();\r\n\t\tboundingBoxComp.setup(this.mapBundle.graphicsObject);\r\n\t\tboundingBoxComp.updateTransformMatrix(this.mapBundle.modelMatrix);\r\n\t\tthis.ecsManager.addComponent(entity, boundingBoxComp);\r\n\t\tlet collisionComp = new CollisionComponent();\r\n\t\tcollisionComp.isStatic = true;\r\n\t\tthis.ecsManager.addComponent(entity, collisionComp);\r\n\t\tlet meshColComp = new MeshCollisionComponent(\r\n\t\t\tthis.stateAccessible.meshStore.getOctree(\r\n\t\t\t\t\"Assets/heightmaps/heightmap.png\"\r\n\t\t\t)\r\n\t\t);\r\n\t\tmeshColComp.octree.setModelMatrix(this.mapBundle.modelMatrix);\r\n\t\tthis.ecsManager.addComponent(entity, meshColComp);\r\n\r\n\t\t// Update the model matrix and mark the octree to be updated\r\n\t\tposComp.calculateMatrix(this.mapBundle.modelMatrix);\r\n\t\tmeshColComp.octree.setModelMatrix();\r\n\t}\r\n\r\n\tcreateSurroundingArea() {\r\n\t\tlet texturePath = \"Assets/heightmaps/surroundingArea.png\";\r\n\t\tlet texturePathColour = \"Assets/textures/HeightmapTexture.png\";\r\n\t\tlet texturePathSpec = \"Assets/textures/HeightmapTexture.png\";\r\n\t\tlet entity = this.ecsManager.createEntity();\r\n\t\tlet bundle = this.scene.getNewHeightMap(\r\n\t\t\ttexturePath,\r\n\t\t\ttexturePathColour,\r\n\t\t\ttexturePathSpec\r\n\t\t);\r\n\r\n\t\tlet heightmap = bundle.graphicsObject as Heightmap;\r\n\t\tlet vertices = heightmap.getVertices();\r\n\r\n\t\tfor (let i = 0; i < heightmap.xResolution * heightmap.zResolution; i++) {\r\n\t\t\tif (Math.pow((vertices[i * 8 + 1] * Math.random()), 2) > Math.pow(0.07, 2.0)) {\r\n\t\t\t\t// Set uvs to be tarmac\r\n\t\t\t\tvertices[i * 8 + 6] = 0.75;\r\n\t\t\t} else {\r\n\t\t\t\t// Set uvs to be grass\r\n\t\t\t\tvertices[i * 8 + 6] = 0.25;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\theightmap.setVertexData(vertices);\r\n\r\n\t\tthis.ecsManager.addComponent(entity, new GraphicsComponent(bundle));\r\n\t\tlet posComp = new PositionComponent();\r\n\t\tposComp.position.setValues(-160.0, -4.0, -160.0);\r\n\t\tposComp.scale.setValues(0.5, 80.0, 0.5);\r\n\t\tthis.ecsManager.addComponent(entity, posComp);\r\n\r\n\t\tlet walls = [\r\n\t\t\t[0, 40, -9.5],\r\n\t\t\t[90, 89.5, 40],\r\n\t\t\t[0, 40, 90],\r\n\t\t\t[90, -9.5, 40]\r\n\t\t]\r\n\r\n\t\tfor (let wall of walls) {\r\n\t\t\tlet cubeEntity = this.ecsManager.createEntity();\r\n\t\t\tlet cubeBundle = this.scene.getNewMesh(\"Assets/objs/cube.obj\", \"Assets/textures/Bricks.png\", \"Assets/textures/Bricks.png\");\r\n\t\t\tthis.ecsManager.addComponent(cubeEntity, new GraphicsComponent(cubeBundle));\r\n\t\t\tlet cubePosComp = new PositionComponent();\r\n\t\t\tcubePosComp.scale.setValues(50.0, 3.0, 1.0);\r\n\t\t\tcubePosComp.rotation.setValues(0.0, wall[0], 0.0);\r\n\t\t\tcubePosComp.position.setValues(wall[1], -2.0, wall[2]);\r\n\t\t\tcubeBundle.textureMatrix.scale(50.0, 1.0, 1.0);\r\n\t\t\tthis.ecsManager.addComponent(cubeEntity, cubePosComp);\r\n\t\t\tlet cubeBoundingBoxComp = new BoundingBoxComponent();\r\n\t\t\tcubeBoundingBoxComp.setup(cubeBundle.graphicsObject);\r\n\t\t\tcubeBoundingBoxComp.updateTransformMatrix(cubeBundle.modelMatrix);\r\n\t\t\tthis.ecsManager.addComponent(cubeEntity, cubeBoundingBoxComp);\r\n\t\t\tlet collisionComp = new CollisionComponent();\r\n\t\t\tcollisionComp.isStatic = true;\r\n\t\t\tthis.ecsManager.addComponent(cubeEntity, collisionComp);\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\r\n\tdoRayCast(ray: Ray): number {\r\n\t\tlet triangleArray = new Array<Triangle>();\r\n\t\tthis.stateAccessible.meshStore\r\n\t\t\t.getOctree(\"Assets/heightmaps/heightmap.png\")\r\n\t\t\t.getShapesForRayCast(ray, triangleArray);\r\n\t\treturn IntersectionTester.doRayCast(ray, triangleArray);\r\n\t}\r\n\r\n\tupdate(dt: number) {\r\n\t\tthis.player.update(dt);\r\n\t\tthis.gameTimer += dt;\r\n\r\n\t\tif (this.score <= 0.0) {\r\n\t\t\tthis.gotoState = StatesEnum.ENDSCREEN;\r\n\t\t}\r\n\r\n\t\tthis.scoreText.textString = \"Houses left: \" + this.score.toString();\r\n\t\tthis.gameTimeText.textString = Math.floor(this.gameTimer).toString();\r\n\r\n\t\tthis.grassHandler.update(dt);\r\n\r\n\t\t// if (input.keys[\"P\"]) {\r\n\t\t// \tthis.player.respawn();\r\n\t\t// }\r\n\r\n\t\t// if (input.keys[\"O\"]) {\r\n\t\t// \tthis.gotoState = StatesEnum.DEBUGMODE;\r\n\t\t// \tWebUtils.SetCookie(\"debug\", \"true\")\r\n\t\t// }\r\n\r\n\t\tthis.ecsManager.update(dt);\r\n\t}\r\n\r\n\tprepareDraw(dt: number): void {\r\n\t\tthis.ecsManager.updateRenderingSystems(dt);\r\n\t}\r\n\r\n\tdraw() {\r\n\t\tthis.rendering.draw();\r\n\t\tthis.overlayRendering.draw();\r\n\t\tinput.drawTouchControls();\r\n\t}\r\n}\r\n","import Progress from \"../../Engine/GUI/Progress\";\r\nimport State, { StatesEnum } from \"../../Engine/State\";\r\nimport TextObject2D from \"../../Engine/GUI/Text/TextObject2D\";\r\nimport { StateAccessible } from \"../GameMachine\";\r\nimport Texture from \"../../Engine/Textures/Texture\";\r\nimport { OverlayRendering } from \"../../Engine/Rendering/OverlayRendering\";\r\n\r\nexport default class LoadingScreen extends State {\r\n\tprivate overlayRendering: OverlayRendering;\r\n\tprivate sa: StateAccessible;\r\n\r\n\tprivate text: TextObject2D;\r\n\tprivate statusText: string;\r\n\tprivate progressBar: Progress;\r\n\tprivate progress: number;\r\n\tprivate timer: number;\r\n\r\n\tprivate texturesToLoad: Texture[];\r\n\tprivate meshesRequested: number;\r\n\tprivate meshesLoaded: number;\r\n\tprivate heightmapsRequested: number;\r\n\tprivate heightmapsLoaded: number;\r\n\tprivate octreesToLoad: Object[];\r\n\tprivate octreesRequested: number;\r\n\tprivate octreesLoaded: number;\r\n\r\n\tconstructor(sa: StateAccessible) {\r\n\t\tsuper();\r\n\t\tthis.overlayRendering = new OverlayRendering();\r\n\t\tthis.sa = sa;\r\n\r\n\t\t// Crate GUI\r\n\t\tthis.text = this.overlayRendering.getNew2DText();\r\n\t\tthis.text.center = true;\r\n\t\tthis.text.position.x = 0.5;\r\n\t\tthis.text.position.y = 0.4;\r\n\t\tthis.text.size = 50;\r\n\t\tthis.statusText = \"Loading assets \";\r\n\r\n\t\tthis.progressBar = this.overlayRendering.getNewProgress();\r\n\t\tthis.progressBar.center = true;\r\n\t\tthis.progressBar.position.x = 0.5;\r\n\t\tthis.progressBar.position.y = 0.5;\r\n\t\tthis.progressBar.size = 50;\r\n\t\tthis.progressBar.getProgressElement().style.borderRadius = \"4px\";\r\n\t\tthis.progressBar.getProgressElement().max = 1.0;\r\n\t\tthis.progressBar.getProgressElement().value = 0.0;\r\n\t\tthis.progress = 0;\r\n\t\tthis.timer = 0;\r\n\t}\r\n\r\n\tasync init() {\r\n\t\tsuper.init();\r\n\t\tthis.overlayRendering.show();\r\n\t\tthis.overlayRendering.draw();\r\n\r\n\t\t// Load all textures to avoid loading mid game\r\n\t\tlet textures = [\r\n\t\t\t\"Assets/textures/AimingBlob.png\",\r\n\t\t\t\"Assets/textures/fire.png\",\r\n\t\t\t\"Assets/textures/knight.png\",\r\n\t\t\t\"Assets/textures/black.png\",\r\n\t\t\t\"Assets/textures/white.png\",\r\n\t\t\t\"Assets/textures/GrassStraw.png\",\r\n\t\t\t\"Assets/textures/GrassStraw_Spec.png\",\r\n\t\t\t\"Assets/textures/HeightmapTexture.png\",\r\n\t\t\t\"Assets/textures/houseTex.png\",\r\n\t\t\t\"Assets/textures/houseTex_bright.png\",\r\n\t\t\t\"Assets/textures/DZ.png\",\r\n\t\t\t\"Assets/textures/BushTexture.png\",\r\n\t\t\t\"Assets/textures/Solros.png\",\r\n\t\t\t\"Assets/textures/AimingBlob.png\",\r\n\t\t\t\"Assets/textures/LeafTexture.png\",\r\n\t\t\t\"Assets/textures/mailbox.png\",\r\n\t\t\t\"Assets/textures/news.png\",\r\n\t\t\t\"Assets/textures/Bricks.png\",\r\n\t\t\t\"Assets/textures/tree_1.png\",\r\n\t\t\t\"Assets/textures/tree_2.png\",\r\n\t\t\t\"Assets/textures/tree_3.png\",\r\n\t\t];\r\n\r\n\t\tlet cubeMaps = [\r\n\t\t\t\"Assets/textures/skyboxes/LordKitty\",\r\n\t\t];\r\n\r\n\t\t// Meshes to load\r\n\t\tlet meshes = [\r\n\t\t\t\"Assets/objs/house.obj\",\r\n\t\t\t\"Assets/objs/mailbox.obj\",\r\n\t\t\t\"Assets/objs/newspaper.obj\",\r\n\t\t\t\"Assets/objs/fence.obj\",\r\n\t\t\t\"Assets/objs/BigBuske.obj\",\r\n\t\t\t\"Assets/objs/Solros.obj\",\r\n\t\t\t\"Assets/objs/Plant.obj\",\r\n\t\t\t\"Assets/objs/SmolBuske.obj\",\r\n\t\t\t\"Assets/objs/tree_1.obj\",\r\n\t\t\t\"Assets/objs/tree_2.obj\",\r\n\t\t\t\"Assets/objs/tree_3.obj\",\r\n\t\t\t\"Assets/objs/DeliveryZone.obj\",\r\n\t\t\t\"Assets/objs/cube.obj\",\r\n\t\t];\r\n\t\tthis.meshesRequested = meshes.length;\r\n\t\tthis.meshesLoaded = 0;\r\n\r\n\t\t// Heightmaps to load\r\n\t\tlet heightmaps: (string | number)[][] = [\r\n\t\t\t[\"Assets/heightmaps/heightmap.png\", 200, 200, 1.0, 1.0],\r\n\t\t\t[\"Assets/heightmaps/surroundingArea.png\", 400, 400, 2.0, 2.0],\r\n\t\t];\r\n\t\tthis.heightmapsRequested = heightmaps.length;\r\n\t\tthis.heightmapsLoaded = 0;\r\n\r\n\t\t// Octrees to create\r\n\t\tthis.octreesToLoad = [\r\n\t\t\t[\"Assets/heightmaps/heightmap.png\", 0.01, 10],\r\n\t\t\t[\"Assets/objs/house.obj\", 0.1, 20],\r\n\t\t\t[\"Assets/objs/mailbox.obj\", 0.1, 20],\r\n\t\t\t[\"Assets/objs/BigBuske.obj\", 0.1, 20],\r\n\t\t\t[\"Assets/objs/Solros.obj\", 0.1, 20],\r\n\t\t\t[\"Assets/objs/SmolBuske.obj\", 0.1, 20],\r\n\t\t\t[\"Assets/objs/tree_1.obj\", 0.1, 20],\r\n\t\t\t[\"Assets/objs/tree_2.obj\", 0.1, 20],\r\n\t\t\t[\"Assets/objs/tree_3.obj\", 0.1, 20],\r\n\t\t];\r\n\t\tthis.octreesRequested = this.octreesToLoad.length;\r\n\t\tthis.octreesLoaded = 0;\r\n\r\n\t\tthis.texturesToLoad = new Array<Texture>();\r\n\t\tfor (const texFile of textures) {\r\n\t\t\tthis.texturesToLoad.push(this.sa.textureStore.getTexture(texFile));\r\n\t\t}\r\n\r\n\t\tfor (const cubeMapFile of cubeMaps) {\r\n\t\t\tthis.texturesToLoad.push(this.sa.textureStore.getCubeMap(cubeMapFile));\r\n\t\t}\r\n\r\n\t\t// Load meshes\r\n\t\tfor (const meshFile of meshes) {\r\n\t\t\tthis.sa.meshStore.loadMesh(meshFile).then(() => {\r\n\t\t\t\tthis.meshesLoaded++;\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Load heightmaps\r\n\t\tfor (const heightmapInfo of heightmaps) {\r\n\t\t\tif (heightmapInfo.length == 5) {\r\n\t\t\t\tthis.sa.meshStore\r\n\t\t\t\t\t.loadHeightmap(\r\n\t\t\t\t\t\theightmapInfo[0] as string,\r\n\t\t\t\t\t\tfalse,\r\n\t\t\t\t\t\theightmapInfo[1] as number,\r\n\t\t\t\t\t\theightmapInfo[2] as number,\r\n\t\t\t\t\t\theightmapInfo[3] as number,\r\n\t\t\t\t\t\theightmapInfo[4] as number\r\n\t\t\t\t\t)\r\n\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\tthis.heightmapsLoaded++;\r\n\t\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tthis.sa.meshStore.loadHeightmap(heightmapInfo[0] as string).then(() => {\r\n\t\t\t\t\tthis.heightmapsLoaded++;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treset() {\r\n\t\tsuper.reset();\r\n\t\tthis.overlayRendering.hide();\r\n\t}\r\n\r\n\tupdate(dt: number) {\r\n\t\tlet requestedAssets =\r\n\t\t\tthis.texturesToLoad.length +\r\n\t\t\tthis.meshesRequested +\r\n\t\t\tthis.heightmapsRequested +\r\n\t\t\tthis.octreesRequested;\r\n\t\tlet texturesLoaded = 0;\r\n\t\tfor (let tex of this.texturesToLoad) {\r\n\t\t\tif (tex.loadedFromFile) {\r\n\t\t\t\ttexturesLoaded++;\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet loadedAssets =\r\n\t\t\ttexturesLoaded +\r\n\t\t\tthis.meshesLoaded +\r\n\t\t\tthis.heightmapsLoaded +\r\n\t\t\tthis.octreesLoaded;\r\n\r\n\t\t// When all meshes and heightmaps have been loaded, we can start processing octrees\r\n\t\tif (\r\n\t\t\tthis.meshesLoaded == this.meshesRequested &&\r\n\t\t\tthis.heightmapsLoaded == this.heightmapsRequested &&\r\n\t\t\tthis.octreesToLoad.length > 0\r\n\t\t) {\r\n\t\t\tthis.statusText = \"Generating octrees \";\r\n\t\t\tlet i = this.octreesToLoad.length - 1;\r\n\t\t\tlet octreeToLoad = this.octreesToLoad[i];\r\n\t\t\tthis.sa.meshStore\r\n\t\t\t\t.loadOctree(\r\n\t\t\t\t\toctreeToLoad[0],\r\n\t\t\t\t\toctreeToLoad[1],\r\n\t\t\t\t\toctreeToLoad[2],\r\n\t\t\t\t\t10 /*Give a 10 ms deadline*/\r\n\t\t\t\t)\r\n\t\t\t\t.then((value) => {\r\n\t\t\t\t\tif (value.doneLoading) {\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tthis.octreesToLoad[this.octreesToLoad.length - 1][0] ==\r\n\t\t\t\t\t\t\toctreeToLoad[0]\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tthis.octreesToLoad.pop(); // Done loading, remove it from the queue\r\n\t\t\t\t\t\t\tthis.octreesLoaded++; // And increase the number of octrees loaded\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t}\r\n\r\n\t\tthis.timer += dt;\r\n\r\n\t\tthis.progress = loadedAssets / requestedAssets;\r\n\t\tthis.progressBar.getProgressElement().value = this.progress;\r\n\t\tthis.text.textString = this.statusText;\r\n\t\tfor (let i = 4; i > 1; i--) {\r\n\t\t\tif (this.timer - Math.floor(this.timer) > 1.0 / i) {\r\n\t\t\t\tthis.text.textString += \"-\";\r\n\t\t\t} else {\r\n\t\t\t\tthis.text.textString += \"_\";\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.text.textString += \"  \" + Math.ceil(this.progress * 100) + \"%\";\r\n\r\n\t\tif (this.progress >= 1.0 && this.timer >= 0.5) {\r\n\t\t\tthis.gotoState = StatesEnum.MAINMENU;\r\n\t\t}\r\n\t}\r\n\r\n\tdraw() {\r\n\t\tthis.overlayRendering.draw();\r\n\t}\r\n}\r\n","import { OverlayRendering } from \"../../Engine/Rendering/OverlayRendering\";\r\nimport State, { StatesEnum } from \"../../Engine/State\";\r\nimport { WebUtils } from \"../../Engine/Utils/WebUtils\";\r\nimport { StateAccessible } from \"../GameMachine\";\r\n\r\nexport default class Menu extends State {\r\n\tprivate overlayRendering: OverlayRendering;\r\n\r\n\tconstructor(sa: StateAccessible) {\r\n\t\tsuper();\r\n\t\tthis.overlayRendering = new OverlayRendering();\r\n\r\n\t\tlet startButton = this.overlayRendering.getNewButton();\r\n\t\tstartButton.position.x = 0.5;\r\n\t\tstartButton.position.y = 0.2;\r\n\t\tstartButton.center = true;\r\n\t\tstartButton.textString = \"Start\";\r\n\r\n\t\tlet self = this;\r\n\t\tstartButton.onClick(function () {\r\n\t\t\tself.gotoState = StatesEnum.GAME;\r\n\t\t\tstartButton.textString = \"Resume\";\r\n\t\t});\r\n\r\n\t\tlet restartButton = this.overlayRendering.getNewButton();\r\n\t\trestartButton.position.x = 0.5;\r\n\t\trestartButton.position.y = 0.4;\r\n\t\trestartButton.center = true;\r\n\t\trestartButton.textString = \"Restart\";\r\n\r\n\t\trestartButton.onClick(function () {\r\n\t\t\tself.gotoState = StatesEnum.GAME;\r\n\t\t\tsa.restartGame = true;\r\n\t\t\tstartButton.textString = \"Resume\";\r\n\t\t\tWebUtils.SetCookie(\"debug\", \"false\");\r\n\t\t});\r\n\r\n\t\tlet optionsButton = this.overlayRendering.getNewButton();\r\n\t\toptionsButton.position.x = 0.5;\r\n\t\toptionsButton.position.y = 0.6;\r\n\t\toptionsButton.center = true;\r\n\t\toptionsButton.textString = \"Options\";\r\n\r\n\t\toptionsButton.onClick(function () {\r\n\t\t\tself.gotoState = StatesEnum.OPTIONS;\r\n\t\t});\r\n\r\n\t\tlet fullscreenButton = this.overlayRendering.getNewButton();\r\n\t\tfullscreenButton.position.x = 0.5;\r\n\t\tfullscreenButton.position.y = 0.8;\r\n\t\tfullscreenButton.center = true;\r\n\t\tfullscreenButton.textString = \"Fullscreen\";\r\n\r\n\t\tfullscreenButton.onClick(function () {\r\n\t\t\tdocument.getElementById(\"gameDiv\").requestFullscreen();\r\n\t\t});\r\n\t}\r\n\r\n\tasync init() {\r\n\t\tsuper.init();\r\n\t\tthis.overlayRendering.show();\r\n\t}\r\n\r\n\treset() {\r\n\t\tsuper.reset();\r\n\t\tthis.overlayRendering.hide();\r\n\t}\r\n\r\n\tupdate(dt: number) {}\r\n\r\n\tdraw() {\r\n\t\tthis.overlayRendering.draw();\r\n\t}\r\n}\r\n","import Button from \"../../Engine/GUI/Button\";\r\nimport Checkbox from \"../../Engine/GUI/Checkbox\";\r\nimport Slider from \"../../Engine/GUI/Slider\";\r\nimport { options } from \"../GameMachine\";\r\nimport State, { StatesEnum } from \"../../Engine/State\";\r\nimport { StateAccessible } from \"../GameMachine\";\r\nimport { OverlayRendering } from \"../../Engine/Rendering/OverlayRendering\";\r\n\r\nexport default class OptionsMenu extends State {\r\n\tprivate overlayRendering: OverlayRendering;\r\n\r\n\tprivate backButton: Button;\r\n\tprivate crtCB: Checkbox;\r\n\tprivate bloomCB: Checkbox;\r\n\tprivate grassCB: Checkbox;\r\n\tprivate grassDensitySlider: Slider;\r\n\tprivate fpsDisplayCB: Checkbox;\r\n\tprivate controlsButton: Button;\r\n\r\n\tconstructor(sa: StateAccessible) {\r\n\t\tsuper();\r\n\t\tthis.overlayRendering = new OverlayRendering();\r\n\r\n\t\tthis.crtCB = this.overlayRendering.getNewCheckbox();\r\n\t\tthis.crtCB.position.x = 0.4;\r\n\t\tthis.crtCB.position.y = 0.25;\r\n\t\tthis.crtCB.textString = \"CRT-effect \";\r\n\t\tthis.crtCB.getElement().style.color = \"cyan\";\r\n\t\tthis.crtCB.getInputElement().style.accentColor = \"red\";\r\n\t\tthis.crtCB.getInputElement().checked = options.useCrt;\r\n\r\n\t\tthis.bloomCB = this.overlayRendering.getNewCheckbox();\r\n\t\tthis.bloomCB.position.x = 0.4;\r\n\t\tthis.bloomCB.position.y = 0.3;\r\n\t\tthis.bloomCB.textString = \"Bloom-effect \";\r\n\t\tthis.bloomCB.getElement().style.color = \"cyan\";\r\n\t\tthis.bloomCB.getInputElement().style.accentColor = \"red\";\r\n\t\tthis.bloomCB.getInputElement().checked = options.useBloom;\r\n\r\n\t\tthis.grassCB = this.overlayRendering.getNewCheckbox();\r\n\t\tthis.grassCB.position.x = 0.4;\r\n\t\tthis.grassCB.position.y = 0.35;\r\n\t\tthis.grassCB.textString = \"Foldable grass \";\r\n\t\tthis.grassCB.getElement().style.color = \"cyan\";\r\n\t\tthis.grassCB.getInputElement().style.accentColor = \"red\";\r\n\t\tthis.grassCB.getInputElement().checked = options.foldableGrass;\r\n\r\n\t\tthis.grassDensitySlider = this.overlayRendering.getNewSlider();\r\n\t\tthis.grassDensitySlider.position.x = 0.4;\r\n\t\tthis.grassDensitySlider.position.y = 0.4;\r\n\t\tthis.grassDensitySlider.textString = \"Grass density \\r\\n(requires restart)\";\r\n\t\tthis.grassDensitySlider.getElement().style.color = \"cyan\";\r\n\t\tthis.grassDensitySlider.getInputElement().style.accentColor = \"red\";\r\n\t\tthis.grassDensitySlider.getInputElement().min = \"1000\";\r\n\t\tthis.grassDensitySlider.getInputElement().max = \"100000\";\r\n\t\tthis.grassDensitySlider.getInputElement().value = options.grassDensity + \"\";\r\n\r\n\t\tthis.fpsDisplayCB = this.overlayRendering.getNewCheckbox();\r\n\t\tthis.fpsDisplayCB.position.x = 0.4;\r\n\t\tthis.fpsDisplayCB.position.y = 0.5;\r\n\t\tthis.fpsDisplayCB.textString = \"Fps counter \";\r\n\t\tthis.fpsDisplayCB.getElement().style.color = \"cyan\";\r\n\t\tthis.fpsDisplayCB.getInputElement().style.accentColor = \"red\";\r\n\t\tthis.fpsDisplayCB.getInputElement().checked = options.showFps;\r\n\r\n\t\tthis.controlsButton = this.overlayRendering.getNewButton();\r\n\t\tthis.controlsButton.position.x = 0.5;\r\n\t\tthis.controlsButton.position.y = 0.75;\r\n\t\tthis.controlsButton.center = true;\r\n\r\n\t\tthis.controlsButton.textString = \"Controls\";\r\n\r\n\t\tlet self = this;\r\n\t\tthis.controlsButton.onClick(function () {\r\n\t\t\tself.gotoState = StatesEnum.CONTROLS;\r\n\t\t});\r\n\r\n\t\tthis.backButton = this.overlayRendering.getNewButton();\r\n\t\tthis.backButton.position.x = 0.5;\r\n\t\tthis.backButton.position.y = 0.85;\r\n\t\tthis.backButton.center = true;\r\n\t\tthis.backButton.textString = \"Back to main menu\";\r\n\r\n\t\tthis.backButton.onClick(function () {\r\n\t\t\tself.gotoState = StatesEnum.MAINMENU;\r\n\t\t});\r\n\t}\r\n\r\n\tasync init() {\r\n\t\tsuper.init();\r\n\t\tthis.overlayRendering.show();\r\n\t}\r\n\r\n\treset() {\r\n\t\tsuper.reset();\r\n\t\tthis.overlayRendering.hide();\r\n\t}\r\n\r\n\tupdate(dt: number) {\r\n\t\toptions.useCrt = this.crtCB.getChecked();\r\n\t\toptions.useBloom = this.bloomCB.getChecked();\r\n\t\toptions.foldableGrass = this.grassCB.getChecked();\r\n\t\toptions.showFps = this.fpsDisplayCB.getChecked();\r\n\t\toptions.grassDensity = this.grassDensitySlider.getValue();\r\n\t}\r\n\r\n\tdraw() {\r\n\t\tthis.overlayRendering.draw();\r\n\t}\r\n}\r\n","import { SAT } from \"./Engine/Maths/SAT\";\r\nimport GameMachine from \"./Game/GameMachine\";\r\nimport { createGeometryPass } from \"./Engine/ShaderPrograms/DeferredRendering/GeometryPass\";\r\nimport { createLightingPass } from \"./Engine/ShaderPrograms/DeferredRendering/LightingPass\";\r\nimport { createParticleShaderProgram } from \"./Engine/ShaderPrograms/ParticleShaderProgram\";\r\nimport { createGrassShaderProgram } from \"./Engine/ShaderPrograms/GrassShaderProgram\";\r\nimport { createPhongShaderProgram } from \"./Engine/ShaderPrograms/PhongShaderProgram\";\r\nimport { createBloomBlending } from \"./Engine/ShaderPrograms/PostProcessing/BloomBlending\";\r\nimport { createBloomExtraction } from \"./Engine/ShaderPrograms/PostProcessing/BloomExtraction\";\r\nimport { createCrtShaderProgram } from \"./Engine/ShaderPrograms/PostProcessing/CrtShaderProgram\";\r\nimport { createGaussianBlur } from \"./Engine/ShaderPrograms/PostProcessing/GaussianBlur\";\r\nimport { createScreenQuadShaderProgram } from \"./Engine/ShaderPrograms/ScreenQuadShaderProgram\";\r\nimport { createShadowPass } from \"./Engine/ShaderPrograms/ShadowMapping/ShadowPass\";\r\nimport { createSimpleShaderProgram } from \"./Engine/ShaderPrograms/SimpleShaderProgram\";\r\nimport { createGrassShadowPass } from \"./Engine/ShaderPrograms/ShadowMapping/GrassShadowPass\";\r\nimport { createSkyboxShaderProgram } from \"./Engine/ShaderPrograms/Skybox/SkyboxShaderProgram\";\r\n\r\nSAT.runUnitTests();\r\n\r\n// Globals\r\nexport let gl: WebGL2RenderingContext;\r\nexport let applicationStartTime = Date.now();\r\nexport let windowInfo = {\r\n\tresolutionWidth: 1920,\r\n\tresolutionHeight: 1080,\r\n\tpaddingX: 0,\r\n\tpaddingY: 0,\r\n};\r\n\r\nfunction initWebGL(): WebGL2RenderingContext {\r\n\tlet canvas = <HTMLCanvasElement>document.getElementById(\"gameCanvas\");\r\n\tcanvas.width = windowInfo.resolutionWidth;\r\n\tcanvas.height = windowInfo.resolutionHeight;\r\n\r\n\tlet tempGl = canvas.getContext(\"webgl2\", { antialias: false });\r\n\tif (!tempGl.getExtension(\"EXT_color_buffer_float\")) {\r\n\t\talert(\r\n\t\t\t\"Rendering to floating point textures is not supported on this platform\"\r\n\t\t);\r\n\t}\r\n\tif (!tempGl.getExtension(\"OES_texture_float_linear\")) {\r\n\t\talert(\"Floating point rendering to FBO textures not supported\");\r\n\t}\r\n\r\n\tif (!tempGl) {\r\n\t\tconsole.log(\"Failed to get rendering context for WebGL\");\r\n\t\treturn;\r\n\t}\r\n\r\n\treturn tempGl;\r\n}\r\n\r\nconst heightByWidth = 9 / 16;\r\nconst widthByHeight = 16 / 9;\r\nconst gameDiv = document.getElementById(\"gameDiv\");\r\n\r\nfunction resize(gl: WebGL2RenderingContext) {\r\n\t// Get the dimensions of the viewport\r\n\tlet innerWindowSize = {\r\n\t\twidth: window.innerWidth,\r\n\t\theight: window.innerHeight,\r\n\t};\r\n\r\n\tlet newGameHeight;\r\n\tlet newGameWidth;\r\n\r\n\t// Determine game size\r\n\tif (heightByWidth > innerWindowSize.height / innerWindowSize.width) {\r\n\t\tnewGameHeight = innerWindowSize.height;\r\n\t\tnewGameWidth = newGameHeight * widthByHeight;\r\n\t} else {\r\n\t\tnewGameWidth = innerWindowSize.width;\r\n\t\tnewGameHeight = newGameWidth * heightByWidth;\r\n\t}\r\n\r\n\tlet newGameX = (innerWindowSize.width - newGameWidth) / 2;\r\n\tlet newGameY = (innerWindowSize.height - newGameHeight) / 2;\r\n\r\n\t// Center the game by setting the padding of the game\r\n\tgameDiv.style.padding = newGameY + \"px \" + newGameX + \"px\";\r\n\r\n\t// Resize game\r\n\tgameDiv.style.width = newGameWidth + \"px\";\r\n\tgameDiv.style.height = newGameHeight + \"px\";\r\n\tgl.canvas.width = newGameWidth; // This is not the same as style.width, so it won't be inherited by the css inherit property\r\n\tgl.canvas.height = newGameHeight; // This is not the same as style.height, so it won't be inherited by the css inherit property\r\n\r\n\t// Update the windowInfo resolution\r\n\twindowInfo.resolutionWidth = newGameWidth;\r\n\twindowInfo.resolutionHeight = newGameHeight;\r\n\twindowInfo.paddingX = newGameX;\r\n\twindowInfo.paddingY = newGameY;\r\n}\r\n\r\nfunction createShaders() {\r\n\tcreateGeometryPass();\r\n\tcreateLightingPass();\r\n\tcreateBloomBlending();\r\n\tcreateBloomExtraction();\r\n\tcreateCrtShaderProgram();\r\n\tcreateGaussianBlur();\r\n\tcreateShadowPass();\r\n\tcreateGrassShadowPass();\r\n\tcreateParticleShaderProgram();\r\n\tcreateGrassShaderProgram();\r\n\tcreatePhongShaderProgram();\r\n\tcreateScreenQuadShaderProgram();\r\n\tcreateSimpleShaderProgram();\r\n\tcreateSkyboxShaderProgram();\r\n}\r\n\r\nlet gameMachine: GameMachine;\r\n\r\n/* main */\r\nwindow.onload = async () => {\r\n\t\"use strict\";\r\n\r\n\t// Set up webgl\r\n\tgl = initWebGL();\r\n\r\n\t// Create all shaders\r\n\tcreateShaders();\r\n\r\n\tgameMachine = new GameMachine();\r\n\r\n\t// Resize to fit the current window\r\n\tresize(gl);\r\n\r\n\t// Resize canvas in the future when window is resized\r\n\twindow.addEventListener(\"resize\", function () {\r\n\t\tresize(gl);\r\n\t});\r\n\r\n\twindow.addEventListener(\"beforeunload\", function (e: BeforeUnloadEvent) {\r\n\t\tgameMachine.onExit(e);\r\n\t});\r\n\r\n\t// Start the state machine\r\n\tgameMachine.start();\r\n};\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6507);\n"],"names":["constructor","this","meshMap","Map","heightmapMap","octreeMap","getMesh","path","printWarnings","get","console","warn","loadMesh","mesh","newVertices","parseObjContent","set","geometryPass","getHeightmap","loadHeightmap","useTextureSizeForResolution","x","y","sizePerX","sizePerY","heightmap","newHeightmap","createPlane","readHeightDataFromTexture","getOctree","octree","triangles","length","loadOctree","smallestOctreeNodeSizeMultiplicator","maxShapesPerOctreeNode","timeLimit","Infinity","startTime","Date","now","doneLoading","undefined","Array","endsWith","setupTriangles","octPath","split","pop","response","fetch","ok","log","octContent","text","parseOct","minVec","maxVec","tri","vertex","getTransformedVertices","max","min","addShape","prune","downloadOctrees","data","getDataString","WebUtils","DownloadFile","meshPath","lines","vertexPositions","vertexTexCoords","vertexNormals","vertices","line","trim","startsWith","coords","filter","element","push","parseFloat","i","j","indices","last","posIndex","NaN","texCoordIndex","normalIndex","parseInt","returnArr","Float32Array","isNaN","z","textures","cubeMaps","getTexture","tex","newTexture","loadFromFile","getCubeMap","cubeMap","newCubeMap","loadCubemap","sounds","active","sound","preload","playSound","key","loop","play","setVolume","volume","setTime","time","currentTime","pauseSound","pause","stopAll","gl","pos","dir","viewMatrix","Matrix4","viewMatrixNeedsUpdate","projectionMatrix","projMatrixNeedsUpdate","ratio","fov","viewProjMatrix","getViewProjMatrix","updateViewProjMatrix","getViewMatrix","getProjectionMatrix","getPosition","getDir","getRight","returnVec","upVec","cross","normalize","setPosition","posX","posY","posZ","translate","setDir","dirX","dirY","dirZ","setFOV","setAspectRatio","updateViewProj","setLookAt","setPerspective","concat","bindViewProjMatrix","uniformLocation","skybox","tempViewProj","tempViewMatrix","fromMatrix4","toMatrix4","uniformMatrix4fv","elements","BoundingBoxComponent","Component","super","ComponentTypeEnum","BOUNDINGBOX","boundingBox","setup","graphicsObj","getVertexPositions","setMinAndMaxVectors","updateTransformMatrix","matrix","setTransformMatrix","setUpdateNeeded","CollisionComponent","COLLISION","isStatic","isImmovable","type","_type","GraphicsComponent","object","GRAPHICS","MeshCollisionComponent","graphicsObject","MESHCOLLISION","smallestNodeSizeMultiplicator","maxShapesPerNode","addShapes","MovementComponent","MOVEMENT","constantAcceleration","accelerationDirection","acceleration","velocity","drag","onGround","jumpPower","jumpRequested","jumpAllowed","ParticleSpawnerComponent","particleSpawner","PARTICLESPAWNER","lifeTime","resetTimer","PositionComponent","componentType","POSITION","position","rotation","scale","origin","calculateMatrix","length2","normRotation","rotate","len","rendering","camera","systems","entityCounter","entities","entityAdditionQueue","entityDeletionQueue","componentAdditionQueue","componentRemovalQueue","initializeSystems","update","dt","addQueuedEntities","addQueuedComponents","removeComponents","removeEntitiesMarkedForDeletion","updateRenderingSystems","createEntity","addComponent","entity","component","removeEntity","entityID","removeComponent","getEntity","id","getSystem","newEntity","system","addEntity","compEntityPair","containsEntity","index","findIndex","e","splice","removeFaultyEntity","components","hasComponent","some","c","getComponent","find","CameraFocusSystem","CAMERAFOCUS","posComp","POSITIONPARENT","camFocusComp","camPos","add","offset","CollisionSystem","information","e1","e1CollisionComp","e1BoundingBoxComp","e1MeshCollisionComp","setModelMatrix","e2","e2BoundingBoxComp","e2CollisionComp","e2MeshCollisionComp","IntersectionTester","identifyIntersection","e1ShapeArray","e2ShapeArray","getShapesForCollision","shape","getTransformMatrix","identifyIntersectionInformation","movComp","inf","axis","shapeB","getTransformedNormals","deepAssign","dotProd","dot","subtract","multiply","displacement","CollisionSolver","getTranslationNeeded","GraphicsSystem","graphComp","posParentComp","modelMatrix","setIdentity","pointLightComp","POINTLIGHT","pointLight","posOffset","MovementSystem","oldVel","dragVec","magnitude","Math","abs","ParticleSpawnerSystem","particleComp","currentParticle","floor","getNumberOfParticles","endParticle","resetParticleStartTime","setParticleStartPosition","PositionMatrixUpdateSystem","componentTypes","requiredComponents","entityHasCorrectComponents","entityId","width","height","depthTexture","fbo","createFramebuffer","bindFramebuffer","FRAMEBUFFER","setupAttachments","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","attachments","setTextureData","setTexParameterI","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_2D","texture","drawBuffers","DEPTH_ATTACHMENT","rbo","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_STENCIL","framebufferRenderbuffer","DEPTH_STENCIL_ATTACHMENT","setProportions","DEPTH24_STENCIL8","bind","target","Button","textSize","inputNode","document","createElement","className","div","appendChild","getElement","getInputElement","onClick","fn","addEventListener","draw","position2D","value","textString","fontSize","drawObject","Checkbox","label","textContent","getChecked","checked","cssClass","removed","scaleWithWindow","center","divContainerElement","getElementById","setHidden","hidden","remove","style","left","top","windowInfo","resolutionHeight","transform","Progress","size","progressNode","getProgressElement","Slider","getValue","Number","TextObject2D","textNode","createTextNode","TextObject3D","scaleFontWithDistance","draw3D","viewProj","Vector4","screenCoords","multiplyVector4","keys","buttons","gamepads","mousePosition","previousX","previousY","mousePositionOnCanvas","mouseClicked","mouseMovementSinceLast","simulateTouchBasedOnMouse","touchUsed","self","event","toUpperCase","movementX","movementY","clientX","clientY","paddingX","paddingY","handleTouch","touches","preventDefault","joystickLeftDirection","joystickRightDirection","repositionTouchControls","joystickLeftRadius","joystickRightRadius","screenAspectRatio","joystickLeftBorder","opacity","joystickLeftCenter","color","joystickRightBorder","joystickRightCenter","buttonRadius","aButton","bButton","joystickLeftBeingUsed","joystickRightBeingUsed","resolutionWidth","joystickLeftRadiusInPixels","joystickRightRadiusInPixels","aButtonCenter","bButtonCenter","touch","touchPos","joystickLeftDistanceFromCenter","joystickRightDistanceFromCenter","getMouseMovement","diff","setValues","updateGamepad","window","isSecureContext","navigator","getGamepads","gp","axes","drawTouchControls","shaderProgram","direction","colour","ambientMultiplier","lightProjectionBoxSideLength","uniform3fv","getUniformLocation","uniform1f","calcAndSendLightSpaceMatrix","focusPos","cameraPos","offsetVec","lightSpaceMatrix","setOrtho","lightView","constant","linear","quadratic","lightIndex","ul","Matrix3","mat4","retMat","multiplyVec3","vec","v","transpose","t","determinant","adj","temp","invert","MousePicking","GetRay","ndc","input","mouseRayClip","mouseRayCamera","mouseRayWorld4D","ray","setStart","SAT","getContinousOverlap","testVec","shapeAVertices","shapeBVertices","relativeVelocity","times","T","minA","minB","maxA","maxB","tempDot","vert","speed","first","getOverlap","overlapVector","reverse","margin","overlap1","overlap2","getIntersectionPoint","shapeA","testAxis","maxAPoints","minAPoints","maxBPoints","minBPoints","averagePoint","nrPoints","p","getIntersection3D","intersectionAxis","intersectionDepth","depth","checkNormal","normal","overlap","flip","shapeANormals","shapeBNormals","crossVector","AEdgeNormal","getTransformedEdgeNormals","BEdgeNormal","getTransformedEdges","getContinousIntersection3D","velocityA","velocityB","timeMax","relativeVel","runUnitTests","vertexCoords","positiveTests","t1Index","t2Index","strictDirection","negativeTests","setVertices","alert","compare","base","iterate","fill","fun","other","returnVal","sqrt","pow","otherVec","mult","Vec2","Vec3","tempVec","diffuse","specular","emissionMap","emission","Uint8Array","baseColor","Vector3","textureMatrix","bindSpecialTextures","modelReturn","textureReturn","VAO","VBO","EBO","init","createVertexArray","createBuffer","bindVertexArray","bindBuffer","ARRAY_BUFFER","setupVertexAttributePointers","bindVAO","unbindVAO","setVertexData","bufferData","STATIC_DRAW","setIndexData","ELEMENT_ARRAY_BUFFER","GrassSpawner","numberOfStartingGrassStraws","instanceVBO","setupInstancedVertexAttributePointers","numGrassStraws","setNumGrassStraws","amount","getNumberOfGrassStraws","setGrassStrawData","particleIndex","startPosition","tipOffset","bufferSubDataUpdate","setGrassStrawPosition","setGrassStrawSize","setGrassTipOffset","start","bufferSubData","drawArraysInstanced","TRIANGLES","Heightmap","xResolution","zResolution","imageData","updateVertexData","values","updateVertexHeight","calculateVertexNormal","resultingNormal","middlePos","offsets","tempTriangle","second","xQuadSize","zQuadSize","ceil","Int32Array","indicesOffset","topLeftIndex","bottomLeftIndex","texturePath","createResolutionFromPixels","src","Promise","resolve","reject","img","Image","onload","onerror","image","newWidth","newHeight","canvas","ctx","getContext","drawImage","getImageData","getNormalFromWorldPosition","heightmapTransformMatrix","worldPosition","invertedTransformMatrix","invertedMatrix","transformedPos","getNormal","getHeightFromWorldPosition","getHeight","baseX","baseZ","diffX","diffZ","topRightHeight","bottomLeftHeight","topLeftHeight","bottomRightHeight","xCoord","round","zCoord","getVertices","drawElements","UNSIGNED_INT","Mesh","drawArrays","TreeNode","obb","halfSize","children","content","createChildren","minNodeSize","quarterSize","checkIfContains","shapeVertices","subdivideTree","child","updateBox","shapeArray","getShapesForRayCast","maxDistance","doRayCast","print","result","getOriginalVertices","baseNodeSize","baseNode","shapes","output","rows","currentNode","currentSize","parentQueue","row","substring","currentPos","map","n","points","ParticleSpawner","numberOfStartingParticles","DYNAMIC_DRAW","numParticles","fadePerSecond","sizeChangePerSecond","setNumParticles","setParticleData","startVel","applicationStartTime","setParticleSize","setParticleStartVelocity","vel","setParticleStartTime","setParticleAcceleration","acc","drawElementsInstanced","PhongQuad","ScreenQuad","bindTextures","Skybox","intersectionInformation","resultingVec","maxDepth","point","shapeArrayA","shapeArrayB","intersecting","tempIntersectionAxis","tempIntersectionDepth","breakOnFirstHit","closestHit","dist","OBB","originalVertices","originalNormals","transformedVertices","transformedNormals","transformMatrix","verticesNeedsUpdate","normalsNeedsUpdate","setNormals","normals","norm","originalVertex","transformedVertex","transformedVertexVec3","Ray","setStartAndDir","Triangle","originalNormal","transformedEdges","transformedEdgeNormals","normalNeedsUpdate","edgesNeedsUpdate","edgeNormalsNeedsUpdate","vertex1","vertex2","vertex3","guiObjects3D","guiObjects2D","clear","guiObject2D","guiObject3D","hide","show","getNew2DText","getNew3DText","getNewCheckbox","getNewButton","getNewSlider","getNewProgress","inputTextures","bloomExtractionOutputFramebuffer","pingPongFramebuffers","bloomResolutionWidth","bloomResolutionHeight","screenQuad","screenQuadShaderProgram","outputFramebuffer","setResolution","bindFramebuffers","DRAW_FRAMEBUFFER","disable","DEPTH_TEST","bloomExtraction","use","viewport","horizontal","firstIteration","gaussianBlur","uniform1ui","bloomBlending","enable","crtShaderProgram","RGBA32F","RGBA","FLOAT","scene","clearColor","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","renderScene","grassShaderProgram","renderGrass","lightingPass","directionalLight","uniform1i","pointLights","particleSpawners","particleShaderProgram","shadowResolution","shadowOffset","shadowBuffer","DEPTH_COMPONENT32F","DEPTH_COMPONENT","setShadowMappingResolution","res","shadowPass","getDirectionalLight","grassShadowPass","setSkybox","cubemap","skyboxShaderProgram","depthFunc","LEQUAL","LESS","textureStore","shadowRenderPass","geometryRenderPass","textureArray","lightingRenderPass","particleRenderPass","useSkybox","skyboxRenderPass","useCrt","options","crtFramebuffer","crtRenderPass","bloomExtractionInputFramebuffer","bloomRenderPass","useBloom","finishedFramebuffer","finishedOutputRenderPass","initGL","clearColour","r","g","b","a","BLEND","cullFace","BACK","CULL_FACE","reportCanvasResize","READ_FRAMEBUFFER","blitFramebuffer","NEAREST","meshStore","graphicBundles","grassSpawners","getNewPhongQuad","diffusePath","specularPath","getNewMesh","getNewHeightMap","heightmapPath","getNewParticleSpawner","getNewGrassSpawner","diffuseTexturePath","specularTexturePath","getNewPointLight","deleteGraphicsBundle","o","deletePointLight","light","l","deleteParticleSpawner","ps","bundle","geometryFragmentShaderSrc","GeometryPass","setUniformLocation","vertexAttribPointer","enableVertexAttribArray","createGeometryPass","pointLightsToAllocate","lightingFragmentShaderSrc","LightingPass","screenQuadVertexSrc","createLightingPass","GrassShaderProgram","vertexAttribDivisor","createGrassShaderProgram","ParticleShaderProgram","createParticleShaderProgram","phongFragmentShaderSrc","PhongShaderProgram","phongShaderProgram","createPhongShaderProgram","BloomBlending","createBloomBlending","BloomExtraction","createBloomExtraction","CrtShaderProgram","createCrtShaderProgram","GaussianBlur","createGaussianBlur","ScreenQuadShaderProgram","uniformBindings","createScreenQuadShaderProgram","shaderProgramName","vertexShaderName","fragmentShaderName","debugShaderCompilation","loadShaders","vertexShaderString","fragmentShaderString","deleteProgram","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","linkedShaders","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteShader","useProgram","uniformName","has","GrassShadowPass","shadowFragmentShaderSrc","createGrassShadowPass","ShadowPass","createShadowPass","SimpleShaderProgram","simpleShaderProgram","createSimpleShaderProgram","skyboxVertexSrc","SkyboxShaderProgram","createSkyboxShaderProgram","StatesEnum","gotoState","STAY","initialized","reset","onExit","prepareDraw","startState","fps","lastTick","updateTimer","fpsUpdateTimer","frameCounter","states","currentState","firstLoop","addState","stateEnum","stateType","minUpdateRate","state","updateFrameTimers","updateState","updatesSinceRender","runCurrentState","oldState","requestAnimationFrame","CubeMap","useMipMap","internalFormat","format","dataStorageType","UNSIGNED_BYTE","textureTarget","TEXTURE_CUBE_MAP","TEXTURE_WRAP_R","REPEAT","sidesLoaded","face","bindTexture","texImage2D","TEXTURE_CUBE_MAP_POSITIVE_X","URLs","crossOrigin","generateMipmap","texParameteri","LINEAR_MIPMAP_LINEAR","loadedFromFile","createTexture","pixelStorei","UNPACK_FLIP_Y_WEBGL","textureIndex","activeTexture","TEXTURE0","URL","GetCookie","cookieName","name","ca","decodeURIComponent","cookie","charAt","indexOf","SetCookie","cookieValue","daysToLast","d","getTime","expires","toUTCString","DeleteCookie","filename","setAttribute","encodeURIComponent","display","body","click","removeChild","DeiliveryZoneComponent","DELIVERYZONE","radius","triggerd","DeliveryZoneSystem","game","getInstanceNoSa","newspapersStopped","paperPosComp","zoneComp","graComp","score","ecsManager","foldableGrass","showFps","grassDensity","GameMachine","LOADINGSCREEN","initializeOptions","stateAccessible","audioPlayer","restartGame","MAINMENU","OPTIONS","CONTROLS","ENDSCREEN","getInstance","GAME","DEBUGMODE","overlayRendering","OverlayRendering","fpsDisplay","valueOf","toString","s","volumeCookie","grassDensityCookie","mapBundle","doggo","grassStrawsPerSpawner","grassStrawsSpawned","grassSpawnerSide","grassElevationCutoff","createGrass","offsetX","offsetY","spawner","fillGrass","strawDist","firstIndex","lastSpawnerIndex","spawnerIndex","grassStrawPosition","random","updateGrass","doggoPosition","doggoVelocity","getVelocity","grassSpawner","diffY","middleX","middleY","startingPos","startingVel","startingRot","moveComp","paperMesh","boundingBoxComp","Transform","rot","Placement","modelPath","placementPath","addCollision","placementsPath","transforms","transformAdded","transformsAdded","placements","currentlyEditingTransform","currentlyEditingPlacement","load","placement","placeObject","saveToTransforms","collisionComp","meshColComp","rayCastToSelectNewObject","closest","bbComp","updateCurrentlyEditingObject","rotationChange","scaleChange","newPosition","currentlyEditingEntity","downloadTransforms","transformsData","returnValue","throwCooldown","throwTimer","newspapers","throwStrength","throwPos","throwVel","prepThrow","positionComp","respawn","throwPaper","rotVec","mouseMovement","rotMatrix","rotAmount","rightVec","oldDir","newDir","multiplyVector3","accVec","forward","right","idt","throwRelease","xzVelocity","ControlsMenu","sa","backButton","overlay","downloadOctreesButton","backgroundColor","borderRadius","padding","downloadTransformsButton","objectPlacer","placementMenuText","textShadow","actionText","DebugMode","debugMenu","currentlyPlacing","placementOptions","lastMousePos","mouseWasPressed","posCookie","dirCookie","moveVec","move","rotChange","edited","camDir","grassHandler","EndScreen","endText","borderColor","scoreText","scoreTextNumber","restartButton","gameTimer","Game","static","instance","createMapEntity","createSurroundingArea","dirLight","player","menuButton","gameTimeText","requestPointerLock","walls","wall","cubeEntity","cubeBundle","cubePosComp","cubeBoundingBoxComp","triangleArray","LoadingScreen","statusText","progressBar","progress","timer","meshes","meshesRequested","meshesLoaded","heightmaps","heightmapsRequested","heightmapsLoaded","octreesToLoad","octreesRequested","octreesLoaded","texturesToLoad","texFile","cubeMapFile","meshFile","then","heightmapInfo","requestedAssets","texturesLoaded","loadedAssets","octreeToLoad","Menu","startButton","optionsButton","fullscreenButton","requestFullscreen","OptionsMenu","crtCB","accentColor","bloomCB","grassCB","grassDensitySlider","fpsDisplayCB","controlsButton","heightByWidth","gameDiv","resize","newGameHeight","newGameWidth","innerWindowSize","innerWidth","innerHeight","newGameX","newGameY","gameMachine","tempGl","antialias","getExtension","initWebGL","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call"],"sourceRoot":""}